// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:amap_map_fluttify/src/ios/ios.export.g.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
extension TypeOpAmapMapFluttifyIOS on Object {
  // type check
  Future<bool> is__<T>() async {
    final typeName = T.toString();
    if (RegExp('(List<)?(String|int|double)(>)?|(Map<String,(String|int|double)>)').hasMatch(typeName)) {
      return this is T;
    }
    else if (T == MAOfflineCity) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAOfflineCity', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAOfflineItemNationWide) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAOfflineItemNationWide', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAMultiPoint) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAMultiPoint', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAGroundOverlay) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAGroundOverlay', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAPolygonRenderer) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAPolygonRenderer', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAPinAnnotationView) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAPinAnnotationView', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAHeatMapNode) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAHeatMapNode', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAHeatMapGradient) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAHeatMapGradient', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAHeatMapTileOverlay) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAHeatMapTileOverlay', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAMapStatus) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAMapStatus', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAPointAnnotation) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAPointAnnotation', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MACircle) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMACircle', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAArcRenderer) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAArcRenderer', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAAnnotation) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAAnnotation', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAAnimatableAnnotation) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAAnimatableAnnotation', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAOfflineMapViewController) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAOfflineMapViewController', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAMapCustomStyleOptions) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAMapCustomStyleOptions', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAPolygon) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAPolygon', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleOverlay) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleOverlay', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAPolyline) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAPolyline', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAMultiColoredPolylineRenderer) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAMultiColoredPolylineRenderer', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAAnimatedAnnotation) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAAnimatedAnnotation', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAOverlay) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAOverlay', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAMultiTexturePolylineRenderer) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAMultiTexturePolylineRenderer', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAOfflineProvince) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAOfflineProvince', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MATileOverlayRenderer) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMATileOverlayRenderer', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAOfflineItem) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAOfflineItem', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAGeodesicPolyline) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAGeodesicPolyline', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MATouchPoi) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMATouchPoi', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAOfflineItemMunicipality) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAOfflineItemMunicipality', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAMultiPolyline) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAMultiPolyline', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MATraceManager) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMATraceManager', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAMultiPointOverlayRenderer) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAMultiPointOverlayRenderer', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAIndoorFloorInfo) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAIndoorFloorInfo', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAIndoorInfo) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAIndoorInfo', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAPolylineRenderer) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAPolylineRenderer', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAAnnotationMoveAnimation) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAAnnotationMoveAnimation', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAShape) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAShape', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAAnnotationView) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAAnnotationView', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MATileOverlay) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMATileOverlay', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MATileOverlayPath) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMATileOverlayPath', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MACustomCalloutView) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMACustomCalloutView', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAOfflineItemCommonCity) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAOfflineItemCommonCity', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAOfflineMap) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAOfflineMap', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MACircleRenderer) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMACircleRenderer', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleOverlayRenderer) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleOverlayRenderer', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MACoordinateBounds) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMACoordinateBounds', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MACoordinateSpan) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMACoordinateSpan', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MACoordinateRegion) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMACoordinateRegion', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAMapPoint) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAMapPoint', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAMapSize) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAMapSize', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAMapRect) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAMapRect', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleVelocityGenerate) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleVelocityGenerate', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleRandomVelocityGenerate) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleRandomVelocityGenerate', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleColorGenerate) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleColorGenerate', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleRandomColorGenerate) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleRandomColorGenerate', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleRotationGenerate) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleRotationGenerate', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleConstantRotationGenerate) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleConstantRotationGenerate', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleSizeGenerate) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleSizeGenerate', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleCurveSizeGenerate) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleCurveSizeGenerate', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleEmissionModule) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleEmissionModule', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleShapeModule) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleShapeModule', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleSinglePointShapeModule) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleSinglePointShapeModule', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleRectShapeModule) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleRectShapeModule', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleOverLifeModule) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleOverLifeModule', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleOverlayOptions) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleOverlayOptions', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAParticleOverlayOptionsFactory) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAParticleOverlayOptionsFactory', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAOverlayRenderer) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAOverlayRenderer', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAUserLocation) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAUserLocation', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAMultiPointItem) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAMultiPointItem', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAMultiPointOverlay) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAMultiPointOverlay', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MACustomBuildingOverlayOption) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMACustomBuildingOverlayOption', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MACustomBuildingOverlay) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMACustomBuildingOverlay', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MATracePoint) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMATracePoint', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MATraceLocation) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMATraceLocation', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAArc) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAArc', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAUserLocationRepresentation) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAUserLocationRepresentation', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAMapView) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAMapView', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAOverlayPathRenderer) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAOverlayPathRenderer', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MAGroundOverlayRenderer) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMAGroundOverlayRenderer', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == MACustomBuildingOverlayRenderer) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfMACustomBuildingOverlayRenderer', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == CLLocation) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfCLLocation', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == CLHeading) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfCLHeading', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == CGRect) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfCGRect', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == CGPoint) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfCGPoint', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == CGSize) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfCGSize', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == UIEdgeInsets) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfUIEdgeInsets', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == CLLocationCoordinate2D) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfCLLocationCoordinate2D', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == CLLocationManager) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfCLLocationManager', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == NSError) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfNSError', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == NSCoding) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfNSCoding', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == NSCopying) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfNSCopying', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == UIView) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfUIView', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == UIViewController) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfUIViewController', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == UIControl) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfUIControl', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == UIImage) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfUIImage', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == UIColor) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfUIColor', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == NSData) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfNSData', {'refId': (this as Ref).refId});
      return result;
    }
    else if (T == NSOperation) {
      final result = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('RefClass::isKindOfNSOperation', {'refId': (this as Ref).refId});
      return result;
    }
  }

  // type cast
  T as__<T>() {
    final typeName = T.toString();
    // jsonable 直接造型 返回
    if (RegExp('(List<)?(String|int|double)(>)?|(Map<String,(String|int|double)>)').hasMatch(typeName)) {
      return this as T;
    }
    else if (T == MAOfflineCity) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAOfflineCity()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAOfflineItemNationWide) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAOfflineItemNationWide()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAMultiPoint) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAMultiPoint()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAGroundOverlay) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAGroundOverlay()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAPolygonRenderer) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAPolygonRenderer()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAPinAnnotationView) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAPinAnnotationView()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAHeatMapNode) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAHeatMapNode()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAHeatMapGradient) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAHeatMapGradient()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAHeatMapTileOverlay) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAHeatMapTileOverlay()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAMapStatus) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAMapStatus()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAPointAnnotation) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAPointAnnotation()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MACircle) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MACircle()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAArcRenderer) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAArcRenderer()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAAnnotation) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAAnnotation.subInstance()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAAnimatableAnnotation) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAAnimatableAnnotation.subInstance()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAOfflineMapViewController) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAOfflineMapViewController()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAMapCustomStyleOptions) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAMapCustomStyleOptions()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAPolygon) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAPolygon()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleOverlay) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleOverlay()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAPolyline) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAPolyline()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAMultiColoredPolylineRenderer) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAMultiColoredPolylineRenderer()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAAnimatedAnnotation) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAAnimatedAnnotation()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAOverlay) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAOverlay.subInstance()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAMultiTexturePolylineRenderer) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAMultiTexturePolylineRenderer()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAOfflineProvince) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAOfflineProvince()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MATileOverlayRenderer) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MATileOverlayRenderer()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAOfflineItem) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAOfflineItem()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAGeodesicPolyline) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAGeodesicPolyline()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MATouchPoi) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MATouchPoi()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAOfflineItemMunicipality) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAOfflineItemMunicipality()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAMultiPolyline) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAMultiPolyline()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MATraceManager) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MATraceManager()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAMultiPointOverlayRenderer) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAMultiPointOverlayRenderer()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAIndoorFloorInfo) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAIndoorFloorInfo()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAIndoorInfo) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAIndoorInfo()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAPolylineRenderer) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAPolylineRenderer()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAAnnotationMoveAnimation) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAAnnotationMoveAnimation()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAShape) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAShape()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAAnnotationView) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAAnnotationView()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MATileOverlay) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MATileOverlay()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MATileOverlayPath) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MATileOverlayPath()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MACustomCalloutView) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MACustomCalloutView()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAOfflineItemCommonCity) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAOfflineItemCommonCity()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAOfflineMap) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAOfflineMap()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MACircleRenderer) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MACircleRenderer()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleOverlayRenderer) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleOverlayRenderer()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MACoordinateBounds) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MACoordinateBounds()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MACoordinateSpan) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MACoordinateSpan()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MACoordinateRegion) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MACoordinateRegion()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAMapPoint) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAMapPoint()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAMapSize) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAMapSize()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAMapRect) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAMapRect()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleVelocityGenerate) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleVelocityGenerate.subInstance()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleRandomVelocityGenerate) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleRandomVelocityGenerate()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleColorGenerate) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleColorGenerate.subInstance()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleRandomColorGenerate) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleRandomColorGenerate()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleRotationGenerate) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleRotationGenerate.subInstance()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleConstantRotationGenerate) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleConstantRotationGenerate()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleSizeGenerate) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleSizeGenerate.subInstance()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleCurveSizeGenerate) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleCurveSizeGenerate()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleEmissionModule) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleEmissionModule()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleShapeModule) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleShapeModule.subInstance()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleSinglePointShapeModule) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleSinglePointShapeModule()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleRectShapeModule) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleRectShapeModule()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleOverLifeModule) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleOverLifeModule()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleOverlayOptions) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleOverlayOptions()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAParticleOverlayOptionsFactory) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAParticleOverlayOptionsFactory()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAOverlayRenderer) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAOverlayRenderer()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAUserLocation) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAUserLocation()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAMultiPointItem) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAMultiPointItem()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAMultiPointOverlay) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAMultiPointOverlay()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MACustomBuildingOverlayOption) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MACustomBuildingOverlayOption()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MACustomBuildingOverlay) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MACustomBuildingOverlay()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MATracePoint) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MATracePoint()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MATraceLocation) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MATraceLocation()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAArc) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAArc()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAUserLocationRepresentation) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAUserLocationRepresentation()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAMapView) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAMapView()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAOverlayPathRenderer) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAOverlayPathRenderer()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MAGroundOverlayRenderer) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MAGroundOverlayRenderer()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == MACustomBuildingOverlayRenderer) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (MACustomBuildingOverlayRenderer()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == CLLocation) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (CLLocation()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == CLHeading) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (CLHeading()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == CGRect) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (CGRect()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == CGPoint) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (CGPoint()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == CGSize) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (CGSize()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == UIEdgeInsets) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (UIEdgeInsets()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == CLLocationCoordinate2D) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (CLLocationCoordinate2D()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == CLLocationManager) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (CLLocationManager()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == NSError) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (NSError()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == NSCoding) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (NSCoding.subInstance()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == NSCopying) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (NSCopying.subInstance()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == UIView) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (UIView()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == UIViewController) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (UIViewController()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == UIControl) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (UIControl()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == UIImage) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (UIImage()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == UIColor) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (UIColor()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == NSData) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (NSData()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
    else if (T == NSOperation) {
      // 如果是Ref类的cast, 那么取其refId, 如果本身是refId, 那么直接使用(int)
      return (NSOperation()..refId = (this is Ref ? (this as Ref).refId : this as int)..tag__ = 'amap_map_fluttify') as T;
    }
  }
}