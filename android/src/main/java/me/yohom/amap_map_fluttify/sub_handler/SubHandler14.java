//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.amap_map_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.amap_map_fluttify.AmapMapFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler14 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // method
            put("com.autonavi.ae.gmap.GLMapState::nativeSetMapAngle_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var0 = (long) (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.ae.gmap.GLMapState.nativeSetMapAngle(var0, new Double(var2).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.GLMapState::nativeGetCameraDegree_batch", (argsBatch, methodResult) -> {
                List<Float> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var0 = (long) (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    float result;
                    try {
                        result = com.autonavi.ae.gmap.GLMapState.nativeGetCameraDegree(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.GLMapState::nativeGetMapAngle_batch", (argsBatch, methodResult) -> {
                List<Float> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var0 = (long) (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    float result;
                    try {
                        result = com.autonavi.ae.gmap.GLMapState.nativeGetMapAngle(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.GLMapState::nativeSetCameraDegree_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var0 = (long) (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.ae.gmap.GLMapState.nativeSetCameraDegree(var0, new Double(var2).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.GLMapState::nativeRecalculate_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var0 = (long) (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.ae.gmap.GLMapState.nativeRecalculate(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.GLMapState::nativeStateDestroy_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var0 = (long) (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.ae.gmap.GLMapState.nativeStateDestroy(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.GLMapState::nativeGetViewMatrix_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var0 = (long) (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    float[] var2 = (float[]) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.ae.gmap.GLMapState.nativeGetViewMatrix(var0, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.GLMapState::nativeGetProjectionMatrix_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var0 = (long) (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    float[] var2 = (float[]) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.ae.gmap.GLMapState.nativeGetProjectionMatrix(var0, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.GLMapState::nativeGetSkyHeight_batch", (argsBatch, methodResult) -> {
                List<Float> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var0 = (long) (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    float result;
                    try {
                        result = com.autonavi.ae.gmap.GLMapState.nativeGetSkyHeight(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.GLMapState::nativeGetGLUnitWithWin_batch", (argsBatch, methodResult) -> {
                List<Float> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var0 = (long) (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    float result;
                    try {
                        result = com.autonavi.ae.gmap.GLMapState.nativeGetGLUnitWithWin(var0, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.GLMapState::nativeCalMapZoomScalefactor_batch", (argsBatch, methodResult) -> {
                List<Float> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    float result;
                    try {
                        result = com.autonavi.ae.gmap.GLMapState.nativeCalMapZoomScalefactor(var0, var1, new Double(var2).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay::addItem_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    Object var1 = (Object) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay ref = (com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.addItem(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay::resumeMarker_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.graphics.Bitmap var1 = (android.graphics.Bitmap) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay ref = (com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.resumeMarker(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay::removeRouteName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay ref = (com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.removeRouteName();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay::remove_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay ref = (com.autonavi.ae.gmap.gloverlay.BaseRouteOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.remove();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector::addVectorItem_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr var1 = (com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLCrossVector ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.addVectorItem(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector::addVectorRemainDis_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLCrossVector ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.addVectorRemainDis(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector::addVectorCar_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLCrossVector ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.addVectorCar(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector::setRoadResId_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLCrossVector ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setRoadResId(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector::setArrowResId_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLCrossVector ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setArrowResId(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector::setCarResId_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLCrossVector ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setCarResId(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector::setBackgroundResId_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLCrossVector ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setBackgroundResId(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector::setSkyResId_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLCrossVector ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setSkyResId(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector::getFBOTextureId_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLCrossVector ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getFBOTextureId();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector::initFBOTexture_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLCrossVector ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.initFBOTexture(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::addItem_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    Object var1 = (Object) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay ref = (com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.addItem(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::resumeMarker_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.graphics.Bitmap var1 = (android.graphics.Bitmap) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay ref = (com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.resumeMarker(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::AddOverlayTexture_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.graphics.Bitmap var1 = (android.graphics.Bitmap) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay ref = (com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.AddOverlayTexture(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::dipToPixel_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay ref = (com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.dipToPixel(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::setAttribute_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr var1 = (com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay ref = (com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setAttribute(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::setData_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay ref = (com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.setData(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::remove_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay ref = (com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.remove();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::setImageMode_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay ref = (com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setImageMode(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay::getTextureID_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay ref = (com.autonavi.ae.gmap.gloverlay.CrossVectorOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getTextureID();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::getNativeInstatnce_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    long result;
                    try {
                        result = ref.getNativeInstatnce();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::getCode_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getCode();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::getType_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getType();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::getSubType_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getSubType();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::removeItem_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.removeItem(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::removeAll_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.removeAll();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::getSize_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getSize();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::setVisible_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setVisible(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::isVisible_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isVisible();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::setClickable_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setClickable(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::isClickable_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isClickable();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::clearFocus_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.clearFocus();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::getIsInBundle_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.getIsInBundle();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::setMaxCountShown_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMaxCountShown(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::setOverlayOnTop_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setOverlayOnTop(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::setMinDisplayLevel_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMinDisplayLevel(new Double(var1).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::setMaxDisplayLevel_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMaxDisplayLevel(new Double(var1).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::setOverlayPriority_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setOverlayPriority(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::getOverlayPriority_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getOverlayPriority();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::setOverlayItemPriority_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setOverlayItemPriority(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.ae.gmap.gloverlay.GLOverlay::useNightStyle_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.ae.gmap.gloverlay.GLOverlay ref = (com.autonavi.ae.gmap.gloverlay.GLOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.useNightStyle(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.maploader.NetworkState::setNetworkListener_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    com.autonavi.amap.mapcore.maploader.NetworkState.NetworkChangeListener var1 = (com.autonavi.amap.mapcore.maploader.NetworkState.NetworkChangeListener) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.maploader.NetworkState ref = (com.autonavi.amap.mapcore.maploader.NetworkState) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setNetworkListener(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.maploader.NetworkState::registerNetChangeReceiver_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // jsonable arg
                    boolean var2 = (boolean) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.maploader.NetworkState ref = (com.autonavi.amap.mapcore.maploader.NetworkState) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.registerNetChangeReceiver(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.maploader.NetworkState::isNetworkConnected_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    boolean result;
                    try {
                        result = com.autonavi.amap.mapcore.maploader.NetworkState.isNetworkConnected(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.maploader.NetworkState.NetworkChangeListener::networkStateChanged_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.maploader.NetworkState.NetworkChangeListener ref = (com.autonavi.amap.mapcore.maploader.NetworkState.NetworkChangeListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.networkStateChanged(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest::getRequestHead_batch", (argsBatch, methodResult) -> {
                List<Map<String,String>> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest) getHEAP().get(refId);
            
                    // invoke native method
                    Map<String,String> result;
                    try {
                        result = ref.getRequestHead();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Map<String,String> jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest::getParams_batch", (argsBatch, methodResult) -> {
                List<Map<String,String>> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest) getHEAP().get(refId);
            
                    // invoke native method
                    Map<String,String> result;
                    try {
                        result = ref.getParams();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Map<String,String> jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest::getURL_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getURL();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest::setPostEntityBytes_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setPostEntityBytes(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest::getEntityBytes_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest) getHEAP().get(refId);
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = ref.getEntityBytes();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.maploader.AMapLoader::onDownload_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    long var2 = (long) (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.maploader.AMapLoader ref = (com.autonavi.amap.mapcore.maploader.AMapLoader) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onDownload(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.maploader.AMapLoader::onStop_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.maploader.AMapLoader ref = (com.autonavi.amap.mapcore.maploader.AMapLoader) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onStop();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.maploader.AMapLoader::onFinish_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.maploader.AMapLoader ref = (com.autonavi.amap.mapcore.maploader.AMapLoader) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onFinish();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.maploader.AMapLoader::doRequest_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.maploader.AMapLoader ref = (com.autonavi.amap.mapcore.maploader.AMapLoader) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.doRequest();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.maploader.AMapLoader::doCancel_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.maploader.AMapLoader ref = (com.autonavi.amap.mapcore.maploader.AMapLoader) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.doCancel();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.maploader.AMapLoader::getDeviceId_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.maploader.AMapLoader ref = (com.autonavi.amap.mapcore.maploader.AMapLoader) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getDeviceId(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MapProjection::lonlat2Geo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    double var0 = (double) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    double var2 = (double) ((Map<String, Object>) args).get("var2");
                    // ref arg
                    com.autonavi.amap.mapcore.IPoint var4 = (com.autonavi.amap.mapcore.IPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var4"));
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.MapProjection.lonlat2Geo(var0, var2, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MapProjection::geo2LonLat_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    com.autonavi.amap.mapcore.DPoint var2 = (com.autonavi.amap.mapcore.DPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.MapProjection.geo2LonLat(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.Inner_3dMap_locationOption.Inner_3dMap_Enum_LocationProtocol::getValue_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.Inner_3dMap_locationOption.Inner_3dMap_Enum_LocationProtocol ref = (com.autonavi.amap.mapcore.Inner_3dMap_locationOption.Inner_3dMap_Enum_LocationProtocol) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getValue();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.TextTextureGenerator::getNearstSize2N_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.TextTextureGenerator.getNearstSize2N(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.TextTextureGenerator::getTextPixelBuffer_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.tools.TextTextureGenerator ref = (com.autonavi.amap.mapcore.tools.TextTextureGenerator) getHEAP().get(refId);
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = ref.getTextPixelBuffer(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.TextTextureGenerator::getCharsWidths_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int[] var1 = (int[]) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.tools.TextTextureGenerator ref = (com.autonavi.amap.mapcore.tools.TextTextureGenerator) getHEAP().get(refId);
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = ref.getCharsWidths(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GLFileUtil::writeDatasToFile_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.tools.GLFileUtil.writeDatasToFile(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GLFileUtil::readFileContents_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GLFileUtil.readFileContents(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GlMapUtil::decodeAssetResData_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GlMapUtil.decodeAssetResData(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GlMapUtil::dipToPixel_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GlMapUtil.dipToPixel(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GlMapUtil::spToPixel_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GlMapUtil.spToPixel(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GlMapUtil::getString_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GlMapUtil.getString(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GlMapUtil::isAssic_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    boolean result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GlMapUtil.isAssic(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GlMapUtil::getAppVersionName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GlMapUtil.getAppVersionName(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GLConvertUtil::getInt_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GLConvertUtil.getInt(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GLConvertUtil::getLong_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    long result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GLConvertUtil.getLong(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GLConvertUtil::getInt2_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GLConvertUtil.getInt2(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GLConvertUtil::getUShort_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GLConvertUtil.getUShort(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GLConvertUtil::convertInt_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GLConvertUtil.convertInt(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GLConvertUtil::convertShort_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GLConvertUtil.convertShort(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GLConvertUtil::convertDouble_batch", (argsBatch, methodResult) -> {
                List<Double> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    double result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GLConvertUtil.convertDouble(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    double jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GLConvertUtil::writeInt_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.tools.GLConvertUtil.writeInt(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GLConvertUtil::moveArray_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.tools.GLConvertUtil.moveArray(var0, var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GLConvertUtil::get1BString_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GLConvertUtil.get1BString(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GLConvertUtil::getString_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GLConvertUtil.getString(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.tools.GLConvertUtil::getSubBytes_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = com.autonavi.amap.mapcore.tools.GLConvertUtil.getSubBytes(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MsgProcessor::nativeInitMsg_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.MsgProcessor ref = (com.autonavi.amap.mapcore.MsgProcessor) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.nativeInitMsg();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MsgProcessor::nativeInit_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.MsgProcessor ref = (com.autonavi.amap.mapcore.MsgProcessor) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.nativeInit(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MsgProcessor::nativeMsgProcessor_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.MsgProcessor ref = (com.autonavi.amap.mapcore.MsgProcessor) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.nativeMsgProcessor(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MsgProcessor::nativeCall_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.MsgProcessor ref = (com.autonavi.amap.mapcore.MsgProcessor) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.nativeCall();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.AbstractNativeInstance::getNativeInstance_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.AbstractNativeInstance ref = (com.autonavi.amap.mapcore.AbstractNativeInstance) getHEAP().get(refId);
            
                    // invoke native method
                    long result;
                    try {
                        result = ref.getNativeInstance();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.AbstractNativeInstance::createNativeInstace_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.AbstractNativeInstance ref = (com.autonavi.amap.mapcore.AbstractNativeInstance) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.createNativeInstace();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.LinkInfo::getState_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.LinkInfo ref = (com.autonavi.amap.mapcore.LinkInfo) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getState();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.LinkInfo::setState_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.LinkInfo ref = (com.autonavi.amap.mapcore.LinkInfo) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setState(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.LinkInfo::getTime_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.LinkInfo ref = (com.autonavi.amap.mapcore.LinkInfo) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getTime();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.LinkInfo::setTime_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.LinkInfo ref = (com.autonavi.amap.mapcore.LinkInfo) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setTime(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.LinkInfo::getLength_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.LinkInfo ref = (com.autonavi.amap.mapcore.LinkInfo) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getLength();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.LinkInfo::setLength_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.LinkInfo ref = (com.autonavi.amap.mapcore.LinkInfo) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setLength(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.AMapNativePolyline::nativeCreate_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    long result;
                    try {
                        result = com.autonavi.amap.mapcore.AMapNativePolyline.nativeCreate();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.AMapNativePolyline::nativeSetGLShaderManager_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var0 = (long) (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    long var2 = (long) (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.AMapNativePolyline.nativeSetGLShaderManager(var0, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.AMapNativePolyline::nativeDrawLineByTextureID_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var0 = (long) (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    float[] var2 = (float[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    Double var4 = (Double) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    Double var6 = (Double) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    Double var7 = (Double) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    Double var8 = (Double) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    Double var9 = (Double) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    Double var10 = (Double) ((Map<String, Object>) args).get("var10");
                    // jsonable arg
                    boolean var11 = (boolean) ((Map<String, Object>) args).get("var11");
                    // jsonable arg
                    boolean var12 = (boolean) ((Map<String, Object>) args).get("var12");
                    // jsonable arg
                    boolean var13 = (boolean) ((Map<String, Object>) args).get("var13");
                    // jsonable arg
                    float[] var14 = (float[]) ((Map<String, Object>) args).get("var14");
                    // jsonable arg
                    int var15 = (int) ((Map<String, Object>) args).get("var15");
                    // jsonable arg
                    int var16 = (int) ((Map<String, Object>) args).get("var16");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.AMapNativePolyline.nativeDrawLineByTextureID(var0, var2, var3, new Double(var4).floatValue(), var5, new Double(var6).floatValue(), new Double(var7).floatValue(), new Double(var8).floatValue(), new Double(var9).floatValue(), new Double(var10).floatValue(), var11, var12, var13, var14, var15, var16);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.AMapNativePolyline::nativeDestroy_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var0 = (long) (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    long result;
                    try {
                        result = com.autonavi.amap.mapcore.AMapNativePolyline.nativeDestroy(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.IPoint::obtain_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    com.autonavi.amap.mapcore.IPoint result;
                    try {
                        result = com.autonavi.amap.mapcore.IPoint.obtain();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = System.identityHashCode(result);
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.IPoint::obtain__int__int_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    com.autonavi.amap.mapcore.IPoint result;
                    try {
                        result = com.autonavi.amap.mapcore.IPoint.obtain(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = System.identityHashCode(result);
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.IPoint::clone_batch", (argsBatch, methodResult) -> {
                List<Object> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.IPoint ref = (com.autonavi.amap.mapcore.IPoint) getHEAP().get(refId);
            
                    // invoke native method
                    Object result;
                    try {
                        result = ref.clone();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Object jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.gles.AMapNativeGLShaderManager::nativeCreateGLShaderManager_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    long result;
                    try {
                        result = com.autonavi.amap.mapcore.gles.AMapNativeGLShaderManager.nativeCreateGLShaderManager();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.gles.AMapNativeGLShaderManager::nativeDestroyGLShaderManager_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var0 = (long) (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.gles.AMapNativeGLShaderManager.nativeDestroyGLShaderManager(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.DPoint::obtain_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    com.autonavi.amap.mapcore.DPoint result;
                    try {
                        result = com.autonavi.amap.mapcore.DPoint.obtain();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = System.identityHashCode(result);
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.DPoint::obtain__double__double_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    double var0 = (double) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    double var2 = (double) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    com.autonavi.amap.mapcore.DPoint result;
                    try {
                        result = com.autonavi.amap.mapcore.DPoint.obtain(var0, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = System.identityHashCode(result);
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.AMapNativeRenderer::nativeDrawLineByMultiTextureID_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    float[] var0 = (float[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int[] var3 = (int[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    Double var7 = (Double) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    float[] var8 = (float[]) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    int var9 = (int) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    int var10 = (int) ((Map<String, Object>) args).get("var10");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.AMapNativeRenderer.nativeDrawLineByMultiTextureID(var0, var1, new Double(var2).floatValue(), var3, var4, var5, var6, new Double(var7).floatValue(), var8, var9, var10);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.AMapNativeRenderer::nativeDrawLineByMultiColor_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    float[] var0 = (float[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    float[] var8 = (float[]) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    int var9 = (int) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    int var10 = (int) ((Map<String, Object>) args).get("var10");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.AMapNativeRenderer.nativeDrawLineByMultiColor(var0, var1, new Double(var2).floatValue(), var3, var4, var5, var6, var7, var8, var9, var10);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.AMapNativeRenderer::nativeDrawGradientColorLine_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    float[] var0 = (float[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int[] var3 = (int[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    float[] var8 = (float[]) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    int var9 = (int) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    int var10 = (int) ((Map<String, Object>) args).get("var10");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.AMapNativeRenderer.nativeDrawGradientColorLine(var0, var1, new Double(var2).floatValue(), var3, var4, var5, var6, var7, var8, var9, var10);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.AMapNativeRenderer::nativeDrawLineInit_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.AMapNativeRenderer.nativeDrawLineInit();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.AMapNativeRenderer::nativeDrawLineByTextureID_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    float[] var0 = (float[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    Double var4 = (Double) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    Double var5 = (Double) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    Double var6 = (Double) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    Double var7 = (Double) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    Double var8 = (Double) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    boolean var9 = (boolean) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    boolean var10 = (boolean) ((Map<String, Object>) args).get("var10");
                    // jsonable arg
                    boolean var11 = (boolean) ((Map<String, Object>) args).get("var11");
                    // jsonable arg
                    float[] var12 = (float[]) ((Map<String, Object>) args).get("var12");
                    // jsonable arg
                    int var13 = (int) ((Map<String, Object>) args).get("var13");
                    // jsonable arg
                    int var14 = (int) ((Map<String, Object>) args).get("var14");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.AMapNativeRenderer.nativeDrawLineByTextureID(var0, var1, new Double(var2).floatValue(), var3, new Double(var4).floatValue(), new Double(var5).floatValue(), new Double(var6).floatValue(), new Double(var7).floatValue(), new Double(var8).floatValue(), var9, var10, var11, var12, var13, var14);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.FileUtil::getMapBaseStorage_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.autonavi.amap.mapcore.FileUtil.getMapBaseStorage(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.FileUtil::getExternalStroragePath_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.autonavi.amap.mapcore.FileUtil.getExternalStroragePath(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.FileUtil::writeDatasToFile_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.FileUtil.writeDatasToFile(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.FileUtil::readFileContents_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = com.autonavi.amap.mapcore.FileUtil.readFileContents(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.FileUtil::createNoMediaFileIfNotExist_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.FileUtil.createNoMediaFileIfNotExist(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.FileUtil::saveFile_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    boolean var2 = (boolean) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.autonavi.amap.mapcore.FileUtil.saveFile(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.FileUtil::readFileContentsFromAssets_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = com.autonavi.amap.mapcore.FileUtil.readFileContentsFromAssets(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.FileUtil::getName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.autonavi.amap.mapcore.FileUtil.getName(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.FileUtil::indexOfLastSeparator_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.autonavi.amap.mapcore.FileUtil.indexOfLastSeparator(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.IAMapEngineCallback::requireMapResource_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.IAMapEngineCallback ref = (com.autonavi.amap.mapcore.IAMapEngineCallback) getHEAP().get(refId);
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = ref.requireMapResource(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.IAMapEngineCallback::reloadMapResource_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.IAMapEngineCallback ref = (com.autonavi.amap.mapcore.IAMapEngineCallback) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.reloadMapResource(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.IAMapEngineCallback::requireMapData_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.IAMapEngineCallback ref = (com.autonavi.amap.mapcore.IAMapEngineCallback) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.requireMapData(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.IAMapEngineCallback::requireCharBitmap_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.IAMapEngineCallback ref = (com.autonavi.amap.mapcore.IAMapEngineCallback) getHEAP().get(refId);
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = ref.requireCharBitmap(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.IAMapEngineCallback::requireCharsWidths_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int[] var2 = (int[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.IAMapEngineCallback ref = (com.autonavi.amap.mapcore.IAMapEngineCallback) getHEAP().get(refId);
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = ref.requireCharsWidths(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.IAMapEngineCallback::requireMapRender_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.IAMapEngineCallback ref = (com.autonavi.amap.mapcore.IAMapEngineCallback) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.requireMapRender(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.IAMapEngineCallback::onMapRender_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.IAMapEngineCallback ref = (com.autonavi.amap.mapcore.IAMapEngineCallback) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onMapRender(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.IAMapEngineCallback::cancelRequireMapData_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    Object var1 = (Object) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.IAMapEngineCallback ref = (com.autonavi.amap.mapcore.IAMapEngineCallback) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.cancelRequireMapData(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.IAMapEngineCallback::OnIndoorBuildingActivity_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.IAMapEngineCallback ref = (com.autonavi.amap.mapcore.IAMapEngineCallback) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.OnIndoorBuildingActivity(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.IAMapEngineCallback::generateRequestId_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.IAMapEngineCallback ref = (com.autonavi.amap.mapcore.IAMapEngineCallback) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.generateRequestId();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.IAMapEngineCallback::requireMapDataAsyn_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.IAMapEngineCallback ref = (com.autonavi.amap.mapcore.IAMapEngineCallback) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.requireMapDataAsyn(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLTranslateAnimation::setFromPoint_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLTranslateAnimation ref = (com.autonavi.amap.mapcore.animation.GLTranslateAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setFromPoint(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLTransformation::clear_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLTransformation ref = (com.autonavi.amap.mapcore.animation.GLTransformation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.clear();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimationSet::addAnimation_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    com.amap.api.maps.model.animation.Animation var1 = (com.amap.api.maps.model.animation.Animation) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimationSet ref = (com.autonavi.amap.mapcore.animation.GLAnimationSet) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.addAnimation(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimationSet::getAnimations_batch", (argsBatch, methodResult) -> {
                List<List<Integer>> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimationSet ref = (com.autonavi.amap.mapcore.animation.GLAnimationSet) getHEAP().get(refId);
            
                    // invoke native method
                    List<com.autonavi.amap.mapcore.animation.GLAnimation> result;
                    try {
                        result = ref.getAnimations();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    List<Integer> jsonableResult = null;
                    if (result != null) {
                        jsonableResult = new ArrayList<>();
                        for (com.autonavi.amap.mapcore.animation.GLAnimation item : result) {
                            getHEAP().put(System.identityHashCode(item), item);
                            jsonableResult.add(System.identityHashCode(item));
                        }
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimationSet::cleanAnimation_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimationSet ref = (com.autonavi.amap.mapcore.animation.GLAnimationSet) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.cleanAnimation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::clone_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    com.autonavi.amap.mapcore.animation.GLAnimation result;
                    try {
                        result = ref.clone();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = System.identityHashCode(result);
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::reset_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.reset();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::cancel_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.cancel();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::detach_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.detach();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::isInitialized_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isInitialized();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::initialize_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.initialize();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::setInterpolator__android_content_Context__int_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setInterpolator(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::setStartOffset_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var1 = (long) (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setStartOffset(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::setDuration_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var1 = (long) (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setDuration(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::restrictDuration_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var1 = (long) (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.restrictDuration(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::scaleCurrentDuration_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.scaleCurrentDuration(new Double(var1).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::setStartTime_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var1 = (long) (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setStartTime(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::start_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.start();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::startNow_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.startNow();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::setRepeatMode_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setRepeatMode(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::setRepeatCount_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setRepeatCount(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::isFillEnabled_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isFillEnabled();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::setFillEnabled_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setFillEnabled(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::setFillBefore_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setFillBefore(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::setFillAfter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setFillAfter(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::setZAdjustment_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setZAdjustment(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::setBackgroundColor_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setBackgroundColor(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::setDetachWallpaper_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setDetachWallpaper(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::getStartTime_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    long result;
                    try {
                        result = ref.getStartTime();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::getDuration_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    long result;
                    try {
                        result = ref.getDuration();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::getStartOffset_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    long result;
                    try {
                        result = ref.getStartOffset();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::getRepeatMode_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getRepeatMode();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::getRepeatCount_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getRepeatCount();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::getFillBefore_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.getFillBefore();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::getFillAfter_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.getFillAfter();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::getZAdjustment_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getZAdjustment();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::getBackgroundColor_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getBackgroundColor();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::getDetachWallpaper_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.getDetachWallpaper();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::willChangeTransformationMatrix_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.willChangeTransformationMatrix();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::willChangeBounds_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.willChangeBounds();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::computeDurationHint_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    long result;
                    try {
                        result = ref.computeDurationHint();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::getTransformation__int__com_autonavi_amap_mapcore_animation_GLTransformation_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var1 = (long) (int) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    com.autonavi.amap.mapcore.animation.GLTransformation var3 = (com.autonavi.amap.mapcore.animation.GLTransformation) getHEAP().get((int) ((Map<String, Object>) args).get("var3"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.getTransformation(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::getTransformation__int__com_autonavi_amap_mapcore_animation_GLTransformation__double_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    long var1 = (long) (int) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    com.autonavi.amap.mapcore.animation.GLTransformation var3 = (com.autonavi.amap.mapcore.animation.GLTransformation) getHEAP().get((int) ((Map<String, Object>) args).get("var3"));
                    // jsonable arg
                    Double var4 = (Double) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.getTransformation(var1, var3, new Double(var4).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::hasEnded_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.hasEnded();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::initializeInvalidateRegion_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.initializeInvalidateRegion(var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.animation.GLAnimation::hasAlpha_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.animation.GLAnimation ref = (com.autonavi.amap.mapcore.animation.GLAnimation) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.hasAlpha();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MapConfig::getAnchorY_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.MapConfig ref = (com.autonavi.amap.mapcore.MapConfig) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getAnchorY();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MapConfig::setAnchorY_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.MapConfig ref = (com.autonavi.amap.mapcore.MapConfig) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setAnchorY(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MapConfig::getAnchorX_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.MapConfig ref = (com.autonavi.amap.mapcore.MapConfig) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getAnchorX();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MapConfig::setAnchorX_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.MapConfig ref = (com.autonavi.amap.mapcore.MapConfig) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setAnchorX(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MapConfig::getChangedCounter_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.MapConfig ref = (com.autonavi.amap.mapcore.MapConfig) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getChangedCounter();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MapConfig::resetChangedCounter_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.MapConfig ref = (com.autonavi.amap.mapcore.MapConfig) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.resetChangedCounter();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MapConfig::isMapStateChange_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.MapConfig ref = (com.autonavi.amap.mapcore.MapConfig) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isMapStateChange();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MapConfig::getChangeRatio_batch", (argsBatch, methodResult) -> {
                List<Double> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.MapConfig ref = (com.autonavi.amap.mapcore.MapConfig) getHEAP().get(refId);
            
                    // invoke native method
                    double result;
                    try {
                        result = ref.getChangeRatio();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    double jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MapConfig::getChangeGridRatio_batch", (argsBatch, methodResult) -> {
                List<Double> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.MapConfig ref = (com.autonavi.amap.mapcore.MapConfig) getHEAP().get(refId);
            
                    // invoke native method
                    double result;
                    try {
                        result = ref.getChangeGridRatio();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    double jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.autonavi.amap.mapcore.MapConfig::isZoomChanged_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) argsBatch).size(); __i__++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.autonavi.amap.mapcore.MapConfig ref = (com.autonavi.amap.mapcore.MapConfig) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isZoomChanged();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
        }};
    }
}
