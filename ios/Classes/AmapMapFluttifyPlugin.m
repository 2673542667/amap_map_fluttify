//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "AmapMapFluttifyPlugin.h"
#import <objc/runtime.h>

typedef void (^Handler)(NSObject <FlutterPluginRegistrar> *, id, FlutterResult);

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapMapFluttifyPlugin {
  NSObject <FlutterPluginRegistrar> * _registrar;
  NSDictionary<NSString *, Handler> *_handlerMap;
}

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
    // 处理方法们
    _handlerMap = @{
      @"MAGroundOverlay::groundOverlayWithBoundsIcon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* boundsValue = (NSValue*) HEAP[@([args[@"bounds"] integerValue])];
          MACoordinateBounds bounds;
          [boundsValue getValue:&bounds];
          // ref arg
          UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAGroundOverlay::groundOverlayWithBounds(暂未实现参数打印)");
          }
      
          // invoke native method
          MAGroundOverlay* result = [MAGroundOverlay groundOverlayWithBounds: bounds icon: icon];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAGroundOverlay::groundOverlayWithCoordinateZoomLevelicon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
          // jsonable arg
          CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
          // ref arg
          UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAGroundOverlay::groundOverlayWithCoordinate(暂未实现参数打印)");
          }
      
          // invoke native method
          MAGroundOverlay* result = [MAGroundOverlay groundOverlayWithCoordinate: coordinate zoomLevel: zoomLevel icon: icon];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAGroundOverlay::setGroundOverlayWithBoundsIcon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* boundsValue = (NSValue*) HEAP[@([args[@"bounds"] integerValue])];
          MACoordinateBounds bounds;
          [boundsValue getValue:&bounds];
          // ref arg
          UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
      
          // ref
          MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAGroundOverlay@%@::setGroundOverlayWithBounds(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setGroundOverlayWithBounds: bounds icon: icon];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAGroundOverlay::setGroundOverlayWithCoordinateZoomLevelicon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
          // jsonable arg
          CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
          // ref arg
          UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
      
          // ref
          MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAGroundOverlay@%@::setGroundOverlayWithCoordinate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setGroundOverlayWithCoordinate: coordinate zoomLevel: zoomLevel icon: icon];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAPolygonRenderer::initWithPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAPolygon* polygon = (MAPolygon*) HEAP[@([args[@"polygon"] integerValue])];
      
          // ref
          MAPolygonRenderer* ref = (MAPolygonRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAPolygonRenderer@%@::initWithPolygon(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAPolygonRenderer* result = [ref initWithPolygon: polygon];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapStatus::statusWithCenterCoordinateZoomLevelrotationDegreecameraDegreescreenAnchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
          // jsonable arg
          CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
          // jsonable arg
          CGFloat rotationDegree = [args[@"rotationDegree"] floatValue];
          // jsonable arg
          CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
          // struct arg
          NSValue* screenAnchorValue = (NSValue*) HEAP[@([args[@"screenAnchor"] integerValue])];
          CGPoint screenAnchor;
          [screenAnchorValue getValue:&screenAnchor];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapStatus::statusWithCenterCoordinate(暂未实现参数打印)");
          }
      
          // invoke native method
          MAMapStatus* result = [MAMapStatus statusWithCenterCoordinate: coordinate zoomLevel: zoomLevel rotationDegree: rotationDegree cameraDegree: cameraDegree screenAnchor: screenAnchor];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapStatus::initWithCenterCoordinateZoomLevelrotationDegreecameraDegreescreenAnchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
          // jsonable arg
          CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
          // jsonable arg
          CGFloat rotationDegree = [args[@"rotationDegree"] floatValue];
          // jsonable arg
          CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
          // struct arg
          NSValue* screenAnchorValue = (NSValue*) HEAP[@([args[@"screenAnchor"] integerValue])];
          CGPoint screenAnchor;
          [screenAnchorValue getValue:&screenAnchor];
      
          // ref
          MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapStatus@%@::initWithCenterCoordinate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          id result = [ref initWithCenterCoordinate: coordinate zoomLevel: zoomLevel rotationDegree: rotationDegree cameraDegree: cameraDegree screenAnchor: screenAnchor];
      
          // result
          // return a ref
          HEAP[@(((NSObject*) result).hash)] = result;
          NSNumber* jsonableResult = @(((NSObject*) result).hash);
      
          methodResult(jsonableResult);
      },
      @"MACircle::circleWithCenterCoordinateRadius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordValue = (NSValue*) HEAP[@([args[@"coord"] integerValue])];
          CLLocationCoordinate2D coord;
          [coordValue getValue:&coord];
          // jsonable arg
          CLLocationDistance radius = [args[@"radius"] doubleValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACircle::circleWithCenterCoordinate(暂未实现参数打印)");
          }
      
          // invoke native method
          MACircle* result = [MACircle circleWithCenterCoordinate: coord radius: radius];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MACircle::circleWithMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
          MAMapRect mapRect;
          [mapRectValue getValue:&mapRect];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACircle::circleWithMapRect(暂未实现参数打印)");
          }
      
          // invoke native method
          MACircle* result = [MACircle circleWithMapRect: mapRect];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MACircle::setCircleWithCenterCoordinateRadius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordValue = (NSValue*) HEAP[@([args[@"coord"] integerValue])];
          CLLocationCoordinate2D coord;
          [coordValue getValue:&coord];
          // jsonable arg
          CLLocationDistance radius = [args[@"radius"] doubleValue];
      
          // ref
          MACircle* ref = (MACircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACircle@%@::setCircleWithCenterCoordinate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setCircleWithCenterCoordinate: coord radius: radius];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAArcRenderer::initWithArc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAArc* arc = (MAArc*) HEAP[@([args[@"arc"] integerValue])];
      
          // ref
          MAArcRenderer* ref = (MAArcRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAArcRenderer@%@::initWithArc(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAArcRenderer* result = [ref initWithArc: arc];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAAnnotation::setCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* newCoordinateValue = (NSValue*) HEAP[@([args[@"newCoordinate"] integerValue])];
          CLLocationCoordinate2D newCoordinate;
          [newCoordinateValue getValue:&newCoordinate];
      
          // ref
          id<MAAnnotation> ref = (id<MAAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotation@%@::setCoordinate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCoordinate : newCoordinate];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAAnimatableAnnotation::step": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CGFloat timeDelta = [args[@"timeDelta"] floatValue];
      
          // ref
          id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnimatableAnnotation@%@::step(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref step : timeDelta];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAAnimatableAnnotation::isAnimationFinished": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnimatableAnnotation@%@::isAnimationFinished(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref isAnimationFinished];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAAnimatableAnnotation::shouldAnimationStart": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnimatableAnnotation@%@::shouldAnimationStart(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref shouldAnimationStart];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAAnimatableAnnotation::rotateDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnimatableAnnotation@%@::rotateDegree(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CLLocationDirection result = [ref rotateDegree];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAPolygon::polygonWithCoordinatesCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
          CLLocationCoordinate2D coords[coordsRefIdArray.count];
      
          for (int i = 0; i < coordsRefIdArray.count; i++) {
              NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
              CLLocationCoordinate2D coordsItem;
              [coordsValue getValue:&coordsItem];
              coords[i] = coordsItem;
          }
          // jsonable arg
          NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAPolygon::polygonWithCoordinates(暂未实现参数打印)");
          }
      
          // invoke native method
          MAPolygon* result = [MAPolygon polygonWithCoordinates: coords count: count];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAPolygon::polygonWithPointsCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          MAMapPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              MAMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAPolygon::polygonWithPoints(暂未实现参数打印)");
          }
      
          // invoke native method
          MAPolygon* result = [MAPolygon polygonWithPoints: points count: count];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAPolygon::setPolygonWithPointsCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          MAMapPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              MAMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
      
          // ref
          MAPolygon* ref = (MAPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAPolygon@%@::setPolygonWithPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setPolygonWithPoints: points count: count];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAPolygon::setPolygonWithCoordinatesCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
          CLLocationCoordinate2D coords[coordsRefIdArray.count];
      
          for (int i = 0; i < coordsRefIdArray.count; i++) {
              NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
              CLLocationCoordinate2D coordsItem;
              [coordsValue getValue:&coordsItem];
              coords[i] = coordsItem;
          }
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
      
          // ref
          MAPolygon* ref = (MAPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAPolygon@%@::setPolygonWithCoordinates(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setPolygonWithCoordinates: coords count: count];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAParticleOverlay::particleOverlayWithOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAParticleOverlayOptions* option = (MAParticleOverlayOptions*) HEAP[@([args[@"option"] integerValue])];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleOverlay::particleOverlayWithOption(暂未实现参数打印)");
          }
      
          // invoke native method
          MAParticleOverlay* result = [MAParticleOverlay particleOverlayWithOption: option];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAParticleOverlay::updateOverlayOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAParticleOverlayOptions* overlayOption = (MAParticleOverlayOptions*) HEAP[@([args[@"overlayOption"] integerValue])];
      
          // ref
          MAParticleOverlay* ref = (MAParticleOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleOverlay@%@::updateOverlayOption(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref updateOverlayOption : overlayOption];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAPolyline::polylineWithPointsCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          MAMapPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              MAMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAPolyline::polylineWithPoints(暂未实现参数打印)");
          }
      
          // invoke native method
          MAPolyline* result = [MAPolyline polylineWithPoints: points count: count];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAPolyline::polylineWithCoordinatesCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
          CLLocationCoordinate2D coords[coordsRefIdArray.count];
      
          for (int i = 0; i < coordsRefIdArray.count; i++) {
              NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
              CLLocationCoordinate2D coordsItem;
              [coordsValue getValue:&coordsItem];
              coords[i] = coordsItem;
          }
          // jsonable arg
          NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAPolyline::polylineWithCoordinates(暂未实现参数打印)");
          }
      
          // invoke native method
          MAPolyline* result = [MAPolyline polylineWithCoordinates: coords count: count];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAPolyline::setPolylineWithPointsCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          MAMapPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              MAMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
      
          // ref
          MAPolyline* ref = (MAPolyline*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAPolyline@%@::setPolylineWithPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setPolylineWithPoints: points count: count];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAPolyline::setPolylineWithCoordinatesCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
          CLLocationCoordinate2D coords[coordsRefIdArray.count];
      
          for (int i = 0; i < coordsRefIdArray.count; i++) {
              NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
              CLLocationCoordinate2D coordsItem;
              [coordsValue getValue:&coordsItem];
              coords[i] = coordsItem;
          }
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
      
          // ref
          MAPolyline* ref = (MAPolyline*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAPolyline@%@::setPolylineWithCoordinates(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setPolylineWithCoordinates: coords count: count];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMultiColoredPolylineRenderer::initWithMultiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMultiPolyline* multiPolyline = (MAMultiPolyline*) HEAP[@([args[@"multiPolyline"] integerValue])];
      
          // ref
          MAMultiColoredPolylineRenderer* ref = (MAMultiColoredPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMultiColoredPolylineRenderer@%@::initWithMultiPolyline(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAMultiColoredPolylineRenderer* result = [ref initWithMultiPolyline: multiPolyline];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAAnimatedAnnotation::addMoveAnimationWithKeyCoordinatesCountwithDurationwithNamecompleteCallback": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* coordinatesRefIdArray = (NSArray*) args[@"coordinates"];
          CLLocationCoordinate2D coordinates[coordinatesRefIdArray.count];
      
          for (int i = 0; i < coordinatesRefIdArray.count; i++) {
              NSValue* coordinatesValue = (NSValue*) HEAP[[coordinatesRefIdArray objectAtIndex:i]];
              CLLocationCoordinate2D coordinatesItem;
              [coordinatesValue getValue:&coordinatesItem];
              coordinates[i] = coordinatesItem;
          }
          // jsonable arg
          NSUInteger count = [args[@"count"] unsignedIntegerValue];
          // jsonable arg
          CGFloat duration = [args[@"duration"] floatValue];
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
      
          // ref
          MAAnimatedAnnotation* ref = (MAAnimatedAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnimatedAnnotation@%@::addMoveAnimationWithKeyCoordinates(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAAnnotationMoveAnimation* result = [ref addMoveAnimationWithKeyCoordinates: coordinates count: count withDuration: duration withName: name completeCallback: ^(BOOL isFinished) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"MAAnimatedAnnotation::addMoveAnimationWithKeyCoordinatesCountwithDurationwithNamecompleteCallback::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // primitive callback arg
              NSNumber* argisFinished = @(isFinished);
      
              [channel invokeMethod:@"Callback::void|BOOL isFinished::void|BOOL isFinished" arguments:@{@"isFinished": argisFinished}];
      
          }];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAAnimatedAnnotation::addMoveAnimationWithKeyCoordinatesCountwithDurationwithNamecompleteCallbackstepCallback": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* coordinatesRefIdArray = (NSArray*) args[@"coordinates"];
          CLLocationCoordinate2D coordinates[coordinatesRefIdArray.count];
      
          for (int i = 0; i < coordinatesRefIdArray.count; i++) {
              NSValue* coordinatesValue = (NSValue*) HEAP[[coordinatesRefIdArray objectAtIndex:i]];
              CLLocationCoordinate2D coordinatesItem;
              [coordinatesValue getValue:&coordinatesItem];
              coordinates[i] = coordinatesItem;
          }
          // jsonable arg
          NSUInteger count = [args[@"count"] unsignedIntegerValue];
          // jsonable arg
          CGFloat duration = [args[@"duration"] floatValue];
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
      
      
          // ref
          MAAnimatedAnnotation* ref = (MAAnimatedAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnimatedAnnotation@%@::addMoveAnimationWithKeyCoordinates(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAAnnotationMoveAnimation* result = [ref addMoveAnimationWithKeyCoordinates: coordinates count: count withDuration: duration withName: name completeCallback: ^(BOOL isFinished) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"MAAnimatedAnnotation::addMoveAnimationWithKeyCoordinatesCountwithDurationwithNamecompleteCallbackstepCallback::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // primitive callback arg
              NSNumber* argisFinished = @(isFinished);
      
              [channel invokeMethod:@"Callback::void|BOOL isFinished::void|BOOL isFinished" arguments:@{@"isFinished": argisFinished}];
      
          } stepCallback: ^(MAAnnotationMoveAnimation* currentAni) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"MAAnimatedAnnotation::addMoveAnimationWithKeyCoordinatesCountwithDurationwithNamecompleteCallbackstepCallback::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // ref callback arg
              NSNumber* argcurrentAni = @(currentAni.hash);
              HEAP[argcurrentAni] = currentAni;
      
              [channel invokeMethod:@"Callback::void|MAAnnotationMoveAnimation currentAni::void|MAAnnotationMoveAnimation currentAni" arguments:@{@"currentAni": argcurrentAni}];
      
          }];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAAnimatedAnnotation::setNeedsStart": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAAnimatedAnnotation* ref = (MAAnimatedAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnimatedAnnotation@%@::setNeedsStart(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setNeedsStart ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMultiTexturePolylineRenderer::initWithMultiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMultiPolyline* multiPolyline = (MAMultiPolyline*) HEAP[@([args[@"multiPolyline"] integerValue])];
      
          // ref
          MAMultiTexturePolylineRenderer* ref = (MAMultiTexturePolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMultiTexturePolylineRenderer@%@::initWithMultiPolyline(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAMultiTexturePolylineRenderer* result = [ref initWithMultiPolyline: multiPolyline];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MATileOverlayRenderer::initWithTileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MATileOverlay* tileOverlay = (MATileOverlay*) HEAP[@([args[@"tileOverlay"] integerValue])];
      
          // ref
          MATileOverlayRenderer* ref = (MATileOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MATileOverlayRenderer@%@::initWithTileOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MATileOverlayRenderer* result = [ref initWithTileOverlay: tileOverlay];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MATileOverlayRenderer::reloadData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MATileOverlayRenderer* ref = (MATileOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MATileOverlayRenderer@%@::reloadData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref reloadData ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MATraceDelegate::traceManagerDidTracecorrectdistancewithError": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MATraceManager* manager = (MATraceManager*) HEAP[@([args[@"manager"] integerValue])];
          // list arg
          NSArray<NSNumber*>* locationsRefArray = (NSArray<NSNumber*> *) args[@"locations"];
          NSMutableArray<CLLocation*>* locations = [NSMutableArray arrayWithCapacity:locationsRefArray.count];
          for (int i = 0; i < locationsRefArray.count; i++) {
              CLLocation* item = (CLLocation*) HEAP[[locationsRefArray objectAtIndex:i]];
              [locations addObject:item];
          }
          // list arg
          NSArray<NSNumber*>* tracePointsRefArray = (NSArray<NSNumber*> *) args[@"tracePoints"];
          NSMutableArray<MATracePoint*>* tracePoints = [NSMutableArray arrayWithCapacity:tracePointsRefArray.count];
          for (int i = 0; i < tracePointsRefArray.count; i++) {
              MATracePoint* item = (MATracePoint*) HEAP[[tracePointsRefArray objectAtIndex:i]];
              [tracePoints addObject:item];
          }
          // jsonable arg
          double distance = [args[@"distance"] doubleValue];
          // ref arg
          NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
          // ref
          id<MATraceDelegate> ref = (id<MATraceDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MATraceDelegate@%@::traceManager(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref traceManager : manager didTrace: locations correct: tracePoints distance: distance withError: error];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MATraceDelegate::mapViewRequireLocationAuth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          CLLocationManager* locationManager = (CLLocationManager*) HEAP[@([args[@"locationManager"] integerValue])];
      
          // ref
          id<MATraceDelegate> ref = (id<MATraceDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MATraceDelegate@%@::mapViewRequireLocationAuth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapViewRequireLocationAuth : locationManager];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MATraceManager::sharedInstance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MATraceManager::sharedInstance(暂未实现参数打印)");
          }
      
          // invoke native method
          MATraceManager* result = [MATraceManager sharedInstance];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MATraceManager::start": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MATraceManager* ref = (MATraceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MATraceManager@%@::start(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref start ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MATraceManager::stop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MATraceManager* ref = (MATraceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MATraceManager@%@::stop(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref stop ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMultiPointOverlayRendererDelegate::multiPointOverlayRendererDidItemTapped": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMultiPointOverlayRenderer* renderer = (MAMultiPointOverlayRenderer*) HEAP[@([args[@"renderer"] integerValue])];
          // ref arg
          MAMultiPointItem* item = (MAMultiPointItem*) HEAP[@([args[@"item"] integerValue])];
      
          // ref
          id<MAMultiPointOverlayRendererDelegate> ref = (id<MAMultiPointOverlayRendererDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMultiPointOverlayRendererDelegate@%@::multiPointOverlayRenderer(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref multiPointOverlayRenderer : renderer didItemTapped: item];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMultiPointOverlayRenderer::initWithMultiPointOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMultiPointOverlay* multiPointOverlay = (MAMultiPointOverlay*) HEAP[@([args[@"multiPointOverlay"] integerValue])];
      
          // ref
          MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMultiPointOverlayRenderer@%@::initWithMultiPointOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAMultiPointOverlayRenderer* result = [ref initWithMultiPointOverlay: multiPointOverlay];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAPolylineRenderer::initWithPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAPolyline* polyline = (MAPolyline*) HEAP[@([args[@"polyline"] integerValue])];
      
          // ref
          MAPolylineRenderer* ref = (MAPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAPolylineRenderer@%@::initWithPolyline(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAPolylineRenderer* result = [ref initWithPolyline: polyline];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationMoveAnimation::name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::name(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSString* result = [ref name];
      
          // result
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationMoveAnimation::coordinates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::coordinates(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CLLocationCoordinate2D* result = [ref coordinates];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D*)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationMoveAnimation::count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::count(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSUInteger result = [ref count];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationMoveAnimation::duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::duration(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGFloat result = [ref duration];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationMoveAnimation::elapsedTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::elapsedTime(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGFloat result = [ref elapsedTime];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationMoveAnimation::cancel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::cancel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cancel ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationMoveAnimation::isCancelled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::isCancelled(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref isCancelled];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationMoveAnimation::passedPointCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::passedPointCount(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSInteger result = [ref passedPointCount];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationView::setSelectedAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL selected = [args[@"selected"] boolValue];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationView@%@::setSelected(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setSelected : selected animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationView::initWithAnnotationReuseIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
          // jsonable arg
          NSString* reuseIdentifier = (NSString*) args[@"reuseIdentifier"];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationView@%@::initWithAnnotation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          id result = [ref initWithAnnotation: annotation reuseIdentifier: reuseIdentifier];
      
          // result
          // return a ref
          HEAP[@(((NSObject*) result).hash)] = result;
          NSNumber* jsonableResult = @(((NSObject*) result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationView::prepareForReuse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationView@%@::prepareForReuse(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref prepareForReuse ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationView::setDragStateAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          MAAnnotationViewDragState newDragState = (MAAnnotationViewDragState) [args[@"newDragState"] integerValue];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationView@%@::setDragState(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setDragState : newDragState animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MATileOverlay::initWithURLTemplate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* URLTemplate = (NSString*) args[@"URLTemplate"];
      
          // ref
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MATileOverlay@%@::initWithURLTemplate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          id result = [ref initWithURLTemplate: URLTemplate];
      
          // result
          // return a ref
          HEAP[@(((NSObject*) result).hash)] = result;
          NSNumber* jsonableResult = @(((NSObject*) result).hash);
      
          methodResult(jsonableResult);
      },
      @"MATileOverlay::loadTileAtPathResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* pathValue = (NSValue*) HEAP[@([args[@"path"] integerValue])];
          MATileOverlayPath path;
          [pathValue getValue:&path];
      
      
          // ref
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MATileOverlay@%@::loadTileAtPath(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref loadTileAtPath : path result: ^(NSData* tileData, NSError* error) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"MATileOverlay::loadTileAtPathResult::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // ref callback arg
              NSNumber* argtileData = @(tileData.hash);
              HEAP[argtileData] = tileData;
              // ref callback arg
              NSNumber* argerror = @(error.hash);
              HEAP[argerror] = error;
      
              [channel invokeMethod:@"Callback::void|NSData tileData, NSError error::void|NSData tileData, NSError error" arguments:@{@"tileData": argtileData, @"error": argerror}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MATileOverlay::cancelLoadOfTileAtPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* pathValue = (NSValue*) HEAP[@([args[@"path"] integerValue])];
          MATileOverlayPath path;
          [pathValue getValue:&path];
      
          // ref
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MATileOverlay@%@::cancelLoadOfTileAtPath(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cancelLoadOfTileAtPath : path];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MACustomCalloutView::initWithCustomView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          UIView* customView = (UIView*) HEAP[@([args[@"customView"] integerValue])];
      
          // ref
          MACustomCalloutView* ref = (MACustomCalloutView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACustomCalloutView@%@::initWithCustomView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          id result = [ref initWithCustomView: customView];
      
          // result
          // return a ref
          HEAP[@(((NSObject*) result).hash)] = result;
          NSNumber* jsonableResult = @(((NSObject*) result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAOfflineMap::sharedOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOfflineMap::sharedOfflineMap(暂未实现参数打印)");
          }
      
          // invoke native method
          MAOfflineMap* result = [MAOfflineMap sharedOfflineMap];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAOfflineMap::setupWithCompletionBlock": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOfflineMap@%@::setupWithCompletionBlock(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setupWithCompletionBlock : ^(BOOL setupSuccess) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"MAOfflineMap::setupWithCompletionBlock::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // primitive callback arg
              NSNumber* argsetupSuccess = @(setupSuccess);
      
              [channel invokeMethod:@"Callback::void|BOOL setupSuccess::void|BOOL setupSuccess" arguments:@{@"setupSuccess": argsetupSuccess}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAOfflineMap::downloadItemShouldContinueWhenAppEntersBackgrounddownloadBlock": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAOfflineItem* item = (MAOfflineItem*) HEAP[@([args[@"item"] integerValue])];
          // jsonable arg
          BOOL shouldContinueWhenAppEntersBackground = [args[@"shouldContinueWhenAppEntersBackground"] boolValue];
      
      
          // ref
          MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOfflineMap@%@::downloadItem(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref downloadItem : item shouldContinueWhenAppEntersBackground: shouldContinueWhenAppEntersBackground downloadBlock: ^(MAOfflineItem* downloadItem, MAOfflineMapDownloadStatus downloadStatus, id info) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"MAOfflineMap::downloadItemShouldContinueWhenAppEntersBackgrounddownloadBlock::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // ref callback arg
              NSNumber* argdownloadItem = @(downloadItem.hash);
              HEAP[argdownloadItem] = downloadItem;
              // enum callback arg
              NSNumber* argdownloadStatus = @((NSInteger) downloadStatus);
              // ref callback arg
              NSNumber* arginfo = @(((NSObject*) info).hash);
              HEAP[arginfo] = ((NSObject*) info);
      
              [channel invokeMethod:@"Callback::MAOfflineMapDownloadBlock::MAOfflineMapDownloadBlock" arguments:@{@"downloadItem": argdownloadItem, @"downloadStatus": argdownloadStatus, @"info": arginfo}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAOfflineMap::isDownloadingForItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAOfflineItem* item = (MAOfflineItem*) HEAP[@([args[@"item"] integerValue])];
      
          // ref
          MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOfflineMap@%@::isDownloadingForItem(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref isDownloadingForItem: item];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAOfflineMap::pauseItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAOfflineItem* item = (MAOfflineItem*) HEAP[@([args[@"item"] integerValue])];
      
          // ref
          MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOfflineMap@%@::pauseItem(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref pauseItem: item];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAOfflineMap::deleteItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAOfflineItem* item = (MAOfflineItem*) HEAP[@([args[@"item"] integerValue])];
      
          // ref
          MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOfflineMap@%@::deleteItem(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref deleteItem : item];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAOfflineMap::cancelAll": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOfflineMap@%@::cancelAll(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cancelAll ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAOfflineMap::clearDisk": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOfflineMap@%@::clearDisk(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref clearDisk ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAOfflineMap::checkNewestVersion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOfflineMap@%@::checkNewestVersion(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref checkNewestVersion : ^(BOOL hasNewestVersion) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"MAOfflineMap::checkNewestVersion::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // primitive callback arg
              NSNumber* arghasNewestVersion = @(hasNewestVersion);
      
              [channel invokeMethod:@"Callback::MAOfflineMapNewestVersionBlock::MAOfflineMapNewestVersionBlock" arguments:@{@"hasNewestVersion": arghasNewestVersion}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MACircleRenderer::initWithCircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MACircle* circle = (MACircle*) HEAP[@([args[@"circle"] integerValue])];
      
          // ref
          MACircleRenderer* ref = (MACircleRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACircleRenderer@%@::initWithCircle(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MACircleRenderer* result = [ref initWithCircle: circle];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAParticleOverlayRenderer::initWithParticleOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAParticleOverlay* particleOverlay = (MAParticleOverlay*) HEAP[@([args[@"particleOverlay"] integerValue])];
      
          // ref
          MAParticleOverlayRenderer* ref = (MAParticleOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleOverlayRenderer@%@::initWithParticleOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAParticleOverlayRenderer* result = [ref initWithParticleOverlay: particleOverlay];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAParticleVelocityGenerate::getX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<MAParticleVelocityGenerate> ref = (id<MAParticleVelocityGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleVelocityGenerate@%@::getX(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGFloat result = [ref getX];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAParticleVelocityGenerate::getY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<MAParticleVelocityGenerate> ref = (id<MAParticleVelocityGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleVelocityGenerate@%@::getY(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGFloat result = [ref getY];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAParticleVelocityGenerate::getZ": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<MAParticleVelocityGenerate> ref = (id<MAParticleVelocityGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleVelocityGenerate@%@::getZ(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGFloat result = [ref getZ];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAParticleRandomVelocityGenerate::initWithBoundaryValueX1Y1Z1X2Y2Z2": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          float x1 = [args[@"x1"] floatValue];
          // jsonable arg
          float y1 = [args[@"y1"] floatValue];
          // jsonable arg
          float z1 = [args[@"z1"] floatValue];
          // jsonable arg
          float x2 = [args[@"x2"] floatValue];
          // jsonable arg
          float y2 = [args[@"y2"] floatValue];
          // jsonable arg
          float z2 = [args[@"z2"] floatValue];
      
          // ref
          MAParticleRandomVelocityGenerate* ref = (MAParticleRandomVelocityGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleRandomVelocityGenerate@%@::initWithBoundaryValueX1(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAParticleRandomVelocityGenerate* result = [ref initWithBoundaryValueX1: x1 Y1: y1 Z1: z1 X2: x2 Y2: y2 Z2: z2];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAParticleRandomColorGenerate::initWithBoundaryColorR1G1B1A1R2G2B2A2": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          float r1 = [args[@"r1"] floatValue];
          // jsonable arg
          float g1 = [args[@"g1"] floatValue];
          // jsonable arg
          float b1 = [args[@"b1"] floatValue];
          // jsonable arg
          float a1 = [args[@"a1"] floatValue];
          // jsonable arg
          float r2 = [args[@"r2"] floatValue];
          // jsonable arg
          float g2 = [args[@"g2"] floatValue];
          // jsonable arg
          float b2 = [args[@"b2"] floatValue];
          // jsonable arg
          float a2 = [args[@"a2"] floatValue];
      
          // ref
          MAParticleRandomColorGenerate* ref = (MAParticleRandomColorGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleRandomColorGenerate@%@::initWithBoundaryColorR1(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAParticleRandomColorGenerate* result = [ref initWithBoundaryColorR1: r1 G1: g1 B1: b1 A1: a1 R2: r2 G2: g2 B2: b2 A2: a2];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAParticleRotationGenerate::getRotate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<MAParticleRotationGenerate> ref = (id<MAParticleRotationGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleRotationGenerate@%@::getRotate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          float result = [ref getRotate];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAParticleConstantRotationGenerate::initWithRotate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          float rotate = [args[@"rotate"] floatValue];
      
          // ref
          MAParticleConstantRotationGenerate* ref = (MAParticleConstantRotationGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleConstantRotationGenerate@%@::initWithRotate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAParticleConstantRotationGenerate* result = [ref initWithRotate: rotate];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAParticleSizeGenerate::getSizeX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          float timeFrame = [args[@"timeFrame"] floatValue];
      
          // ref
          id<MAParticleSizeGenerate> ref = (id<MAParticleSizeGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleSizeGenerate@%@::getSizeX(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          float result = [ref getSizeX: timeFrame];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAParticleSizeGenerate::getSizeY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          float timeFrame = [args[@"timeFrame"] floatValue];
      
          // ref
          id<MAParticleSizeGenerate> ref = (id<MAParticleSizeGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleSizeGenerate@%@::getSizeY(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          float result = [ref getSizeY: timeFrame];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAParticleSizeGenerate::getSizeZ": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          float timeFrame = [args[@"timeFrame"] floatValue];
      
          // ref
          id<MAParticleSizeGenerate> ref = (id<MAParticleSizeGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleSizeGenerate@%@::getSizeZ(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          float result = [ref getSizeZ: timeFrame];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAParticleCurveSizeGenerate::initWithCurveXYZ": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          float x = [args[@"x"] floatValue];
          // jsonable arg
          float y = [args[@"y"] floatValue];
          // jsonable arg
          float z = [args[@"z"] floatValue];
      
          // ref
          MAParticleCurveSizeGenerate* ref = (MAParticleCurveSizeGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleCurveSizeGenerate@%@::initWithCurveX(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAParticleCurveSizeGenerate* result = [ref initWithCurveX: x Y: y Z: z];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAParticleEmissionModule::initWithEmissionRateRateTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int rate = [args[@"rate"] intValue];
          // jsonable arg
          int rateTime = [args[@"rateTime"] intValue];
      
          // ref
          MAParticleEmissionModule* ref = (MAParticleEmissionModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleEmissionModule@%@::initWithEmissionRate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAParticleEmissionModule* result = [ref initWithEmissionRate: rate rateTime: rateTime];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAParticleShapeModule::isRatioEnable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<MAParticleShapeModule> ref = (id<MAParticleShapeModule>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleShapeModule@%@::isRatioEnable(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref isRatioEnable];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAParticleSinglePointShapeModule::initWithShapeXYZuseRatio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          float x = [args[@"x"] floatValue];
          // jsonable arg
          float y = [args[@"y"] floatValue];
          // jsonable arg
          float z = [args[@"z"] floatValue];
          // jsonable arg
          BOOL isUseRatio = [args[@"isUseRatio"] boolValue];
      
          // ref
          MAParticleSinglePointShapeModule* ref = (MAParticleSinglePointShapeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleSinglePointShapeModule@%@::initWithShapeX(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAParticleSinglePointShapeModule* result = [ref initWithShapeX: x Y: y Z: z useRatio: isUseRatio];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAParticleRectShapeModule::initWithLeftToprightbottomuseRatio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          float left = [args[@"left"] floatValue];
          // jsonable arg
          float top = [args[@"top"] floatValue];
          // jsonable arg
          float right = [args[@"right"] floatValue];
          // jsonable arg
          float bottom = [args[@"bottom"] floatValue];
          // jsonable arg
          BOOL isUseRatio = [args[@"isUseRatio"] boolValue];
      
          // ref
          MAParticleRectShapeModule* ref = (MAParticleRectShapeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleRectShapeModule@%@::initWithLeft(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAParticleRectShapeModule* result = [ref initWithLeft: left top: top right: right bottom: bottom useRatio: isUseRatio];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAParticleOverLifeModule::setVelocityOverLife": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAParticleVelocityGenerate> velocity = (id<MAParticleVelocityGenerate>) HEAP[@([args[@"velocity"] integerValue])];
      
          // ref
          MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleOverLifeModule@%@::setVelocityOverLife(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setVelocityOverLife : velocity];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAParticleOverLifeModule::setRotationOverLife": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAParticleRotationGenerate> rotation = (id<MAParticleRotationGenerate>) HEAP[@([args[@"rotation"] integerValue])];
      
          // ref
          MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleOverLifeModule@%@::setRotationOverLife(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setRotationOverLife : rotation];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAParticleOverLifeModule::setSizeOverLife": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAParticleSizeGenerate> size = (id<MAParticleSizeGenerate>) HEAP[@([args[@"size"] integerValue])];
      
          // ref
          MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleOverLifeModule@%@::setSizeOverLife(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setSizeOverLife : size];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAParticleOverLifeModule::setColorOverLife": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAParticleColorGenerate> color = (id<MAParticleColorGenerate>) HEAP[@([args[@"color"] integerValue])];
      
          // ref
          MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAParticleOverLifeModule@%@::setColorOverLife(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setColorOverLife : color];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAOverlayRenderer::initWithOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOverlayRenderer@%@::initWithOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAOverlayRenderer* result = [ref initWithOverlay: overlay];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAOverlayRenderer::getOffsetPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOverlayRenderer@%@::getOffsetPoint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAMapPoint result = [ref getOffsetPoint];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAOverlayRenderer::getMapZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOverlayRenderer@%@::getMapZoomLevel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGFloat result = [ref getMapZoomLevel];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAOverlayRenderer::glPointForMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapPointValue = (NSValue*) HEAP[@([args[@"mapPoint"] integerValue])];
          MAMapPoint mapPoint;
          [mapPointValue getValue:&mapPoint];
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOverlayRenderer@%@::glPointForMapPoint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGPoint result = [ref glPointForMapPoint: mapPoint];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAOverlayRenderer::glPointsForMapPointsCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* mapPointsRefIdArray = (NSArray*) args[@"mapPoints"];
          MAMapPoint mapPoints[mapPointsRefIdArray.count];
      
          for (int i = 0; i < mapPointsRefIdArray.count; i++) {
              NSValue* mapPointsValue = (NSValue*) HEAP[[mapPointsRefIdArray objectAtIndex:i]];
              MAMapPoint mapPointsItem;
              [mapPointsValue getValue:&mapPointsItem];
              mapPoints[i] = mapPointsItem;
          }
          // jsonable arg
          NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOverlayRenderer@%@::glPointsForMapPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGPoint* result = [ref glPointsForMapPoints: mapPoints count: count];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint*)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAOverlayRenderer::glWidthForWindowWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CGFloat windowWidth = [args[@"windowWidth"] floatValue];
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOverlayRenderer@%@::glWidthForWindowWidth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGFloat result = [ref glWidthForWindowWidth: windowWidth];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAOverlayRenderer::renderLinesWithPointsPointCountstrokeColorlineWidthlooped": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          CGPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              CGPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // ref arg
          UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // jsonable arg
          BOOL looped = [args[@"looped"] boolValue];
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderLinesWithPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAOverlayRenderer::renderLinesWithPointsPointCountstrokeColorlineWidthloopedLineJoinTypeLineCapTypelineDash": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          CGPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              CGPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // ref arg
          UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // jsonable arg
          BOOL looped = [args[@"looped"] boolValue];
          // enum arg
          MALineJoinType lineJoinType = (MALineJoinType) [args[@"lineJoinType"] integerValue];
          // enum arg
          MALineCapType lineCapType = (MALineCapType) [args[@"lineCapType"] integerValue];
          // enum arg
          MALineDashType lineDash = (MALineDashType) [args[@"lineDash"] integerValue];
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderLinesWithPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped LineJoinType: lineJoinType LineCapType: lineCapType lineDash: lineDash];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAOverlayRenderer::renderTexturedLinesWithPointsPointCountlineWidthtextureIDsdrawStyleIndexeslooped": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          CGPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              CGPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // list arg
          NSArray<NSNumber*>* textureIDsRefArray = (NSArray<NSNumber*> *) args[@"textureIDs"];
          NSMutableArray<NSArray*>* textureIDs = [NSMutableArray arrayWithCapacity:textureIDsRefArray.count];
          for (int i = 0; i < textureIDsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[textureIDsRefArray objectAtIndex:i]];
              [textureIDs addObject:item];
          }
          // list arg
          NSArray<NSNumber*>* drawStyleIndexesRefArray = (NSArray<NSNumber*> *) args[@"drawStyleIndexes"];
          NSMutableArray<NSArray*>* drawStyleIndexes = [NSMutableArray arrayWithCapacity:drawStyleIndexesRefArray.count];
          for (int i = 0; i < drawStyleIndexesRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[drawStyleIndexesRefArray objectAtIndex:i]];
              [drawStyleIndexes addObject:item];
          }
          // jsonable arg
          BOOL looped = [args[@"looped"] boolValue];
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderTexturedLinesWithPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref renderTexturedLinesWithPoints : points pointCount: pointCount lineWidth: lineWidth textureIDs: textureIDs drawStyleIndexes: drawStyleIndexes looped: looped];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAOverlayRenderer::renderLinesWithPointsPointCountstrokeColorsdrawStyleIndexesisGradientlineWidthloopedLineJoinTypeLineCapTypelineDash": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          CGPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              CGPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // list arg
          NSArray<NSNumber*>* strokeColorsRefArray = (NSArray<NSNumber*> *) args[@"strokeColors"];
          NSMutableArray<NSArray*>* strokeColors = [NSMutableArray arrayWithCapacity:strokeColorsRefArray.count];
          for (int i = 0; i < strokeColorsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[strokeColorsRefArray objectAtIndex:i]];
              [strokeColors addObject:item];
          }
          // list arg
          NSArray<NSNumber*>* drawStyleIndexesRefArray = (NSArray<NSNumber*> *) args[@"drawStyleIndexes"];
          NSMutableArray<NSArray*>* drawStyleIndexes = [NSMutableArray arrayWithCapacity:drawStyleIndexesRefArray.count];
          for (int i = 0; i < drawStyleIndexesRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[drawStyleIndexesRefArray objectAtIndex:i]];
              [drawStyleIndexes addObject:item];
          }
          // jsonable arg
          BOOL isGradient = [args[@"isGradient"] boolValue];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // jsonable arg
          BOOL looped = [args[@"looped"] boolValue];
          // enum arg
          MALineJoinType lineJoinType = (MALineJoinType) [args[@"lineJoinType"] integerValue];
          // enum arg
          MALineCapType lineCapType = (MALineCapType) [args[@"lineCapType"] integerValue];
          // enum arg
          MALineDashType lineDash = (MALineDashType) [args[@"lineDash"] integerValue];
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderLinesWithPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref renderLinesWithPoints : points pointCount: pointCount strokeColors: strokeColors drawStyleIndexes: drawStyleIndexes isGradient: isGradient lineWidth: lineWidth looped: looped LineJoinType: lineJoinType LineCapType: lineCapType lineDash: lineDash];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAOverlayRenderer::renderRegionWithPointsPointCountfillColorusingTriangleFan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          CGPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              CGPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // ref arg
          UIColor* fillColor = (UIColor*) HEAP[@([args[@"fillColor"] integerValue])];
          // jsonable arg
          BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderRegionWithPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref renderRegionWithPoints : points pointCount: pointCount fillColor: fillColor usingTriangleFan: usingTriangleFan];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAOverlayRenderer::renderStrokedRegionWithPointsPointCountfillColorstrokeColorstrokeLineWidthstrokeLineJoinTypestrokeLineDashusingTriangleFan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          CGPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              CGPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // ref arg
          UIColor* fillColor = (UIColor*) HEAP[@([args[@"fillColor"] integerValue])];
          // ref arg
          UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
          // jsonable arg
          CGFloat strokeLineWidth = [args[@"strokeLineWidth"] floatValue];
          // enum arg
          MALineJoinType strokeLineJoinType = (MALineJoinType) [args[@"strokeLineJoinType"] integerValue];
          // enum arg
          MALineDashType strokeLineDash = (MALineDashType) [args[@"strokeLineDash"] integerValue];
          // jsonable arg
          BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderStrokedRegionWithPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref renderStrokedRegionWithPoints : points pointCount: pointCount fillColor: fillColor strokeColor: strokeColor strokeLineWidth: strokeLineWidth strokeLineJoinType: strokeLineJoinType strokeLineDash: strokeLineDash usingTriangleFan: usingTriangleFan];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAOverlayRenderer::glRender": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOverlayRenderer@%@::glRender(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref glRender ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAOverlayRenderer::setNeedsUpdate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAOverlayRenderer@%@::setNeedsUpdate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setNeedsUpdate ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMultiPointOverlay::initWithMultiPointItems": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* itemsRefArray = (NSArray<NSNumber*> *) args[@"items"];
          NSMutableArray<MAMultiPointItem*>* items = [NSMutableArray arrayWithCapacity:itemsRefArray.count];
          for (int i = 0; i < itemsRefArray.count; i++) {
              MAMultiPointItem* item = (MAMultiPointItem*) HEAP[[itemsRefArray objectAtIndex:i]];
              [items addObject:item];
          }
      
          // ref
          MAMultiPointOverlay* ref = (MAMultiPointOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMultiPointOverlay@%@::initWithMultiPointItems(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAMultiPointOverlay* result = [ref initWithMultiPointItems: items];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MACustomBuildingOverlayOption::optionWithCoordinatesCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
          CLLocationCoordinate2D coords[coordsRefIdArray.count];
      
          for (int i = 0; i < coordsRefIdArray.count; i++) {
              NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
              CLLocationCoordinate2D coordsItem;
              [coordsValue getValue:&coordsItem];
              coords[i] = coordsItem;
          }
          // jsonable arg
          NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACustomBuildingOverlayOption::optionWithCoordinates(暂未实现参数打印)");
          }
      
          // invoke native method
          MACustomBuildingOverlayOption* result = [MACustomBuildingOverlayOption optionWithCoordinates: coords count: count];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MACustomBuildingOverlayOption::setOptionWithCoordinatesCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
          CLLocationCoordinate2D coords[coordsRefIdArray.count];
      
          for (int i = 0; i < coordsRefIdArray.count; i++) {
              NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
              CLLocationCoordinate2D coordsItem;
              [coordsValue getValue:&coordsItem];
              coords[i] = coordsItem;
          }
          // jsonable arg
          NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
          // ref
          MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACustomBuildingOverlayOption@%@::setOptionWithCoordinates(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setOptionWithCoordinates: coords count: count];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MACustomBuildingOverlay::addCustomOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MACustomBuildingOverlayOption* option = (MACustomBuildingOverlayOption*) HEAP[@([args[@"option"] integerValue])];
      
          // ref
          MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACustomBuildingOverlay@%@::addCustomOption(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addCustomOption : option];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MACustomBuildingOverlay::removeCustomOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MACustomBuildingOverlayOption* option = (MACustomBuildingOverlayOption*) HEAP[@([args[@"option"] integerValue])];
      
          // ref
          MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACustomBuildingOverlay@%@::removeCustomOption(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref removeCustomOption : option];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAArc::arcWithStartCoordinatePassedCoordinateendCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* startCoordinateValue = (NSValue*) HEAP[@([args[@"startCoordinate"] integerValue])];
          CLLocationCoordinate2D startCoordinate;
          [startCoordinateValue getValue:&startCoordinate];
          // struct arg
          NSValue* passedCoordinateValue = (NSValue*) HEAP[@([args[@"passedCoordinate"] integerValue])];
          CLLocationCoordinate2D passedCoordinate;
          [passedCoordinateValue getValue:&passedCoordinate];
          // struct arg
          NSValue* endCoordinateValue = (NSValue*) HEAP[@([args[@"endCoordinate"] integerValue])];
          CLLocationCoordinate2D endCoordinate;
          [endCoordinateValue getValue:&endCoordinate];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAArc::arcWithStartCoordinate(暂未实现参数打印)");
          }
      
          // invoke native method
          MAArc* result = [MAArc arcWithStartCoordinate: startCoordinate passedCoordinate: passedCoordinate endCoordinate: endCoordinate];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapView::setRegionAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
          MACoordinateRegion region;
          [regionValue getValue:&region];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::setRegion(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setRegion : region animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::regionThatFits": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
          MACoordinateRegion region;
          [regionValue getValue:&region];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::regionThatFits(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MACoordinateRegion result = [ref regionThatFits: region];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapView::setVisibleMapRectAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
          MAMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::setVisibleMapRect(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setVisibleMapRect : mapRect animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::mapRectThatFits": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
          MAMapRect mapRect;
          [mapRectValue getValue:&mapRect];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::mapRectThatFits(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAMapRect result = [ref mapRectThatFits: mapRect];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapView::mapRectThatFitsEdgePadding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
          MAMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // struct arg
          NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
          UIEdgeInsets insets;
          [insetsValue getValue:&insets];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::mapRectThatFits(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAMapRect result = [ref mapRectThatFits: mapRect edgePadding: insets];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapView::setVisibleMapRectEdgePaddinganimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
          MAMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // struct arg
          NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
          UIEdgeInsets insets;
          [insetsValue getValue:&insets];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::setVisibleMapRect(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setVisibleMapRect : mapRect edgePadding: insets animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::setCenterCoordinateAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::setCenterCoordinate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCenterCoordinate : coordinate animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::setZoomLevelAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::setZoomLevel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setZoomLevel : zoomLevel animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::setZoomLevelAtPivotanimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
          // struct arg
          NSValue* pivotValue = (NSValue*) HEAP[@([args[@"pivot"] integerValue])];
          CGPoint pivot;
          [pivotValue getValue:&pivot];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::setZoomLevel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setZoomLevel : zoomLevel atPivot: pivot animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::setRotationDegreeAnimatedduration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CGFloat rotationDegree = [args[@"rotationDegree"] floatValue];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
          // jsonable arg
          CFTimeInterval duration = [args[@"duration"] doubleValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::setRotationDegree(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setRotationDegree : rotationDegree animated: animated duration: duration];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::setCameraDegreeAnimatedduration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
          // jsonable arg
          CFTimeInterval duration = [args[@"duration"] doubleValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::setCameraDegree(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCameraDegree : cameraDegree animated: animated duration: duration];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::getMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::getMapStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAMapStatus* result = [ref getMapStatus];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapView::setMapStatusAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapStatus* status = (MAMapStatus*) HEAP[@([args[@"status"] integerValue])];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::setMapStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setMapStatus : status animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::setMapStatusAnimatedduration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapStatus* status = (MAMapStatus*) HEAP[@([args[@"status"] integerValue])];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
          // jsonable arg
          CFTimeInterval duration = [args[@"duration"] doubleValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::setMapStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setMapStatus : status animated: animated duration: duration];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::setCompassImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          UIImage* image = (UIImage*) HEAP[@([args[@"image"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::setCompassImage(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCompassImage : image];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::takeSnapshotInRectWithCompletionBlock": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          CGRect rect;
          [rectValue getValue:&rect];
      
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::takeSnapshotInRect(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref takeSnapshotInRect : rect withCompletionBlock: ^(UIImage* resultImage, NSInteger state) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"MAMapView::takeSnapshotInRectWithCompletionBlock::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // ref callback arg
              NSNumber* argresultImage = @(resultImage.hash);
              HEAP[argresultImage] = resultImage;
              // primitive callback arg
              NSNumber* argstate = @(state);
      
              [channel invokeMethod:@"Callback::void|UIImage resultImage, NSInteger state::void|UIImage resultImage, NSInteger state" arguments:@{@"resultImage": argresultImage, @"state": argstate}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::metersPerPointForZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::metersPerPointForZoomLevel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          double result = [ref metersPerPointForZoomLevel: zoomLevel];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapView::convertCoordinateToPointToView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
          // ref arg
          UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::convertCoordinate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGPoint result = [ref convertCoordinate: coordinate toPointToView: view];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapView::convertPointToCoordinateFromView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
          CGPoint point;
          [pointValue getValue:&point];
          // ref arg
          UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::convertPoint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CLLocationCoordinate2D result = [ref convertPoint: point toCoordinateFromView: view];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapView::convertRegionToRectToView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
          MACoordinateRegion region;
          [regionValue getValue:&region];
          // ref arg
          UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::convertRegion(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGRect result = [ref convertRegion: region toRectToView: view];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapView::convertRectToRegionFromView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          CGRect rect;
          [rectValue getValue:&rect];
          // ref arg
          UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::convertRect(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MACoordinateRegion result = [ref convertRect: rect toRegionFromView: view];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapView::reloadMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::reloadMap(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref reloadMap ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::clearDisk": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::clearDisk(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref clearDisk ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::reloadInternalTexture": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::reloadInternalTexture(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref reloadInternalTexture ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::mapContentApprovalNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::mapContentApprovalNumber(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSString* result = [ref mapContentApprovalNumber];
      
          // result
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      @"MAMapView::satelliteImageApprovalNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::satelliteImageApprovalNumber(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSString* result = [ref satelliteImageApprovalNumber];
      
          // result
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      @"MAMapView::forceRefresh": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::forceRefresh(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref forceRefresh ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::addAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::addAnnotation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addAnnotation : annotation];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::addAnnotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
          NSMutableArray<NSArray*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
          for (int i = 0; i < annotationsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[annotationsRefArray objectAtIndex:i]];
              [annotations addObject:item];
          }
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::addAnnotations(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addAnnotations : annotations];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::removeAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::removeAnnotation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref removeAnnotation : annotation];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::removeAnnotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
          NSMutableArray<NSArray*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
          for (int i = 0; i < annotationsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[annotationsRefArray objectAtIndex:i]];
              [annotations addObject:item];
          }
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::removeAnnotations(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref removeAnnotations : annotations];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::viewForAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::viewForAnnotation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAAnnotationView* result = [ref viewForAnnotation: annotation];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapView::dequeueReusableAnnotationViewWithIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* identifier = (NSString*) args[@"identifier"];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::dequeueReusableAnnotationViewWithIdentifier(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAAnnotationView* result = [ref dequeueReusableAnnotationViewWithIdentifier: identifier];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapView::selectAnnotationAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::selectAnnotation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref selectAnnotation : annotation animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::deselectAnnotationAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::deselectAnnotation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref deselectAnnotation : annotation animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::showAnnotationsAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
          NSMutableArray<NSArray*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
          for (int i = 0; i < annotationsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[annotationsRefArray objectAtIndex:i]];
              [annotations addObject:item];
          }
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::showAnnotations(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref showAnnotations : annotations animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::showAnnotationsEdgePaddinganimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
          NSMutableArray<NSArray*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
          for (int i = 0; i < annotationsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[annotationsRefArray objectAtIndex:i]];
              [annotations addObject:item];
          }
          // struct arg
          NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
          UIEdgeInsets insets;
          [insetsValue getValue:&insets];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::showAnnotations(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref showAnnotations : annotations edgePadding: insets animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::setUserTrackingModeAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          MAUserTrackingMode mode = (MAUserTrackingMode) [args[@"mode"] integerValue];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::setUserTrackingMode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setUserTrackingMode : mode animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::updateUserLocationRepresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAUserLocationRepresentation* representation = (MAUserLocationRepresentation*) HEAP[@([args[@"representation"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::updateUserLocationRepresentation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref updateUserLocationRepresentation : representation];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::overlaysInLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::overlaysInLevel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSArray* result = [ref overlaysInLevel: level];
      
          // result
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      @"MAMapView::addOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::addOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addOverlay : overlay];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::addOverlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
          NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
          for (int i = 0; i < overlaysRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
              [overlays addObject:item];
          }
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::addOverlays(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addOverlays : overlays];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::addOverlayLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
          // enum arg
          MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::addOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addOverlay : overlay level: level];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::addOverlaysLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
          NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
          for (int i = 0; i < overlaysRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
              [overlays addObject:item];
          }
          // enum arg
          MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::addOverlays(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addOverlays : overlays level: level];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::removeOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::removeOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref removeOverlay : overlay];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::removeOverlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
          NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
          for (int i = 0; i < overlaysRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
              [overlays addObject:item];
          }
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::removeOverlays(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref removeOverlays : overlays];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::insertOverlayAtIndexlevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
          // jsonable arg
          NSUInteger index = [args[@"index"] unsignedIntegerValue];
          // enum arg
          MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::insertOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref insertOverlay : overlay atIndex: index level: level];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::insertOverlayAboveOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
          // ref arg
          id<MAOverlay> sibling = (id<MAOverlay>) HEAP[@([args[@"sibling"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::insertOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref insertOverlay : overlay aboveOverlay: sibling];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::insertOverlayBelowOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
          // ref arg
          id<MAOverlay> sibling = (id<MAOverlay>) HEAP[@([args[@"sibling"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::insertOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref insertOverlay : overlay belowOverlay: sibling];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::insertOverlayAtIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
          // jsonable arg
          NSUInteger index = [args[@"index"] unsignedIntegerValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::insertOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref insertOverlay : overlay atIndex: index];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::exchangeOverlayAtIndexWithOverlayAtIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSUInteger index1 = [args[@"index1"] unsignedIntegerValue];
          // jsonable arg
          NSUInteger index2 = [args[@"index2"] unsignedIntegerValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::exchangeOverlayAtIndex(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref exchangeOverlayAtIndex : index1 withOverlayAtIndex: index2];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::exchangeOverlayAtIndexWithOverlayAtIndexatLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSUInteger index1 = [args[@"index1"] unsignedIntegerValue];
          // jsonable arg
          NSUInteger index2 = [args[@"index2"] unsignedIntegerValue];
          // enum arg
          MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::exchangeOverlayAtIndex(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref exchangeOverlayAtIndex : index1 withOverlayAtIndex: index2 atLevel: level];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::exchangeOverlayWithOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAOverlay> overlay1 = (id<MAOverlay>) HEAP[@([args[@"overlay1"] integerValue])];
          // ref arg
          id<MAOverlay> overlay2 = (id<MAOverlay>) HEAP[@([args[@"overlay2"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::exchangeOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref exchangeOverlay : overlay1 withOverlay: overlay2];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::rendererForOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::rendererForOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAOverlayRenderer* result = [ref rendererForOverlay: overlay];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapView::showOverlaysAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
          NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
          for (int i = 0; i < overlaysRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
              [overlays addObject:item];
          }
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::showOverlays(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref showOverlays : overlays animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::showOverlaysEdgePaddinganimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
          NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
          for (int i = 0; i < overlaysRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
              [overlays addObject:item];
          }
          // struct arg
          NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
          UIEdgeInsets insets;
          [insetsValue getValue:&insets];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::showOverlays(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref showOverlays : overlays edgePadding: insets animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::setIndoorMapControlOrigin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* originValue = (NSValue*) HEAP[@([args[@"origin"] integerValue])];
          CGPoint origin;
          [originValue getValue:&origin];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::setIndoorMapControlOrigin(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setIndoorMapControlOrigin : origin];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::setCurrentIndoorMapFloorIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSInteger floorIndex = [args[@"floorIndex"] integerValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::setCurrentIndoorMapFloorIndex(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCurrentIndoorMapFloorIndex : floorIndex];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::clearIndoorMapCache": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::clearIndoorMapCache(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref clearIndoorMapCache ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapView::setCustomMapStyleOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapCustomStyleOptions* styleOptions = (MAMapCustomStyleOptions*) HEAP[@([args[@"styleOptions"] integerValue])];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapView@%@::setCustomMapStyleOptions(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCustomMapStyleOptions : styleOptions];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewRegionChanged": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapViewRegionChanged(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapViewRegionChanged : mapView];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewRegionWillChangeAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView regionWillChangeAnimated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewRegionDidChangeAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView regionDidChangeAnimated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewMapWillMoveByUser": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // jsonable arg
          BOOL wasUserAction = [args[@"wasUserAction"] boolValue];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView mapWillMoveByUser: wasUserAction];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewMapDidMoveByUser": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // jsonable arg
          BOOL wasUserAction = [args[@"wasUserAction"] boolValue];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView mapDidMoveByUser: wasUserAction];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewMapWillZoomByUser": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // jsonable arg
          BOOL wasUserAction = [args[@"wasUserAction"] boolValue];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView mapWillZoomByUser: wasUserAction];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewMapDidZoomByUser": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // jsonable arg
          BOOL wasUserAction = [args[@"wasUserAction"] boolValue];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView mapDidZoomByUser: wasUserAction];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewWillStartLoadingMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapViewWillStartLoadingMap(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapViewWillStartLoadingMap : mapView];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidFinishLoadingMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapViewDidFinishLoadingMap(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapViewDidFinishLoadingMap : mapView];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidFailLoadingMapWithError": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // ref arg
          NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapViewDidFailLoadingMap(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapViewDidFailLoadingMap : mapView withError: error];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewViewForAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // ref arg
          id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAAnnotationView* result = [ref mapView: mapView viewForAnnotation: annotation];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidAddAnnotationViews": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // list arg
          NSArray<NSNumber*>* viewsRefArray = (NSArray<NSNumber*> *) args[@"views"];
          NSMutableArray<NSArray*>* views = [NSMutableArray arrayWithCapacity:viewsRefArray.count];
          for (int i = 0; i < viewsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[viewsRefArray objectAtIndex:i]];
              [views addObject:item];
          }
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didAddAnnotationViews: views];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidSelectAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // ref arg
          MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didSelectAnnotationView: view];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidDeselectAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // ref arg
          MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didDeselectAnnotationView: view];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewWillStartLocatingUser": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapViewWillStartLocatingUser(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapViewWillStartLocatingUser : mapView];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidStopLocatingUser": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapViewDidStopLocatingUser(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapViewDidStopLocatingUser : mapView];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidUpdateUserLocationupdatingLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // ref arg
          MAUserLocation* userLocation = (MAUserLocation*) HEAP[@([args[@"userLocation"] integerValue])];
          // jsonable arg
          BOOL updatingLocation = [args[@"updatingLocation"] boolValue];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didUpdateUserLocation: userLocation updatingLocation: updatingLocation];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewRequireLocationAuth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          CLLocationManager* locationManager = (CLLocationManager*) HEAP[@([args[@"locationManager"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapViewRequireLocationAuth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapViewRequireLocationAuth : locationManager];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidFailToLocateUserWithError": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // ref arg
          NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didFailToLocateUserWithError: error];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewAnnotationViewdidChangeDragStatefromOldState": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // ref arg
          MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
          // enum arg
          MAAnnotationViewDragState newState = (MAAnnotationViewDragState) [args[@"newState"] integerValue];
          // enum arg
          MAAnnotationViewDragState oldState = (MAAnnotationViewDragState) [args[@"oldState"] integerValue];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView annotationView: view didChangeDragState: newState fromOldState: oldState];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewRendererForOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // ref arg
          id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAOverlayRenderer* result = [ref mapView: mapView rendererForOverlay: overlay];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidAddOverlayRenderers": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // list arg
          NSArray<NSNumber*>* overlayRenderersRefArray = (NSArray<NSNumber*> *) args[@"overlayRenderers"];
          NSMutableArray<NSArray*>* overlayRenderers = [NSMutableArray arrayWithCapacity:overlayRenderersRefArray.count];
          for (int i = 0; i < overlayRenderersRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[overlayRenderersRefArray objectAtIndex:i]];
              [overlayRenderers addObject:item];
          }
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didAddOverlayRenderers: overlayRenderers];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewAnnotationViewcalloutAccessoryControlTapped": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // ref arg
          MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
          // ref arg
          UIControl* control = (UIControl*) HEAP[@([args[@"control"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView annotationView: view calloutAccessoryControlTapped: control];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidAnnotationViewCalloutTapped": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // ref arg
          MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didAnnotationViewCalloutTapped: view];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidAnnotationViewTapped": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // ref arg
          MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didAnnotationViewTapped: view];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidChangeUserTrackingModeanimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // enum arg
          MAUserTrackingMode mode = (MAUserTrackingMode) [args[@"mode"] integerValue];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didChangeUserTrackingMode: mode animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidChangeOpenGLESDisabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // jsonable arg
          BOOL openGLESDisabled = [args[@"openGLESDisabled"] boolValue];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didChangeOpenGLESDisabled: openGLESDisabled];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidTouchPois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // list arg
          NSArray<NSNumber*>* poisRefArray = (NSArray<NSNumber*> *) args[@"pois"];
          NSMutableArray<NSArray*>* pois = [NSMutableArray arrayWithCapacity:poisRefArray.count];
          for (int i = 0; i < poisRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[poisRefArray objectAtIndex:i]];
              [pois addObject:item];
          }
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didTouchPois: pois];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidSingleTappedAtCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didSingleTappedAtCoordinate: coordinate];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidLongPressedAtCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didLongPressedAtCoordinate: coordinate];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapInitComplete": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapInitComplete(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapInitComplete : mapView];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidIndoorMapShowed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // ref arg
          MAIndoorInfo* indoorInfo = (MAIndoorInfo*) HEAP[@([args[@"indoorInfo"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didIndoorMapShowed: indoorInfo];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidIndoorMapFloorIndexChanged": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // ref arg
          MAIndoorInfo* indoorInfo = (MAIndoorInfo*) HEAP[@([args[@"indoorInfo"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didIndoorMapFloorIndexChanged: indoorInfo];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::mapViewDidIndoorMapHidden": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
          // ref arg
          MAIndoorInfo* indoorInfo = (MAIndoorInfo*) HEAP[@([args[@"indoorInfo"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::mapView(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapView : mapView didIndoorMapHidden: indoorInfo];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::offlineDataWillReload": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::offlineDataWillReload(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref offlineDataWillReload : mapView];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAMapViewDelegate::offlineDataDidReload": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
          // ref
          id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapViewDelegate@%@::offlineDataDidReload(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref offlineDataDidReload : mapView];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAGroundOverlayRenderer::initWithGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MAGroundOverlay* groundOverlay = (MAGroundOverlay*) HEAP[@([args[@"groundOverlay"] integerValue])];
      
          // ref
          MAGroundOverlayRenderer* ref = (MAGroundOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAGroundOverlayRenderer@%@::initWithGroundOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MAGroundOverlayRenderer* result = [ref initWithGroundOverlay: groundOverlay];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MACustomBuildingOverlayRenderer::initWithCustomBuildingOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          MACustomBuildingOverlay* customBuildingOverlay = (MACustomBuildingOverlay*) HEAP[@([args[@"customBuildingOverlay"] integerValue])];
      
          // ref
          MACustomBuildingOverlayRenderer* ref = (MACustomBuildingOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACustomBuildingOverlayRenderer@%@::initWithCustomBuildingOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          MACustomBuildingOverlayRenderer* result = [ref initWithCustomBuildingOverlay: customBuildingOverlay];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"MAGroundOverlay::groundOverlayWithBoundsIcon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* boundsValue = (NSValue*) HEAP[@([args[@"bounds"] integerValue])];
              MACoordinateBounds bounds;
              [boundsValue getValue:&bounds];
              // ref arg
              UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
      
              // ref
        
      
              // invoke native method
              MAGroundOverlay* result = [MAGroundOverlay groundOverlayWithBounds: bounds icon: icon];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAGroundOverlay::groundOverlayWithCoordinateZoomLevelicon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
              CLLocationCoordinate2D coordinate;
              [coordinateValue getValue:&coordinate];
              // jsonable arg
              CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
              // ref arg
              UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
      
              // ref
        
      
              // invoke native method
              MAGroundOverlay* result = [MAGroundOverlay groundOverlayWithCoordinate: coordinate zoomLevel: zoomLevel icon: icon];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAGroundOverlay::setGroundOverlayWithBoundsIcon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* boundsValue = (NSValue*) HEAP[@([args[@"bounds"] integerValue])];
              MACoordinateBounds bounds;
              [boundsValue getValue:&bounds];
              // ref arg
              UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
      
              // ref
              MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref setGroundOverlayWithBounds: bounds icon: icon];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAGroundOverlay::setGroundOverlayWithCoordinateZoomLevelicon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
              CLLocationCoordinate2D coordinate;
              [coordinateValue getValue:&coordinate];
              // jsonable arg
              CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
              // ref arg
              UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
      
              // ref
              MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref setGroundOverlayWithCoordinate: coordinate zoomLevel: zoomLevel icon: icon];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAPolygonRenderer::initWithPolygon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAPolygon* polygon = (MAPolygon*) HEAP[@([args[@"polygon"] integerValue])];
      
              // ref
              MAPolygonRenderer* ref = (MAPolygonRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAPolygonRenderer* result = [ref initWithPolygon: polygon];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapStatus::statusWithCenterCoordinateZoomLevelrotationDegreecameraDegreescreenAnchor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
              CLLocationCoordinate2D coordinate;
              [coordinateValue getValue:&coordinate];
              // jsonable arg
              CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
              // jsonable arg
              CGFloat rotationDegree = [args[@"rotationDegree"] floatValue];
              // jsonable arg
              CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
              // struct arg
              NSValue* screenAnchorValue = (NSValue*) HEAP[@([args[@"screenAnchor"] integerValue])];
              CGPoint screenAnchor;
              [screenAnchorValue getValue:&screenAnchor];
      
              // ref
        
      
              // invoke native method
              MAMapStatus* result = [MAMapStatus statusWithCenterCoordinate: coordinate zoomLevel: zoomLevel rotationDegree: rotationDegree cameraDegree: cameraDegree screenAnchor: screenAnchor];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapStatus::initWithCenterCoordinateZoomLevelrotationDegreecameraDegreescreenAnchor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
              CLLocationCoordinate2D coordinate;
              [coordinateValue getValue:&coordinate];
              // jsonable arg
              CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
              // jsonable arg
              CGFloat rotationDegree = [args[@"rotationDegree"] floatValue];
              // jsonable arg
              CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
              // struct arg
              NSValue* screenAnchorValue = (NSValue*) HEAP[@([args[@"screenAnchor"] integerValue])];
              CGPoint screenAnchor;
              [screenAnchorValue getValue:&screenAnchor];
      
              // ref
              MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              id result = [ref initWithCenterCoordinate: coordinate zoomLevel: zoomLevel rotationDegree: rotationDegree cameraDegree: cameraDegree screenAnchor: screenAnchor];
      
              // result
              // return a ref
              HEAP[@(((NSObject*) result).hash)] = result;
              NSNumber* jsonableResult = @(((NSObject*) result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MACircle::circleWithCenterCoordinateRadius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* coordValue = (NSValue*) HEAP[@([args[@"coord"] integerValue])];
              CLLocationCoordinate2D coord;
              [coordValue getValue:&coord];
              // jsonable arg
              CLLocationDistance radius = [args[@"radius"] doubleValue];
      
              // ref
        
      
              // invoke native method
              MACircle* result = [MACircle circleWithCenterCoordinate: coord radius: radius];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MACircle::circleWithMapRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
              MAMapRect mapRect;
              [mapRectValue getValue:&mapRect];
      
              // ref
        
      
              // invoke native method
              MACircle* result = [MACircle circleWithMapRect: mapRect];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MACircle::setCircleWithCenterCoordinateRadius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* coordValue = (NSValue*) HEAP[@([args[@"coord"] integerValue])];
              CLLocationCoordinate2D coord;
              [coordValue getValue:&coord];
              // jsonable arg
              CLLocationDistance radius = [args[@"radius"] doubleValue];
      
              // ref
              MACircle* ref = (MACircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref setCircleWithCenterCoordinate: coord radius: radius];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAArcRenderer::initWithArc_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAArc* arc = (MAArc*) HEAP[@([args[@"arc"] integerValue])];
      
              // ref
              MAArcRenderer* ref = (MAArcRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAArcRenderer* result = [ref initWithArc: arc];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnnotation::setCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* newCoordinateValue = (NSValue*) HEAP[@([args[@"newCoordinate"] integerValue])];
              CLLocationCoordinate2D newCoordinate;
              [newCoordinateValue getValue:&newCoordinate];
      
              // ref
              id<MAAnnotation> ref = (id<MAAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCoordinate : newCoordinate];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnimatableAnnotation::step_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              CGFloat timeDelta = [args[@"timeDelta"] floatValue];
      
              // ref
              id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref step : timeDelta];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnimatableAnnotation::isAnimationFinished_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref isAnimationFinished];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnimatableAnnotation::shouldAnimationStart_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref shouldAnimationStart];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnimatableAnnotation::rotateDegree_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              CLLocationDirection result = [ref rotateDegree];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAPolygon::polygonWithCoordinatesCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
              CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
              for (int i = 0; i < coordsRefIdArray.count; i++) {
                  NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
                  CLLocationCoordinate2D coordsItem;
                  [coordsValue getValue:&coordsItem];
                  coords[i] = coordsItem;
              }
              // jsonable arg
              NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
              // ref
        
      
              // invoke native method
              MAPolygon* result = [MAPolygon polygonWithCoordinates: coords count: count];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAPolygon::polygonWithPointsCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
              MAMapPoint points[pointsRefIdArray.count];
        
              for (int i = 0; i < pointsRefIdArray.count; i++) {
                  NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                  MAMapPoint pointsItem;
                  [pointsValue getValue:&pointsItem];
                  points[i] = pointsItem;
              }
              // jsonable arg
              NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
              // ref
        
      
              // invoke native method
              MAPolygon* result = [MAPolygon polygonWithPoints: points count: count];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAPolygon::setPolygonWithPointsCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
              MAMapPoint points[pointsRefIdArray.count];
        
              for (int i = 0; i < pointsRefIdArray.count; i++) {
                  NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                  MAMapPoint pointsItem;
                  [pointsValue getValue:&pointsItem];
                  points[i] = pointsItem;
              }
              // jsonable arg
              NSInteger count = [args[@"count"] integerValue];
      
              // ref
              MAPolygon* ref = (MAPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref setPolygonWithPoints: points count: count];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAPolygon::setPolygonWithCoordinatesCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
              CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
              for (int i = 0; i < coordsRefIdArray.count; i++) {
                  NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
                  CLLocationCoordinate2D coordsItem;
                  [coordsValue getValue:&coordsItem];
                  coords[i] = coordsItem;
              }
              // jsonable arg
              NSInteger count = [args[@"count"] integerValue];
      
              // ref
              MAPolygon* ref = (MAPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref setPolygonWithCoordinates: coords count: count];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleOverlay::particleOverlayWithOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAParticleOverlayOptions* option = (MAParticleOverlayOptions*) HEAP[@([args[@"option"] integerValue])];
      
              // ref
        
      
              // invoke native method
              MAParticleOverlay* result = [MAParticleOverlay particleOverlayWithOption: option];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleOverlay::updateOverlayOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAParticleOverlayOptions* overlayOption = (MAParticleOverlayOptions*) HEAP[@([args[@"overlayOption"] integerValue])];
      
              // ref
              MAParticleOverlay* ref = (MAParticleOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref updateOverlayOption : overlayOption];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAPolyline::polylineWithPointsCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
              MAMapPoint points[pointsRefIdArray.count];
        
              for (int i = 0; i < pointsRefIdArray.count; i++) {
                  NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                  MAMapPoint pointsItem;
                  [pointsValue getValue:&pointsItem];
                  points[i] = pointsItem;
              }
              // jsonable arg
              NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
              // ref
        
      
              // invoke native method
              MAPolyline* result = [MAPolyline polylineWithPoints: points count: count];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAPolyline::polylineWithCoordinatesCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
              CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
              for (int i = 0; i < coordsRefIdArray.count; i++) {
                  NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
                  CLLocationCoordinate2D coordsItem;
                  [coordsValue getValue:&coordsItem];
                  coords[i] = coordsItem;
              }
              // jsonable arg
              NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
              // ref
        
      
              // invoke native method
              MAPolyline* result = [MAPolyline polylineWithCoordinates: coords count: count];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAPolyline::setPolylineWithPointsCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
              MAMapPoint points[pointsRefIdArray.count];
        
              for (int i = 0; i < pointsRefIdArray.count; i++) {
                  NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                  MAMapPoint pointsItem;
                  [pointsValue getValue:&pointsItem];
                  points[i] = pointsItem;
              }
              // jsonable arg
              NSInteger count = [args[@"count"] integerValue];
      
              // ref
              MAPolyline* ref = (MAPolyline*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref setPolylineWithPoints: points count: count];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAPolyline::setPolylineWithCoordinatesCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
              CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
              for (int i = 0; i < coordsRefIdArray.count; i++) {
                  NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
                  CLLocationCoordinate2D coordsItem;
                  [coordsValue getValue:&coordsItem];
                  coords[i] = coordsItem;
              }
              // jsonable arg
              NSInteger count = [args[@"count"] integerValue];
      
              // ref
              MAPolyline* ref = (MAPolyline*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref setPolylineWithCoordinates: coords count: count];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMultiColoredPolylineRenderer::initWithMultiPolyline_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMultiPolyline* multiPolyline = (MAMultiPolyline*) HEAP[@([args[@"multiPolyline"] integerValue])];
      
              // ref
              MAMultiColoredPolylineRenderer* ref = (MAMultiColoredPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAMultiColoredPolylineRenderer* result = [ref initWithMultiPolyline: multiPolyline];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnimatedAnnotation::addMoveAnimationWithKeyCoordinatesCountwithDurationwithNamecompleteCallback_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* coordinatesRefIdArray = (NSArray*) args[@"coordinates"];
              CLLocationCoordinate2D coordinates[coordinatesRefIdArray.count];
        
              for (int i = 0; i < coordinatesRefIdArray.count; i++) {
                  NSValue* coordinatesValue = (NSValue*) HEAP[[coordinatesRefIdArray objectAtIndex:i]];
                  CLLocationCoordinate2D coordinatesItem;
                  [coordinatesValue getValue:&coordinatesItem];
                  coordinates[i] = coordinatesItem;
              }
              // jsonable arg
              NSUInteger count = [args[@"count"] unsignedIntegerValue];
              // jsonable arg
              CGFloat duration = [args[@"duration"] floatValue];
              // jsonable arg
              NSString* name = (NSString*) args[@"name"];
        
      
              // ref
              MAAnimatedAnnotation* ref = (MAAnimatedAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAAnnotationMoveAnimation* result = [ref addMoveAnimationWithKeyCoordinates: coordinates count: count withDuration: duration withName: name completeCallback: ^(BOOL isFinished) {
                  FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:@"MAAnimatedAnnotation::addMoveAnimationWithKeyCoordinatesCountwithDurationwithNamecompleteCallback::Callback"
                            binaryMessenger:[self->_registrar messenger]];
        
                  // print log
                  if (enableLog) {
                      NSLog(@"");
                  }
        
                  // 构造可以直接传输的参数
                  // primitive callback arg
                  NSNumber* argisFinished = @(isFinished);
        
                  [channel invokeMethod:@"Callback::void|BOOL isFinished::void|BOOL isFinished" arguments:@{@"isFinished": argisFinished}];
        
              }];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnimatedAnnotation::addMoveAnimationWithKeyCoordinatesCountwithDurationwithNamecompleteCallbackstepCallback_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* coordinatesRefIdArray = (NSArray*) args[@"coordinates"];
              CLLocationCoordinate2D coordinates[coordinatesRefIdArray.count];
        
              for (int i = 0; i < coordinatesRefIdArray.count; i++) {
                  NSValue* coordinatesValue = (NSValue*) HEAP[[coordinatesRefIdArray objectAtIndex:i]];
                  CLLocationCoordinate2D coordinatesItem;
                  [coordinatesValue getValue:&coordinatesItem];
                  coordinates[i] = coordinatesItem;
              }
              // jsonable arg
              NSUInteger count = [args[@"count"] unsignedIntegerValue];
              // jsonable arg
              CGFloat duration = [args[@"duration"] floatValue];
              // jsonable arg
              NSString* name = (NSString*) args[@"name"];
        
        
      
              // ref
              MAAnimatedAnnotation* ref = (MAAnimatedAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAAnnotationMoveAnimation* result = [ref addMoveAnimationWithKeyCoordinates: coordinates count: count withDuration: duration withName: name completeCallback: ^(BOOL isFinished) {
                  FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:@"MAAnimatedAnnotation::addMoveAnimationWithKeyCoordinatesCountwithDurationwithNamecompleteCallbackstepCallback::Callback"
                            binaryMessenger:[self->_registrar messenger]];
        
                  // print log
                  if (enableLog) {
                      NSLog(@"");
                  }
        
                  // 构造可以直接传输的参数
                  // primitive callback arg
                  NSNumber* argisFinished = @(isFinished);
        
                  [channel invokeMethod:@"Callback::void|BOOL isFinished::void|BOOL isFinished" arguments:@{@"isFinished": argisFinished}];
        
              } stepCallback: ^(MAAnnotationMoveAnimation* currentAni) {
                  FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:@"MAAnimatedAnnotation::addMoveAnimationWithKeyCoordinatesCountwithDurationwithNamecompleteCallbackstepCallback::Callback"
                            binaryMessenger:[self->_registrar messenger]];
        
                  // print log
                  if (enableLog) {
                      NSLog(@"");
                  }
        
                  // 构造可以直接传输的参数
                  // ref callback arg
                  NSNumber* argcurrentAni = @(currentAni.hash);
                  HEAP[argcurrentAni] = currentAni;
        
                  [channel invokeMethod:@"Callback::void|MAAnnotationMoveAnimation currentAni::void|MAAnnotationMoveAnimation currentAni" arguments:@{@"currentAni": argcurrentAni}];
        
              }];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnimatedAnnotation::setNeedsStart_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAAnimatedAnnotation* ref = (MAAnimatedAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setNeedsStart ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMultiTexturePolylineRenderer::initWithMultiPolyline_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMultiPolyline* multiPolyline = (MAMultiPolyline*) HEAP[@([args[@"multiPolyline"] integerValue])];
      
              // ref
              MAMultiTexturePolylineRenderer* ref = (MAMultiTexturePolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAMultiTexturePolylineRenderer* result = [ref initWithMultiPolyline: multiPolyline];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MATileOverlayRenderer::initWithTileOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MATileOverlay* tileOverlay = (MATileOverlay*) HEAP[@([args[@"tileOverlay"] integerValue])];
      
              // ref
              MATileOverlayRenderer* ref = (MATileOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MATileOverlayRenderer* result = [ref initWithTileOverlay: tileOverlay];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MATileOverlayRenderer::reloadData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MATileOverlayRenderer* ref = (MATileOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref reloadData ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MATraceDelegate::traceManagerDidTracecorrectdistancewithError_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MATraceManager* manager = (MATraceManager*) HEAP[@([args[@"manager"] integerValue])];
              // list arg
              NSArray<NSNumber*>* locationsRefArray = (NSArray<NSNumber*> *) args[@"locations"];
              NSMutableArray<CLLocation*>* locations = [NSMutableArray arrayWithCapacity:locationsRefArray.count];
              for (int i = 0; i < locationsRefArray.count; i++) {
                  CLLocation* item = (CLLocation*) HEAP[[locationsRefArray objectAtIndex:i]];
                  [locations addObject:item];
              }
              // list arg
              NSArray<NSNumber*>* tracePointsRefArray = (NSArray<NSNumber*> *) args[@"tracePoints"];
              NSMutableArray<MATracePoint*>* tracePoints = [NSMutableArray arrayWithCapacity:tracePointsRefArray.count];
              for (int i = 0; i < tracePointsRefArray.count; i++) {
                  MATracePoint* item = (MATracePoint*) HEAP[[tracePointsRefArray objectAtIndex:i]];
                  [tracePoints addObject:item];
              }
              // jsonable arg
              double distance = [args[@"distance"] doubleValue];
              // ref arg
              NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
              // ref
              id<MATraceDelegate> ref = (id<MATraceDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref traceManager : manager didTrace: locations correct: tracePoints distance: distance withError: error];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MATraceDelegate::mapViewRequireLocationAuth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              CLLocationManager* locationManager = (CLLocationManager*) HEAP[@([args[@"locationManager"] integerValue])];
      
              // ref
              id<MATraceDelegate> ref = (id<MATraceDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapViewRequireLocationAuth : locationManager];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MATraceManager::sharedInstance_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
        
      
              // invoke native method
              MATraceManager* result = [MATraceManager sharedInstance];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MATraceManager::start_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MATraceManager* ref = (MATraceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref start ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MATraceManager::stop_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MATraceManager* ref = (MATraceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref stop ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMultiPointOverlayRendererDelegate::multiPointOverlayRendererDidItemTapped_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMultiPointOverlayRenderer* renderer = (MAMultiPointOverlayRenderer*) HEAP[@([args[@"renderer"] integerValue])];
              // ref arg
              MAMultiPointItem* item = (MAMultiPointItem*) HEAP[@([args[@"item"] integerValue])];
      
              // ref
              id<MAMultiPointOverlayRendererDelegate> ref = (id<MAMultiPointOverlayRendererDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref multiPointOverlayRenderer : renderer didItemTapped: item];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMultiPointOverlayRenderer::initWithMultiPointOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMultiPointOverlay* multiPointOverlay = (MAMultiPointOverlay*) HEAP[@([args[@"multiPointOverlay"] integerValue])];
      
              // ref
              MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAMultiPointOverlayRenderer* result = [ref initWithMultiPointOverlay: multiPointOverlay];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAPolylineRenderer::initWithPolyline_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAPolyline* polyline = (MAPolyline*) HEAP[@([args[@"polyline"] integerValue])];
      
              // ref
              MAPolylineRenderer* ref = (MAPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAPolylineRenderer* result = [ref initWithPolyline: polyline];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnnotationMoveAnimation::name_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSString* result = [ref name];
      
              // result
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnnotationMoveAnimation::coordinates_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              CLLocationCoordinate2D* result = [ref coordinates];
      
              // result
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D*)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnnotationMoveAnimation::count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSUInteger result = [ref count];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnnotationMoveAnimation::duration_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              CGFloat result = [ref duration];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnnotationMoveAnimation::elapsedTime_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              CGFloat result = [ref elapsedTime];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnnotationMoveAnimation::cancel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cancel ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnnotationMoveAnimation::isCancelled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref isCancelled];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnnotationMoveAnimation::passedPointCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSInteger result = [ref passedPointCount];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnnotationView::setSelectedAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              BOOL selected = [args[@"selected"] boolValue];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setSelected : selected animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnnotationView::initWithAnnotationReuseIdentifier_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
              // jsonable arg
              NSString* reuseIdentifier = (NSString*) args[@"reuseIdentifier"];
      
              // ref
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              id result = [ref initWithAnnotation: annotation reuseIdentifier: reuseIdentifier];
      
              // result
              // return a ref
              HEAP[@(((NSObject*) result).hash)] = result;
              NSNumber* jsonableResult = @(((NSObject*) result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnnotationView::prepareForReuse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref prepareForReuse ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAAnnotationView::setDragStateAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              MAAnnotationViewDragState newDragState = (MAAnnotationViewDragState) [args[@"newDragState"] integerValue];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setDragState : newDragState animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MATileOverlay::initWithURLTemplate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* URLTemplate = (NSString*) args[@"URLTemplate"];
      
              // ref
              MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              id result = [ref initWithURLTemplate: URLTemplate];
      
              // result
              // return a ref
              HEAP[@(((NSObject*) result).hash)] = result;
              NSNumber* jsonableResult = @(((NSObject*) result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MATileOverlay::loadTileAtPathResult_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* pathValue = (NSValue*) HEAP[@([args[@"path"] integerValue])];
              MATileOverlayPath path;
              [pathValue getValue:&path];
        
      
              // ref
              MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref loadTileAtPath : path result: ^(NSData* tileData, NSError* error) {
                  FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:@"MATileOverlay::loadTileAtPathResult::Callback"
                            binaryMessenger:[self->_registrar messenger]];
        
                  // print log
                  if (enableLog) {
                      NSLog(@"");
                  }
        
                  // 构造可以直接传输的参数
                  // ref callback arg
                  NSNumber* argtileData = @(tileData.hash);
                  HEAP[argtileData] = tileData;
                  // ref callback arg
                  NSNumber* argerror = @(error.hash);
                  HEAP[argerror] = error;
        
                  [channel invokeMethod:@"Callback::void|NSData tileData, NSError error::void|NSData tileData, NSError error" arguments:@{@"tileData": argtileData, @"error": argerror}];
        
              }];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MATileOverlay::cancelLoadOfTileAtPath_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* pathValue = (NSValue*) HEAP[@([args[@"path"] integerValue])];
              MATileOverlayPath path;
              [pathValue getValue:&path];
      
              // ref
              MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cancelLoadOfTileAtPath : path];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MACustomCalloutView::initWithCustomView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              UIView* customView = (UIView*) HEAP[@([args[@"customView"] integerValue])];
      
              // ref
              MACustomCalloutView* ref = (MACustomCalloutView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              id result = [ref initWithCustomView: customView];
      
              // result
              // return a ref
              HEAP[@(((NSObject*) result).hash)] = result;
              NSNumber* jsonableResult = @(((NSObject*) result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOfflineMap::sharedOfflineMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
        
      
              // invoke native method
              MAOfflineMap* result = [MAOfflineMap sharedOfflineMap];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOfflineMap::setupWithCompletionBlock_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setupWithCompletionBlock : ^(BOOL setupSuccess) {
                  FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:@"MAOfflineMap::setupWithCompletionBlock::Callback"
                            binaryMessenger:[self->_registrar messenger]];
        
                  // print log
                  if (enableLog) {
                      NSLog(@"");
                  }
        
                  // 构造可以直接传输的参数
                  // primitive callback arg
                  NSNumber* argsetupSuccess = @(setupSuccess);
        
                  [channel invokeMethod:@"Callback::void|BOOL setupSuccess::void|BOOL setupSuccess" arguments:@{@"setupSuccess": argsetupSuccess}];
        
              }];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOfflineMap::downloadItemShouldContinueWhenAppEntersBackgrounddownloadBlock_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAOfflineItem* item = (MAOfflineItem*) HEAP[@([args[@"item"] integerValue])];
              // jsonable arg
              BOOL shouldContinueWhenAppEntersBackground = [args[@"shouldContinueWhenAppEntersBackground"] boolValue];
        
      
              // ref
              MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref downloadItem : item shouldContinueWhenAppEntersBackground: shouldContinueWhenAppEntersBackground downloadBlock: ^(MAOfflineItem* downloadItem, MAOfflineMapDownloadStatus downloadStatus, id info) {
                  FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:@"MAOfflineMap::downloadItemShouldContinueWhenAppEntersBackgrounddownloadBlock::Callback"
                            binaryMessenger:[self->_registrar messenger]];
        
                  // print log
                  if (enableLog) {
                      NSLog(@"");
                  }
        
                  // 构造可以直接传输的参数
                  // ref callback arg
                  NSNumber* argdownloadItem = @(downloadItem.hash);
                  HEAP[argdownloadItem] = downloadItem;
                  // enum callback arg
                  NSNumber* argdownloadStatus = @((NSInteger) downloadStatus);
                  // ref callback arg
                  NSNumber* arginfo = @(((NSObject*) info).hash);
                  HEAP[arginfo] = ((NSObject*) info);
        
                  [channel invokeMethod:@"Callback::MAOfflineMapDownloadBlock::MAOfflineMapDownloadBlock" arguments:@{@"downloadItem": argdownloadItem, @"downloadStatus": argdownloadStatus, @"info": arginfo}];
        
              }];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOfflineMap::isDownloadingForItem_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAOfflineItem* item = (MAOfflineItem*) HEAP[@([args[@"item"] integerValue])];
      
              // ref
              MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref isDownloadingForItem: item];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOfflineMap::pauseItem_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAOfflineItem* item = (MAOfflineItem*) HEAP[@([args[@"item"] integerValue])];
      
              // ref
              MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref pauseItem: item];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOfflineMap::deleteItem_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAOfflineItem* item = (MAOfflineItem*) HEAP[@([args[@"item"] integerValue])];
      
              // ref
              MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref deleteItem : item];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOfflineMap::cancelAll_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref cancelAll ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOfflineMap::clearDisk_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref clearDisk ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOfflineMap::checkNewestVersion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref checkNewestVersion : ^(BOOL hasNewestVersion) {
                  FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:@"MAOfflineMap::checkNewestVersion::Callback"
                            binaryMessenger:[self->_registrar messenger]];
        
                  // print log
                  if (enableLog) {
                      NSLog(@"");
                  }
        
                  // 构造可以直接传输的参数
                  // primitive callback arg
                  NSNumber* arghasNewestVersion = @(hasNewestVersion);
        
                  [channel invokeMethod:@"Callback::MAOfflineMapNewestVersionBlock::MAOfflineMapNewestVersionBlock" arguments:@{@"hasNewestVersion": arghasNewestVersion}];
        
              }];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MACircleRenderer::initWithCircle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MACircle* circle = (MACircle*) HEAP[@([args[@"circle"] integerValue])];
      
              // ref
              MACircleRenderer* ref = (MACircleRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MACircleRenderer* result = [ref initWithCircle: circle];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleOverlayRenderer::initWithParticleOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAParticleOverlay* particleOverlay = (MAParticleOverlay*) HEAP[@([args[@"particleOverlay"] integerValue])];
      
              // ref
              MAParticleOverlayRenderer* ref = (MAParticleOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAParticleOverlayRenderer* result = [ref initWithParticleOverlay: particleOverlay];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleVelocityGenerate::getX_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              id<MAParticleVelocityGenerate> ref = (id<MAParticleVelocityGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              CGFloat result = [ref getX];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleVelocityGenerate::getY_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              id<MAParticleVelocityGenerate> ref = (id<MAParticleVelocityGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              CGFloat result = [ref getY];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleVelocityGenerate::getZ_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              id<MAParticleVelocityGenerate> ref = (id<MAParticleVelocityGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              CGFloat result = [ref getZ];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleRandomVelocityGenerate::initWithBoundaryValueX1Y1Z1X2Y2Z2_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              float x1 = [args[@"x1"] floatValue];
              // jsonable arg
              float y1 = [args[@"y1"] floatValue];
              // jsonable arg
              float z1 = [args[@"z1"] floatValue];
              // jsonable arg
              float x2 = [args[@"x2"] floatValue];
              // jsonable arg
              float y2 = [args[@"y2"] floatValue];
              // jsonable arg
              float z2 = [args[@"z2"] floatValue];
      
              // ref
              MAParticleRandomVelocityGenerate* ref = (MAParticleRandomVelocityGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAParticleRandomVelocityGenerate* result = [ref initWithBoundaryValueX1: x1 Y1: y1 Z1: z1 X2: x2 Y2: y2 Z2: z2];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleRandomColorGenerate::initWithBoundaryColorR1G1B1A1R2G2B2A2_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              float r1 = [args[@"r1"] floatValue];
              // jsonable arg
              float g1 = [args[@"g1"] floatValue];
              // jsonable arg
              float b1 = [args[@"b1"] floatValue];
              // jsonable arg
              float a1 = [args[@"a1"] floatValue];
              // jsonable arg
              float r2 = [args[@"r2"] floatValue];
              // jsonable arg
              float g2 = [args[@"g2"] floatValue];
              // jsonable arg
              float b2 = [args[@"b2"] floatValue];
              // jsonable arg
              float a2 = [args[@"a2"] floatValue];
      
              // ref
              MAParticleRandomColorGenerate* ref = (MAParticleRandomColorGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAParticleRandomColorGenerate* result = [ref initWithBoundaryColorR1: r1 G1: g1 B1: b1 A1: a1 R2: r2 G2: g2 B2: b2 A2: a2];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleRotationGenerate::getRotate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              id<MAParticleRotationGenerate> ref = (id<MAParticleRotationGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              float result = [ref getRotate];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleConstantRotationGenerate::initWithRotate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              float rotate = [args[@"rotate"] floatValue];
      
              // ref
              MAParticleConstantRotationGenerate* ref = (MAParticleConstantRotationGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAParticleConstantRotationGenerate* result = [ref initWithRotate: rotate];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleSizeGenerate::getSizeX_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              float timeFrame = [args[@"timeFrame"] floatValue];
      
              // ref
              id<MAParticleSizeGenerate> ref = (id<MAParticleSizeGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              float result = [ref getSizeX: timeFrame];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleSizeGenerate::getSizeY_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              float timeFrame = [args[@"timeFrame"] floatValue];
      
              // ref
              id<MAParticleSizeGenerate> ref = (id<MAParticleSizeGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              float result = [ref getSizeY: timeFrame];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleSizeGenerate::getSizeZ_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              float timeFrame = [args[@"timeFrame"] floatValue];
      
              // ref
              id<MAParticleSizeGenerate> ref = (id<MAParticleSizeGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              float result = [ref getSizeZ: timeFrame];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleCurveSizeGenerate::initWithCurveXYZ_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              float x = [args[@"x"] floatValue];
              // jsonable arg
              float y = [args[@"y"] floatValue];
              // jsonable arg
              float z = [args[@"z"] floatValue];
      
              // ref
              MAParticleCurveSizeGenerate* ref = (MAParticleCurveSizeGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAParticleCurveSizeGenerate* result = [ref initWithCurveX: x Y: y Z: z];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleEmissionModule::initWithEmissionRateRateTime_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              int rate = [args[@"rate"] intValue];
              // jsonable arg
              int rateTime = [args[@"rateTime"] intValue];
      
              // ref
              MAParticleEmissionModule* ref = (MAParticleEmissionModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAParticleEmissionModule* result = [ref initWithEmissionRate: rate rateTime: rateTime];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleShapeModule::isRatioEnable_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              id<MAParticleShapeModule> ref = (id<MAParticleShapeModule>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref isRatioEnable];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleSinglePointShapeModule::initWithShapeXYZuseRatio_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              float x = [args[@"x"] floatValue];
              // jsonable arg
              float y = [args[@"y"] floatValue];
              // jsonable arg
              float z = [args[@"z"] floatValue];
              // jsonable arg
              BOOL isUseRatio = [args[@"isUseRatio"] boolValue];
      
              // ref
              MAParticleSinglePointShapeModule* ref = (MAParticleSinglePointShapeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAParticleSinglePointShapeModule* result = [ref initWithShapeX: x Y: y Z: z useRatio: isUseRatio];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleRectShapeModule::initWithLeftToprightbottomuseRatio_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              float left = [args[@"left"] floatValue];
              // jsonable arg
              float top = [args[@"top"] floatValue];
              // jsonable arg
              float right = [args[@"right"] floatValue];
              // jsonable arg
              float bottom = [args[@"bottom"] floatValue];
              // jsonable arg
              BOOL isUseRatio = [args[@"isUseRatio"] boolValue];
      
              // ref
              MAParticleRectShapeModule* ref = (MAParticleRectShapeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAParticleRectShapeModule* result = [ref initWithLeft: left top: top right: right bottom: bottom useRatio: isUseRatio];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleOverLifeModule::setVelocityOverLife_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAParticleVelocityGenerate> velocity = (id<MAParticleVelocityGenerate>) HEAP[@([args[@"velocity"] integerValue])];
      
              // ref
              MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setVelocityOverLife : velocity];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleOverLifeModule::setRotationOverLife_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAParticleRotationGenerate> rotation = (id<MAParticleRotationGenerate>) HEAP[@([args[@"rotation"] integerValue])];
      
              // ref
              MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setRotationOverLife : rotation];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleOverLifeModule::setSizeOverLife_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAParticleSizeGenerate> size = (id<MAParticleSizeGenerate>) HEAP[@([args[@"size"] integerValue])];
      
              // ref
              MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setSizeOverLife : size];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAParticleOverLifeModule::setColorOverLife_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAParticleColorGenerate> color = (id<MAParticleColorGenerate>) HEAP[@([args[@"color"] integerValue])];
      
              // ref
              MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setColorOverLife : color];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOverlayRenderer::initWithOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
      
              // ref
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAOverlayRenderer* result = [ref initWithOverlay: overlay];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOverlayRenderer::getOffsetPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAMapPoint result = [ref getOffsetPoint];
      
              // result
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOverlayRenderer::getMapZoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              CGFloat result = [ref getMapZoomLevel];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOverlayRenderer::glPointForMapPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* mapPointValue = (NSValue*) HEAP[@([args[@"mapPoint"] integerValue])];
              MAMapPoint mapPoint;
              [mapPointValue getValue:&mapPoint];
      
              // ref
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              CGPoint result = [ref glPointForMapPoint: mapPoint];
      
              // result
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOverlayRenderer::glPointsForMapPointsCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* mapPointsRefIdArray = (NSArray*) args[@"mapPoints"];
              MAMapPoint mapPoints[mapPointsRefIdArray.count];
        
              for (int i = 0; i < mapPointsRefIdArray.count; i++) {
                  NSValue* mapPointsValue = (NSValue*) HEAP[[mapPointsRefIdArray objectAtIndex:i]];
                  MAMapPoint mapPointsItem;
                  [mapPointsValue getValue:&mapPointsItem];
                  mapPoints[i] = mapPointsItem;
              }
              // jsonable arg
              NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
              // ref
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              CGPoint* result = [ref glPointsForMapPoints: mapPoints count: count];
      
              // result
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint*)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOverlayRenderer::glWidthForWindowWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              CGFloat windowWidth = [args[@"windowWidth"] floatValue];
      
              // ref
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              CGFloat result = [ref glWidthForWindowWidth: windowWidth];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOverlayRenderer::renderLinesWithPointsPointCountstrokeColorlineWidthlooped_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
              CGPoint points[pointsRefIdArray.count];
        
              for (int i = 0; i < pointsRefIdArray.count; i++) {
                  NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                  CGPoint pointsItem;
                  [pointsValue getValue:&pointsItem];
                  points[i] = pointsItem;
              }
              // jsonable arg
              NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
              // ref arg
              UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
              // jsonable arg
              CGFloat lineWidth = [args[@"lineWidth"] floatValue];
              // jsonable arg
              BOOL looped = [args[@"looped"] boolValue];
      
              // ref
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOverlayRenderer::renderLinesWithPointsPointCountstrokeColorlineWidthloopedLineJoinTypeLineCapTypelineDash_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
              CGPoint points[pointsRefIdArray.count];
        
              for (int i = 0; i < pointsRefIdArray.count; i++) {
                  NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                  CGPoint pointsItem;
                  [pointsValue getValue:&pointsItem];
                  points[i] = pointsItem;
              }
              // jsonable arg
              NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
              // ref arg
              UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
              // jsonable arg
              CGFloat lineWidth = [args[@"lineWidth"] floatValue];
              // jsonable arg
              BOOL looped = [args[@"looped"] boolValue];
              // enum arg
              MALineJoinType lineJoinType = (MALineJoinType) [args[@"lineJoinType"] integerValue];
              // enum arg
              MALineCapType lineCapType = (MALineCapType) [args[@"lineCapType"] integerValue];
              // enum arg
              MALineDashType lineDash = (MALineDashType) [args[@"lineDash"] integerValue];
      
              // ref
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped LineJoinType: lineJoinType LineCapType: lineCapType lineDash: lineDash];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOverlayRenderer::renderTexturedLinesWithPointsPointCountlineWidthtextureIDsdrawStyleIndexeslooped_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
              CGPoint points[pointsRefIdArray.count];
        
              for (int i = 0; i < pointsRefIdArray.count; i++) {
                  NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                  CGPoint pointsItem;
                  [pointsValue getValue:&pointsItem];
                  points[i] = pointsItem;
              }
              // jsonable arg
              NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
              // jsonable arg
              CGFloat lineWidth = [args[@"lineWidth"] floatValue];
              // list arg
              NSArray<NSNumber*>* textureIDsRefArray = (NSArray<NSNumber*> *) args[@"textureIDs"];
              NSMutableArray<NSArray*>* textureIDs = [NSMutableArray arrayWithCapacity:textureIDsRefArray.count];
              for (int i = 0; i < textureIDsRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[textureIDsRefArray objectAtIndex:i]];
                  [textureIDs addObject:item];
              }
              // list arg
              NSArray<NSNumber*>* drawStyleIndexesRefArray = (NSArray<NSNumber*> *) args[@"drawStyleIndexes"];
              NSMutableArray<NSArray*>* drawStyleIndexes = [NSMutableArray arrayWithCapacity:drawStyleIndexesRefArray.count];
              for (int i = 0; i < drawStyleIndexesRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[drawStyleIndexesRefArray objectAtIndex:i]];
                  [drawStyleIndexes addObject:item];
              }
              // jsonable arg
              BOOL looped = [args[@"looped"] boolValue];
      
              // ref
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref renderTexturedLinesWithPoints : points pointCount: pointCount lineWidth: lineWidth textureIDs: textureIDs drawStyleIndexes: drawStyleIndexes looped: looped];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOverlayRenderer::renderLinesWithPointsPointCountstrokeColorsdrawStyleIndexesisGradientlineWidthloopedLineJoinTypeLineCapTypelineDash_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
              CGPoint points[pointsRefIdArray.count];
        
              for (int i = 0; i < pointsRefIdArray.count; i++) {
                  NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                  CGPoint pointsItem;
                  [pointsValue getValue:&pointsItem];
                  points[i] = pointsItem;
              }
              // jsonable arg
              NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
              // list arg
              NSArray<NSNumber*>* strokeColorsRefArray = (NSArray<NSNumber*> *) args[@"strokeColors"];
              NSMutableArray<NSArray*>* strokeColors = [NSMutableArray arrayWithCapacity:strokeColorsRefArray.count];
              for (int i = 0; i < strokeColorsRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[strokeColorsRefArray objectAtIndex:i]];
                  [strokeColors addObject:item];
              }
              // list arg
              NSArray<NSNumber*>* drawStyleIndexesRefArray = (NSArray<NSNumber*> *) args[@"drawStyleIndexes"];
              NSMutableArray<NSArray*>* drawStyleIndexes = [NSMutableArray arrayWithCapacity:drawStyleIndexesRefArray.count];
              for (int i = 0; i < drawStyleIndexesRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[drawStyleIndexesRefArray objectAtIndex:i]];
                  [drawStyleIndexes addObject:item];
              }
              // jsonable arg
              BOOL isGradient = [args[@"isGradient"] boolValue];
              // jsonable arg
              CGFloat lineWidth = [args[@"lineWidth"] floatValue];
              // jsonable arg
              BOOL looped = [args[@"looped"] boolValue];
              // enum arg
              MALineJoinType lineJoinType = (MALineJoinType) [args[@"lineJoinType"] integerValue];
              // enum arg
              MALineCapType lineCapType = (MALineCapType) [args[@"lineCapType"] integerValue];
              // enum arg
              MALineDashType lineDash = (MALineDashType) [args[@"lineDash"] integerValue];
      
              // ref
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref renderLinesWithPoints : points pointCount: pointCount strokeColors: strokeColors drawStyleIndexes: drawStyleIndexes isGradient: isGradient lineWidth: lineWidth looped: looped LineJoinType: lineJoinType LineCapType: lineCapType lineDash: lineDash];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOverlayRenderer::renderRegionWithPointsPointCountfillColorusingTriangleFan_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
              CGPoint points[pointsRefIdArray.count];
        
              for (int i = 0; i < pointsRefIdArray.count; i++) {
                  NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                  CGPoint pointsItem;
                  [pointsValue getValue:&pointsItem];
                  points[i] = pointsItem;
              }
              // jsonable arg
              NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
              // ref arg
              UIColor* fillColor = (UIColor*) HEAP[@([args[@"fillColor"] integerValue])];
              // jsonable arg
              BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
      
              // ref
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref renderRegionWithPoints : points pointCount: pointCount fillColor: fillColor usingTriangleFan: usingTriangleFan];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOverlayRenderer::renderStrokedRegionWithPointsPointCountfillColorstrokeColorstrokeLineWidthstrokeLineJoinTypestrokeLineDashusingTriangleFan_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
              CGPoint points[pointsRefIdArray.count];
        
              for (int i = 0; i < pointsRefIdArray.count; i++) {
                  NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
                  CGPoint pointsItem;
                  [pointsValue getValue:&pointsItem];
                  points[i] = pointsItem;
              }
              // jsonable arg
              NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
              // ref arg
              UIColor* fillColor = (UIColor*) HEAP[@([args[@"fillColor"] integerValue])];
              // ref arg
              UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
              // jsonable arg
              CGFloat strokeLineWidth = [args[@"strokeLineWidth"] floatValue];
              // enum arg
              MALineJoinType strokeLineJoinType = (MALineJoinType) [args[@"strokeLineJoinType"] integerValue];
              // enum arg
              MALineDashType strokeLineDash = (MALineDashType) [args[@"strokeLineDash"] integerValue];
              // jsonable arg
              BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
      
              // ref
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref renderStrokedRegionWithPoints : points pointCount: pointCount fillColor: fillColor strokeColor: strokeColor strokeLineWidth: strokeLineWidth strokeLineJoinType: strokeLineJoinType strokeLineDash: strokeLineDash usingTriangleFan: usingTriangleFan];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOverlayRenderer::glRender_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref glRender ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOverlayRenderer::setNeedsUpdate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setNeedsUpdate ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMultiPointOverlay::initWithMultiPointItems_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray<NSNumber*>* itemsRefArray = (NSArray<NSNumber*> *) args[@"items"];
              NSMutableArray<MAMultiPointItem*>* items = [NSMutableArray arrayWithCapacity:itemsRefArray.count];
              for (int i = 0; i < itemsRefArray.count; i++) {
                  MAMultiPointItem* item = (MAMultiPointItem*) HEAP[[itemsRefArray objectAtIndex:i]];
                  [items addObject:item];
              }
      
              // ref
              MAMultiPointOverlay* ref = (MAMultiPointOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAMultiPointOverlay* result = [ref initWithMultiPointItems: items];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MACustomBuildingOverlayOption::optionWithCoordinatesCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
              CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
              for (int i = 0; i < coordsRefIdArray.count; i++) {
                  NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
                  CLLocationCoordinate2D coordsItem;
                  [coordsValue getValue:&coordsItem];
                  coords[i] = coordsItem;
              }
              // jsonable arg
              NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
              // ref
        
      
              // invoke native method
              MACustomBuildingOverlayOption* result = [MACustomBuildingOverlayOption optionWithCoordinates: coords count: count];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MACustomBuildingOverlayOption::setOptionWithCoordinatesCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
              CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
              for (int i = 0; i < coordsRefIdArray.count; i++) {
                  NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:i]];
                  CLLocationCoordinate2D coordsItem;
                  [coordsValue getValue:&coordsItem];
                  coords[i] = coordsItem;
              }
              // jsonable arg
              NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
              // ref
              MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref setOptionWithCoordinates: coords count: count];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MACustomBuildingOverlay::addCustomOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MACustomBuildingOverlayOption* option = (MACustomBuildingOverlayOption*) HEAP[@([args[@"option"] integerValue])];
      
              // ref
              MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref addCustomOption : option];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MACustomBuildingOverlay::removeCustomOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MACustomBuildingOverlayOption* option = (MACustomBuildingOverlayOption*) HEAP[@([args[@"option"] integerValue])];
      
              // ref
              MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref removeCustomOption : option];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAArc::arcWithStartCoordinatePassedCoordinateendCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* startCoordinateValue = (NSValue*) HEAP[@([args[@"startCoordinate"] integerValue])];
              CLLocationCoordinate2D startCoordinate;
              [startCoordinateValue getValue:&startCoordinate];
              // struct arg
              NSValue* passedCoordinateValue = (NSValue*) HEAP[@([args[@"passedCoordinate"] integerValue])];
              CLLocationCoordinate2D passedCoordinate;
              [passedCoordinateValue getValue:&passedCoordinate];
              // struct arg
              NSValue* endCoordinateValue = (NSValue*) HEAP[@([args[@"endCoordinate"] integerValue])];
              CLLocationCoordinate2D endCoordinate;
              [endCoordinateValue getValue:&endCoordinate];
      
              // ref
        
      
              // invoke native method
              MAArc* result = [MAArc arcWithStartCoordinate: startCoordinate passedCoordinate: passedCoordinate endCoordinate: endCoordinate];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::setRegionAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
              MACoordinateRegion region;
              [regionValue getValue:&region];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setRegion : region animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::regionThatFits_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
              MACoordinateRegion region;
              [regionValue getValue:&region];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MACoordinateRegion result = [ref regionThatFits: region];
      
              // result
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::setVisibleMapRectAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
              MAMapRect mapRect;
              [mapRectValue getValue:&mapRect];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setVisibleMapRect : mapRect animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::mapRectThatFits_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
              MAMapRect mapRect;
              [mapRectValue getValue:&mapRect];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAMapRect result = [ref mapRectThatFits: mapRect];
      
              // result
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::mapRectThatFitsEdgePadding_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
              MAMapRect mapRect;
              [mapRectValue getValue:&mapRect];
              // struct arg
              NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
              UIEdgeInsets insets;
              [insetsValue getValue:&insets];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAMapRect result = [ref mapRectThatFits: mapRect edgePadding: insets];
      
              // result
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::setVisibleMapRectEdgePaddinganimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
              MAMapRect mapRect;
              [mapRectValue getValue:&mapRect];
              // struct arg
              NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
              UIEdgeInsets insets;
              [insetsValue getValue:&insets];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setVisibleMapRect : mapRect edgePadding: insets animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::setCenterCoordinateAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
              CLLocationCoordinate2D coordinate;
              [coordinateValue getValue:&coordinate];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCenterCoordinate : coordinate animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::setZoomLevelAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setZoomLevel : zoomLevel animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::setZoomLevelAtPivotanimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
              // struct arg
              NSValue* pivotValue = (NSValue*) HEAP[@([args[@"pivot"] integerValue])];
              CGPoint pivot;
              [pivotValue getValue:&pivot];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setZoomLevel : zoomLevel atPivot: pivot animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::setRotationDegreeAnimatedduration_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              CGFloat rotationDegree = [args[@"rotationDegree"] floatValue];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
              // jsonable arg
              CFTimeInterval duration = [args[@"duration"] doubleValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setRotationDegree : rotationDegree animated: animated duration: duration];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::setCameraDegreeAnimatedduration_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
              // jsonable arg
              CFTimeInterval duration = [args[@"duration"] doubleValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCameraDegree : cameraDegree animated: animated duration: duration];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::getMapStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAMapStatus* result = [ref getMapStatus];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::setMapStatusAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapStatus* status = (MAMapStatus*) HEAP[@([args[@"status"] integerValue])];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setMapStatus : status animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::setMapStatusAnimatedduration_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapStatus* status = (MAMapStatus*) HEAP[@([args[@"status"] integerValue])];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
              // jsonable arg
              CFTimeInterval duration = [args[@"duration"] doubleValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setMapStatus : status animated: animated duration: duration];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::setCompassImage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              UIImage* image = (UIImage*) HEAP[@([args[@"image"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCompassImage : image];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::takeSnapshotInRectWithCompletionBlock_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
              CGRect rect;
              [rectValue getValue:&rect];
        
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref takeSnapshotInRect : rect withCompletionBlock: ^(UIImage* resultImage, NSInteger state) {
                  FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:@"MAMapView::takeSnapshotInRectWithCompletionBlock::Callback"
                            binaryMessenger:[self->_registrar messenger]];
        
                  // print log
                  if (enableLog) {
                      NSLog(@"");
                  }
        
                  // 构造可以直接传输的参数
                  // ref callback arg
                  NSNumber* argresultImage = @(resultImage.hash);
                  HEAP[argresultImage] = resultImage;
                  // primitive callback arg
                  NSNumber* argstate = @(state);
        
                  [channel invokeMethod:@"Callback::void|UIImage resultImage, NSInteger state::void|UIImage resultImage, NSInteger state" arguments:@{@"resultImage": argresultImage, @"state": argstate}];
        
              }];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::metersPerPointForZoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              double result = [ref metersPerPointForZoomLevel: zoomLevel];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::convertCoordinateToPointToView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
              CLLocationCoordinate2D coordinate;
              [coordinateValue getValue:&coordinate];
              // ref arg
              UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              CGPoint result = [ref convertCoordinate: coordinate toPointToView: view];
      
              // result
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::convertPointToCoordinateFromView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
              CGPoint point;
              [pointValue getValue:&point];
              // ref arg
              UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              CLLocationCoordinate2D result = [ref convertPoint: point toCoordinateFromView: view];
      
              // result
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::convertRegionToRectToView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
              MACoordinateRegion region;
              [regionValue getValue:&region];
              // ref arg
              UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              CGRect result = [ref convertRegion: region toRectToView: view];
      
              // result
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGRect)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::convertRectToRegionFromView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
              CGRect rect;
              [rectValue getValue:&rect];
              // ref arg
              UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MACoordinateRegion result = [ref convertRect: rect toRegionFromView: view];
      
              // result
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::reloadMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref reloadMap ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::clearDisk_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref clearDisk ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::reloadInternalTexture_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref reloadInternalTexture ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::mapContentApprovalNumber_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSString* result = [ref mapContentApprovalNumber];
      
              // result
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::satelliteImageApprovalNumber_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSString* result = [ref satelliteImageApprovalNumber];
      
              // result
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::forceRefresh_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref forceRefresh ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::addAnnotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref addAnnotation : annotation];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::addAnnotations_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
              NSMutableArray<NSArray*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
              for (int i = 0; i < annotationsRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[annotationsRefArray objectAtIndex:i]];
                  [annotations addObject:item];
              }
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref addAnnotations : annotations];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::removeAnnotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref removeAnnotation : annotation];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::removeAnnotations_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
              NSMutableArray<NSArray*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
              for (int i = 0; i < annotationsRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[annotationsRefArray objectAtIndex:i]];
                  [annotations addObject:item];
              }
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref removeAnnotations : annotations];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::viewForAnnotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAAnnotationView* result = [ref viewForAnnotation: annotation];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::dequeueReusableAnnotationViewWithIdentifier_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* identifier = (NSString*) args[@"identifier"];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAAnnotationView* result = [ref dequeueReusableAnnotationViewWithIdentifier: identifier];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::selectAnnotationAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref selectAnnotation : annotation animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::deselectAnnotationAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref deselectAnnotation : annotation animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::showAnnotationsAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
              NSMutableArray<NSArray*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
              for (int i = 0; i < annotationsRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[annotationsRefArray objectAtIndex:i]];
                  [annotations addObject:item];
              }
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref showAnnotations : annotations animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::showAnnotationsEdgePaddinganimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
              NSMutableArray<NSArray*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
              for (int i = 0; i < annotationsRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[annotationsRefArray objectAtIndex:i]];
                  [annotations addObject:item];
              }
              // struct arg
              NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
              UIEdgeInsets insets;
              [insetsValue getValue:&insets];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref showAnnotations : annotations edgePadding: insets animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::setUserTrackingModeAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              MAUserTrackingMode mode = (MAUserTrackingMode) [args[@"mode"] integerValue];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setUserTrackingMode : mode animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::updateUserLocationRepresentation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAUserLocationRepresentation* representation = (MAUserLocationRepresentation*) HEAP[@([args[@"representation"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref updateUserLocationRepresentation : representation];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::overlaysInLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // enum arg
              MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSArray* result = [ref overlaysInLevel: level];
      
              // result
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::addOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref addOverlay : overlay];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::addOverlays_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
              NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
              for (int i = 0; i < overlaysRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
                  [overlays addObject:item];
              }
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref addOverlays : overlays];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::addOverlayLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
              // enum arg
              MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref addOverlay : overlay level: level];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::addOverlaysLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
              NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
              for (int i = 0; i < overlaysRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
                  [overlays addObject:item];
              }
              // enum arg
              MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref addOverlays : overlays level: level];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::removeOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref removeOverlay : overlay];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::removeOverlays_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
              NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
              for (int i = 0; i < overlaysRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
                  [overlays addObject:item];
              }
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref removeOverlays : overlays];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::insertOverlayAtIndexlevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
              // jsonable arg
              NSUInteger index = [args[@"index"] unsignedIntegerValue];
              // enum arg
              MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref insertOverlay : overlay atIndex: index level: level];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::insertOverlayAboveOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
              // ref arg
              id<MAOverlay> sibling = (id<MAOverlay>) HEAP[@([args[@"sibling"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref insertOverlay : overlay aboveOverlay: sibling];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::insertOverlayBelowOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
              // ref arg
              id<MAOverlay> sibling = (id<MAOverlay>) HEAP[@([args[@"sibling"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref insertOverlay : overlay belowOverlay: sibling];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::insertOverlayAtIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
              // jsonable arg
              NSUInteger index = [args[@"index"] unsignedIntegerValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref insertOverlay : overlay atIndex: index];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::exchangeOverlayAtIndexWithOverlayAtIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSUInteger index1 = [args[@"index1"] unsignedIntegerValue];
              // jsonable arg
              NSUInteger index2 = [args[@"index2"] unsignedIntegerValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref exchangeOverlayAtIndex : index1 withOverlayAtIndex: index2];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::exchangeOverlayAtIndexWithOverlayAtIndexatLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSUInteger index1 = [args[@"index1"] unsignedIntegerValue];
              // jsonable arg
              NSUInteger index2 = [args[@"index2"] unsignedIntegerValue];
              // enum arg
              MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref exchangeOverlayAtIndex : index1 withOverlayAtIndex: index2 atLevel: level];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::exchangeOverlayWithOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAOverlay> overlay1 = (id<MAOverlay>) HEAP[@([args[@"overlay1"] integerValue])];
              // ref arg
              id<MAOverlay> overlay2 = (id<MAOverlay>) HEAP[@([args[@"overlay2"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref exchangeOverlay : overlay1 withOverlay: overlay2];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::rendererForOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAOverlayRenderer* result = [ref rendererForOverlay: overlay];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::showOverlaysAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
              NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
              for (int i = 0; i < overlaysRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
                  [overlays addObject:item];
              }
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref showOverlays : overlays animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::showOverlaysEdgePaddinganimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
              NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
              for (int i = 0; i < overlaysRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
                  [overlays addObject:item];
              }
              // struct arg
              NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
              UIEdgeInsets insets;
              [insetsValue getValue:&insets];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref showOverlays : overlays edgePadding: insets animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::setIndoorMapControlOrigin_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* originValue = (NSValue*) HEAP[@([args[@"origin"] integerValue])];
              CGPoint origin;
              [originValue getValue:&origin];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setIndoorMapControlOrigin : origin];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::setCurrentIndoorMapFloorIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSInteger floorIndex = [args[@"floorIndex"] integerValue];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCurrentIndoorMapFloorIndex : floorIndex];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::clearIndoorMapCache_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref clearIndoorMapCache ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapView::setCustomMapStyleOptions_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapCustomStyleOptions* styleOptions = (MAMapCustomStyleOptions*) HEAP[@([args[@"styleOptions"] integerValue])];
      
              // ref
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref setCustomMapStyleOptions : styleOptions];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewRegionChanged_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapViewRegionChanged : mapView];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewRegionWillChangeAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView regionWillChangeAnimated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewRegionDidChangeAnimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView regionDidChangeAnimated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewMapWillMoveByUser_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // jsonable arg
              BOOL wasUserAction = [args[@"wasUserAction"] boolValue];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView mapWillMoveByUser: wasUserAction];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewMapDidMoveByUser_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // jsonable arg
              BOOL wasUserAction = [args[@"wasUserAction"] boolValue];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView mapDidMoveByUser: wasUserAction];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewMapWillZoomByUser_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // jsonable arg
              BOOL wasUserAction = [args[@"wasUserAction"] boolValue];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView mapWillZoomByUser: wasUserAction];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewMapDidZoomByUser_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // jsonable arg
              BOOL wasUserAction = [args[@"wasUserAction"] boolValue];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView mapDidZoomByUser: wasUserAction];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewWillStartLoadingMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapViewWillStartLoadingMap : mapView];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidFinishLoadingMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapViewDidFinishLoadingMap : mapView];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidFailLoadingMapWithError_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // ref arg
              NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapViewDidFailLoadingMap : mapView withError: error];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewViewForAnnotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // ref arg
              id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAAnnotationView* result = [ref mapView: mapView viewForAnnotation: annotation];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidAddAnnotationViews_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // list arg
              NSArray<NSNumber*>* viewsRefArray = (NSArray<NSNumber*> *) args[@"views"];
              NSMutableArray<NSArray*>* views = [NSMutableArray arrayWithCapacity:viewsRefArray.count];
              for (int i = 0; i < viewsRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[viewsRefArray objectAtIndex:i]];
                  [views addObject:item];
              }
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didAddAnnotationViews: views];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidSelectAnnotationView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // ref arg
              MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didSelectAnnotationView: view];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidDeselectAnnotationView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // ref arg
              MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didDeselectAnnotationView: view];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewWillStartLocatingUser_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapViewWillStartLocatingUser : mapView];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidStopLocatingUser_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapViewDidStopLocatingUser : mapView];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidUpdateUserLocationupdatingLocation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // ref arg
              MAUserLocation* userLocation = (MAUserLocation*) HEAP[@([args[@"userLocation"] integerValue])];
              // jsonable arg
              BOOL updatingLocation = [args[@"updatingLocation"] boolValue];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didUpdateUserLocation: userLocation updatingLocation: updatingLocation];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewRequireLocationAuth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              CLLocationManager* locationManager = (CLLocationManager*) HEAP[@([args[@"locationManager"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapViewRequireLocationAuth : locationManager];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidFailToLocateUserWithError_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // ref arg
              NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didFailToLocateUserWithError: error];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewAnnotationViewdidChangeDragStatefromOldState_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // ref arg
              MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
              // enum arg
              MAAnnotationViewDragState newState = (MAAnnotationViewDragState) [args[@"newState"] integerValue];
              // enum arg
              MAAnnotationViewDragState oldState = (MAAnnotationViewDragState) [args[@"oldState"] integerValue];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView annotationView: view didChangeDragState: newState fromOldState: oldState];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewRendererForOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // ref arg
              id<MAOverlay> overlay = (id<MAOverlay>) HEAP[@([args[@"overlay"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAOverlayRenderer* result = [ref mapView: mapView rendererForOverlay: overlay];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidAddOverlayRenderers_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // list arg
              NSArray<NSNumber*>* overlayRenderersRefArray = (NSArray<NSNumber*> *) args[@"overlayRenderers"];
              NSMutableArray<NSArray*>* overlayRenderers = [NSMutableArray arrayWithCapacity:overlayRenderersRefArray.count];
              for (int i = 0; i < overlayRenderersRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[overlayRenderersRefArray objectAtIndex:i]];
                  [overlayRenderers addObject:item];
              }
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didAddOverlayRenderers: overlayRenderers];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewAnnotationViewcalloutAccessoryControlTapped_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // ref arg
              MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
              // ref arg
              UIControl* control = (UIControl*) HEAP[@([args[@"control"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView annotationView: view calloutAccessoryControlTapped: control];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidAnnotationViewCalloutTapped_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // ref arg
              MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didAnnotationViewCalloutTapped: view];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidAnnotationViewTapped_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // ref arg
              MAAnnotationView* view = (MAAnnotationView*) HEAP[@([args[@"view"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didAnnotationViewTapped: view];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidChangeUserTrackingModeanimated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // enum arg
              MAUserTrackingMode mode = (MAUserTrackingMode) [args[@"mode"] integerValue];
              // jsonable arg
              BOOL animated = [args[@"animated"] boolValue];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didChangeUserTrackingMode: mode animated: animated];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidChangeOpenGLESDisabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // jsonable arg
              BOOL openGLESDisabled = [args[@"openGLESDisabled"] boolValue];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didChangeOpenGLESDisabled: openGLESDisabled];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidTouchPois_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // list arg
              NSArray<NSNumber*>* poisRefArray = (NSArray<NSNumber*> *) args[@"pois"];
              NSMutableArray<NSArray*>* pois = [NSMutableArray arrayWithCapacity:poisRefArray.count];
              for (int i = 0; i < poisRefArray.count; i++) {
                  NSArray* item = (NSArray*) HEAP[[poisRefArray objectAtIndex:i]];
                  [pois addObject:item];
              }
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didTouchPois: pois];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidSingleTappedAtCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // struct arg
              NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
              CLLocationCoordinate2D coordinate;
              [coordinateValue getValue:&coordinate];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didSingleTappedAtCoordinate: coordinate];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidLongPressedAtCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // struct arg
              NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
              CLLocationCoordinate2D coordinate;
              [coordinateValue getValue:&coordinate];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didLongPressedAtCoordinate: coordinate];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapInitComplete_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapInitComplete : mapView];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidIndoorMapShowed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // ref arg
              MAIndoorInfo* indoorInfo = (MAIndoorInfo*) HEAP[@([args[@"indoorInfo"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didIndoorMapShowed: indoorInfo];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidIndoorMapFloorIndexChanged_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // ref arg
              MAIndoorInfo* indoorInfo = (MAIndoorInfo*) HEAP[@([args[@"indoorInfo"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didIndoorMapFloorIndexChanged: indoorInfo];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::mapViewDidIndoorMapHidden_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
              // ref arg
              MAIndoorInfo* indoorInfo = (MAIndoorInfo*) HEAP[@([args[@"indoorInfo"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref mapView : mapView didIndoorMapHidden: indoorInfo];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::offlineDataWillReload_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref offlineDataWillReload : mapView];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAMapViewDelegate::offlineDataDidReload_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAMapView* mapView = (MAMapView*) HEAP[@([args[@"mapView"] integerValue])];
      
              // ref
              id<MAMapViewDelegate> ref = (id<MAMapViewDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref offlineDataDidReload : mapView];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAGroundOverlayRenderer::initWithGroundOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MAGroundOverlay* groundOverlay = (MAGroundOverlay*) HEAP[@([args[@"groundOverlay"] integerValue])];
      
              // ref
              MAGroundOverlayRenderer* ref = (MAGroundOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MAGroundOverlayRenderer* result = [ref initWithGroundOverlay: groundOverlay];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MACustomBuildingOverlayRenderer::initWithCustomBuildingOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              MACustomBuildingOverlay* customBuildingOverlay = (MACustomBuildingOverlay*) HEAP[@([args[@"customBuildingOverlay"] integerValue])];
      
              // ref
              MACustomBuildingOverlayRenderer* ref = (MACustomBuildingOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              MACustomBuildingOverlayRenderer* result = [ref initWithCustomBuildingOverlay: customBuildingOverlay];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"MAOfflineCity::get_cityCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineCity::get_cityCode");
          }
      
          // ref object
          MAOfflineCity* ref = (MAOfflineCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.cityCode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineCity::get_cityName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineCity::get_cityName");
          }
      
          // ref object
          MAOfflineCity* ref = (MAOfflineCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.cityName;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineCity::get_urlString": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineCity::get_urlString");
          }
      
          // ref object
          MAOfflineCity* ref = (MAOfflineCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.urlString;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineCity::get_status": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineCity::get_status");
          }
      
          // ref object
          MAOfflineCity* ref = (MAOfflineCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAOfflineCityStatus result = ref.status;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiPoint::get_points": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPoint::get_points");
          }
      
          // ref object
          MAMultiPoint* ref = (MAMultiPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAMapPoint* result = ref.points;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiPoint::get_pointCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPoint::get_pointCount");
          }
      
          // ref object
          MAMultiPoint* ref = (MAMultiPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSUInteger result = ref.pointCount;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiPoint::get_cross180Longitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPoint::get_cross180Longitude");
          }
      
          // ref object
          MAMultiPoint* ref = (MAMultiPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.cross180Longitude;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAGroundOverlay::get_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAGroundOverlay::get_icon");
          }
      
          // ref object
          MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIImage* result = ref.icon;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAGroundOverlay::get_alpha": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAGroundOverlay::get_alpha");
          }
      
          // ref object
          MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.alpha;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAGroundOverlay::get_zoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAGroundOverlay::get_zoomLevel");
          }
      
          // ref object
          MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.zoomLevel;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAGroundOverlay::get_bounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAGroundOverlay::get_bounds");
          }
      
          // ref object
          MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MACoordinateBounds result = ref.bounds;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateBounds)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAPolygonRenderer::get_polygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPolygonRenderer::get_polygon");
          }
      
          // ref object
          MAPolygonRenderer* ref = (MAPolygonRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAPolygon* result = ref.polygon;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAPinAnnotationView::get_pinColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPinAnnotationView::get_pinColor");
          }
      
          // ref object
          MAPinAnnotationView* ref = (MAPinAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAPinAnnotationColor result = ref.pinColor;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAPinAnnotationView::get_animatesDrop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPinAnnotationView::get_animatesDrop");
          }
      
          // ref object
          MAPinAnnotationView* ref = (MAPinAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.animatesDrop;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAHeatMapNode::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAHeatMapNode::get_coordinate");
          }
      
          // ref object
          MAHeatMapNode* ref = (MAHeatMapNode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.coordinate;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAHeatMapNode::get_intensity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAHeatMapNode::get_intensity");
          }
      
          // ref object
          MAHeatMapNode* ref = (MAHeatMapNode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          float result = ref.intensity;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAHeatMapGradient::get_colors": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAHeatMapGradient::get_colors");
          }
      
          // ref object
          MAHeatMapGradient* ref = (MAHeatMapGradient*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<UIColor*>* result = ref.colors;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MAHeatMapTileOverlay::get_data": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAHeatMapTileOverlay::get_data");
          }
      
          // ref object
          MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<MAHeatMapNode*>* result = ref.data;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MAHeatMapTileOverlay::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAHeatMapTileOverlay::get_radius");
          }
      
          // ref object
          MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.radius;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAHeatMapTileOverlay::get_opacity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAHeatMapTileOverlay::get_opacity");
          }
      
          // ref object
          MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.opacity;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAHeatMapTileOverlay::get_gradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAHeatMapTileOverlay::get_gradient");
          }
      
          // ref object
          MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAHeatMapGradient* result = ref.gradient;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAHeatMapTileOverlay::get_allowRetinaAdapting": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAHeatMapTileOverlay::get_allowRetinaAdapting");
          }
      
          // ref object
          MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.allowRetinaAdapting;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapStatus::get_centerCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapStatus::get_centerCoordinate");
          }
      
          // ref object
          MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.centerCoordinate;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapStatus::get_zoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapStatus::get_zoomLevel");
          }
      
          // ref object
          MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.zoomLevel;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapStatus::get_rotationDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapStatus::get_rotationDegree");
          }
      
          // ref object
          MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.rotationDegree;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapStatus::get_cameraDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapStatus::get_cameraDegree");
          }
      
          // ref object
          MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.cameraDegree;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapStatus::get_screenAnchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapStatus::get_screenAnchor");
          }
      
          // ref object
          MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGPoint result = ref.screenAnchor;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAPointAnnotation::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPointAnnotation::get_coordinate");
          }
      
          // ref object
          MAPointAnnotation* ref = (MAPointAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.coordinate;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAPointAnnotation::get_isLockedToScreen": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPointAnnotation::get_isLockedToScreen");
          }
      
          // ref object
          MAPointAnnotation* ref = (MAPointAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.lockedToScreen;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAPointAnnotation::get_lockedScreenPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPointAnnotation::get_lockedScreenPoint");
          }
      
          // ref object
          MAPointAnnotation* ref = (MAPointAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGPoint result = ref.lockedScreenPoint;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MACircle::get_hollowShapes": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACircle::get_hollowShapes");
          }
      
          // ref object
          MACircle* ref = (MACircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<id<MAOverlay>>* result = ref.hollowShapes;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MACircle::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACircle::get_coordinate");
          }
      
          // ref object
          MACircle* ref = (MACircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.coordinate;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MACircle::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACircle::get_radius");
          }
      
          // ref object
          MACircle* ref = (MACircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationDistance result = ref.radius;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MACircle::get_boundingMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACircle::get_boundingMapRect");
          }
      
          // ref object
          MACircle* ref = (MACircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAMapRect result = ref.boundingMapRect;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAArcRenderer::get_arc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAArcRenderer::get_arc");
          }
      
          // ref object
          MAArcRenderer* ref = (MAArcRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAArc* result = ref.arc;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotation::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotation::get_coordinate");
          }
      
          // ref object
          id<MAAnnotation> ref = (id<MAAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.coordinate;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotation::get_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotation::get_title");
          }
      
          // ref object
          id<MAAnnotation> ref = (id<MAAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.title;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotation::get_subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotation::get_subtitle");
          }
      
          // ref object
          id<MAAnnotation> ref = (id<MAAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.subtitle;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAMapCustomStyleOptions::get_styleData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapCustomStyleOptions::get_styleData");
          }
      
          // ref object
          MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSData* result = ref.styleData;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapCustomStyleOptions::get_styleId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapCustomStyleOptions::get_styleId");
          }
      
          // ref object
          MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.styleId;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAMapCustomStyleOptions::get_styleTextureData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapCustomStyleOptions::get_styleTextureData");
          }
      
          // ref object
          MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSData* result = ref.styleTextureData;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapCustomStyleOptions::get_styleExtraData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapCustomStyleOptions::get_styleExtraData");
          }
      
          // ref object
          MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSData* result = ref.styleExtraData;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAPolygon::get_hollowShapes": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPolygon::get_hollowShapes");
          }
      
          // ref object
          MAPolygon* ref = (MAPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<id<MAOverlay>>* result = ref.hollowShapes;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MAParticleOverlay::get_overlayOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlay::get_overlayOption");
          }
      
          // ref object
          MAParticleOverlay* ref = (MAParticleOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAParticleOverlayOptions* result = ref.overlayOption;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiColoredPolylineRenderer::get_multiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiColoredPolylineRenderer::get_multiPolyline");
          }
      
          // ref object
          MAMultiColoredPolylineRenderer* ref = (MAMultiColoredPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAMultiPolyline* result = ref.multiPolyline;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiColoredPolylineRenderer::get_strokeColors": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiColoredPolylineRenderer::get_strokeColors");
          }
      
          // ref object
          MAMultiColoredPolylineRenderer* ref = (MAMultiColoredPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<UIColor*>* result = ref.strokeColors;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiColoredPolylineRenderer::get_isGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiColoredPolylineRenderer::get_isGradient");
          }
      
          // ref object
          MAMultiColoredPolylineRenderer* ref = (MAMultiColoredPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.gradient;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnimatedAnnotation::get_movingDirection": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnimatedAnnotation::get_movingDirection");
          }
      
          // ref object
          MAAnimatedAnnotation* ref = (MAAnimatedAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationDirection result = ref.movingDirection;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlay::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlay::get_coordinate");
          }
      
          // ref object
          id<MAOverlay> ref = (id<MAOverlay>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.coordinate;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlay::get_boundingMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlay::get_boundingMapRect");
          }
      
          // ref object
          id<MAOverlay> ref = (id<MAOverlay>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAMapRect result = ref.boundingMapRect;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiTexturePolylineRenderer::get_multiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiTexturePolylineRenderer::get_multiPolyline");
          }
      
          // ref object
          MAMultiTexturePolylineRenderer* ref = (MAMultiTexturePolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAMultiPolyline* result = ref.multiPolyline;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiTexturePolylineRenderer::get_strokeTextureImages": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiTexturePolylineRenderer::get_strokeTextureImages");
          }
      
          // ref object
          MAMultiTexturePolylineRenderer* ref = (MAMultiTexturePolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray* result = ref.strokeTextureImages;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineProvince::get_cities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineProvince::get_cities");
          }
      
          // ref object
          MAOfflineProvince* ref = (MAOfflineProvince*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray* result = ref.cities;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MATileOverlayRenderer::get_tileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlayRenderer::get_tileOverlay");
          }
      
          // ref object
          MATileOverlayRenderer* ref = (MATileOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MATileOverlay* result = ref.tileOverlay;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineItem::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineItem::get_name");
          }
      
          // ref object
          MAOfflineItem* ref = (MAOfflineItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineItem::get_jianpin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineItem::get_jianpin");
          }
      
          // ref object
          MAOfflineItem* ref = (MAOfflineItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.jianpin;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineItem::get_pinyin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineItem::get_pinyin");
          }
      
          // ref object
          MAOfflineItem* ref = (MAOfflineItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.pinyin;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineItem::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineItem::get_adcode");
          }
      
          // ref object
          MAOfflineItem* ref = (MAOfflineItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.adcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineItem::get_itemStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineItem::get_itemStatus");
          }
      
          // ref object
          MAOfflineItem* ref = (MAOfflineItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAOfflineItemStatus result = ref.itemStatus;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MATouchPoi::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATouchPoi::get_name");
          }
      
          // ref object
          MATouchPoi* ref = (MATouchPoi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MATouchPoi::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATouchPoi::get_coordinate");
          }
      
          // ref object
          MATouchPoi* ref = (MATouchPoi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.coordinate;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MATouchPoi::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATouchPoi::get_uid");
          }
      
          // ref object
          MATouchPoi* ref = (MATouchPoi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.uid;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiPointOverlayRenderer::get_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointOverlayRenderer::get_icon");
          }
      
          // ref object
          MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIImage* result = ref.icon;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiPointOverlayRenderer::get_pointSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointOverlayRenderer::get_pointSize");
          }
      
          // ref object
          MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGSize result = ref.pointSize;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiPointOverlayRenderer::get_anchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointOverlayRenderer::get_anchor");
          }
      
          // ref object
          MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGPoint result = ref.anchor;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiPointOverlayRenderer::get_multiPointOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointOverlayRenderer::get_multiPointOverlay");
          }
      
          // ref object
          MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAMultiPointOverlay* result = ref.multiPointOverlay;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAIndoorFloorInfo::get_floorName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAIndoorFloorInfo::get_floorName");
          }
      
          // ref object
          MAIndoorFloorInfo* ref = (MAIndoorFloorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.floorName;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAIndoorFloorInfo::get_floorIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAIndoorFloorInfo::get_floorIndex");
          }
      
          // ref object
          MAIndoorFloorInfo* ref = (MAIndoorFloorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          int result = ref.floorIndex;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAIndoorFloorInfo::get_floorNona": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAIndoorFloorInfo::get_floorNona");
          }
      
          // ref object
          MAIndoorFloorInfo* ref = (MAIndoorFloorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.floorNona;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAIndoorFloorInfo::get_isPark": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAIndoorFloorInfo::get_isPark");
          }
      
          // ref object
          MAIndoorFloorInfo* ref = (MAIndoorFloorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.isPark;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAIndoorInfo::get_cnName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAIndoorInfo::get_cnName");
          }
      
          // ref object
          MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.cnName;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAIndoorInfo::get_enName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAIndoorInfo::get_enName");
          }
      
          // ref object
          MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.enName;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAIndoorInfo::get_poiID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAIndoorInfo::get_poiID");
          }
      
          // ref object
          MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.poiID;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAIndoorInfo::get_buildingType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAIndoorInfo::get_buildingType");
          }
      
          // ref object
          MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.buildingType;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAIndoorInfo::get_activeFloorIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAIndoorInfo::get_activeFloorIndex");
          }
      
          // ref object
          MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          int result = ref.activeFloorIndex;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAIndoorInfo::get_activeFloorInfoIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAIndoorInfo::get_activeFloorInfoIndex");
          }
      
          // ref object
          MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          int result = ref.activeFloorInfoIndex;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAIndoorInfo::get_floorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAIndoorInfo::get_floorInfo");
          }
      
          // ref object
          MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray* result = ref.floorInfo;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MAIndoorInfo::get_numberOfFloor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAIndoorInfo::get_numberOfFloor");
          }
      
          // ref object
          MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          int result = ref.numberOfFloor;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAIndoorInfo::get_numberOfParkFloor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAIndoorInfo::get_numberOfParkFloor");
          }
      
          // ref object
          MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          int result = ref.numberOfParkFloor;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAPolylineRenderer::get_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPolylineRenderer::get_polyline");
          }
      
          // ref object
          MAPolylineRenderer* ref = (MAPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAPolyline* result = ref.polyline;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAPolylineRenderer::get_is3DArrowLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPolylineRenderer::get_is3DArrowLine");
          }
      
          // ref object
          MAPolylineRenderer* ref = (MAPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.is3DArrowLine;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAPolylineRenderer::get_sideColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPolylineRenderer::get_sideColor");
          }
      
          // ref object
          MAPolylineRenderer* ref = (MAPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIColor* result = ref.sideColor;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAShape::get_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAShape::get_title");
          }
      
          // ref object
          MAShape* ref = (MAShape*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.title;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAShape::get_subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAShape::get_subtitle");
          }
      
          // ref object
          MAShape* ref = (MAShape*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.subtitle;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_reuseIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_reuseIdentifier");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.reuseIdentifier;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_zIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_zIndex");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.zIndex;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_annotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_annotation");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          id<MAAnnotation> result = ref.annotation;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_image": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_image");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIImage* result = ref.image;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_customCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_customCalloutView");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MACustomCalloutView* result = ref.customCalloutView;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_centerOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_centerOffset");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGPoint result = ref.centerOffset;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_calloutOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_calloutOffset");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGPoint result = ref.calloutOffset;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_isEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_isEnabled");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.enabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_isHighlighted": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_isHighlighted");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.highlighted;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_isSelected": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_isSelected");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.selected;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_canShowCallout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_canShowCallout");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.canShowCallout;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_leftCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_leftCalloutAccessoryView");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIView* result = ref.leftCalloutAccessoryView;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_rightCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_rightCalloutAccessoryView");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIView* result = ref.rightCalloutAccessoryView;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_isDraggable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_isDraggable");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.draggable;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_dragState": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_dragState");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAAnnotationViewDragState result = ref.dragState;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MATileOverlay::get_tileSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlay::get_tileSize");
          }
      
          // ref object
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGSize result = ref.tileSize;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MATileOverlay::get_minimumZ": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlay::get_minimumZ");
          }
      
          // ref object
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.minimumZ;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MATileOverlay::get_maximumZ": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlay::get_maximumZ");
          }
      
          // ref object
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.maximumZ;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MATileOverlay::get_URLTemplate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlay::get_URLTemplate");
          }
      
          // ref object
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.URLTemplate;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MATileOverlay::get_canReplaceMapContent": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlay::get_canReplaceMapContent");
          }
      
          // ref object
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.canReplaceMapContent;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MATileOverlay::get_boundingMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlay::get_boundingMapRect");
          }
      
          // ref object
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAMapRect result = ref.boundingMapRect;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MATileOverlay::get_disableOffScreenTileLoading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlay::get_disableOffScreenTileLoading");
          }
      
          // ref object
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.disableOffScreenTileLoading;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MATileOverlayPath::get_x": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlayPath::get_x");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MATileOverlayPath ref;
          [dataValue getValue:&ref];
      
          NSInteger result = ref.x;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MATileOverlayPath::get_y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlayPath::get_y");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MATileOverlayPath ref;
          [dataValue getValue:&ref];
      
          NSInteger result = ref.y;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MATileOverlayPath::get_z": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlayPath::get_z");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MATileOverlayPath ref;
          [dataValue getValue:&ref];
      
          NSInteger result = ref.z;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MATileOverlayPath::get_contentScaleFactor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlayPath::get_contentScaleFactor");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MATileOverlayPath ref;
          [dataValue getValue:&ref];
      
          CGFloat result = ref.contentScaleFactor;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MACustomCalloutView::get_customView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomCalloutView::get_customView");
          }
      
          // ref object
          MACustomCalloutView* ref = (MACustomCalloutView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIView* result = ref.customView;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MACustomCalloutView::get_userData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomCalloutView::get_userData");
          }
      
          // ref object
          MACustomCalloutView* ref = (MACustomCalloutView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSObject* result = ref.userData;
      
          // return a ref
          HEAP[@(((NSObject*) result).hash)] = result;
          NSNumber* jsonableResult = @(((NSObject*) result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineItemCommonCity::get_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineItemCommonCity::get_province");
          }
      
          // ref object
          MAOfflineItemCommonCity* ref = (MAOfflineItemCommonCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAOfflineItem* result = ref.province;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineMap::get_provinces": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineMap::get_provinces");
          }
      
          // ref object
          MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<MAOfflineProvince*>* result = ref.provinces;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineMap::get_municipalities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineMap::get_municipalities");
          }
      
          // ref object
          MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<MAOfflineItemMunicipality*>* result = ref.municipalities;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineMap::get_nationWide": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineMap::get_nationWide");
          }
      
          // ref object
          MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAOfflineItemNationWide* result = ref.nationWide;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineMap::get_cities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineMap::get_cities");
          }
      
          // ref object
          MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<MAOfflineCity*>* result = ref.cities;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineMap::get_version": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineMap::get_version");
          }
      
          // ref object
          MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.version;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineMap::get_offlineCities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineMap::get_offlineCities");
          }
      
          // ref object
          MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray* result = ref.offlineCities;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MACircleRenderer::get_circle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACircleRenderer::get_circle");
          }
      
          // ref object
          MACircleRenderer* ref = (MACircleRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MACircle* result = ref.circle;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAParticleOverlayRenderer::get_particleOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayRenderer::get_particleOverlay");
          }
      
          // ref object
          MAParticleOverlayRenderer* ref = (MAParticleOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAParticleOverlay* result = ref.particleOverlay;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MACoordinateBounds::get_northEast": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACoordinateBounds::get_northEast");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MACoordinateBounds ref;
          [dataValue getValue:&ref];
      
          CLLocationCoordinate2D result = ref.northEast;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MACoordinateBounds::get_southWest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACoordinateBounds::get_southWest");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MACoordinateBounds ref;
          [dataValue getValue:&ref];
      
          CLLocationCoordinate2D result = ref.southWest;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MACoordinateSpan::get_latitudeDelta": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACoordinateSpan::get_latitudeDelta");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MACoordinateSpan ref;
          [dataValue getValue:&ref];
      
          CLLocationDegrees result = ref.latitudeDelta;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MACoordinateSpan::get_longitudeDelta": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACoordinateSpan::get_longitudeDelta");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MACoordinateSpan ref;
          [dataValue getValue:&ref];
      
          CLLocationDegrees result = ref.longitudeDelta;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MACoordinateRegion::get_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACoordinateRegion::get_center");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MACoordinateRegion ref;
          [dataValue getValue:&ref];
      
          CLLocationCoordinate2D result = ref.center;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MACoordinateRegion::get_span": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACoordinateRegion::get_span");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MACoordinateRegion ref;
          [dataValue getValue:&ref];
      
          MACoordinateSpan result = ref.span;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateSpan)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapPoint::get_x": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapPoint::get_x");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MAMapPoint ref;
          [dataValue getValue:&ref];
      
          double result = ref.x;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapPoint::get_y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapPoint::get_y");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MAMapPoint ref;
          [dataValue getValue:&ref];
      
          double result = ref.y;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapSize::get_width": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapSize::get_width");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MAMapSize ref;
          [dataValue getValue:&ref];
      
          double result = ref.width;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapSize::get_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapSize::get_height");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MAMapSize ref;
          [dataValue getValue:&ref];
      
          double result = ref.height;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapRect::get_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapRect::get_origin");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MAMapRect ref;
          [dataValue getValue:&ref];
      
          MAMapPoint result = ref.origin;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapRect::get_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapRect::get_size");
          }
      
          // ref object
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MAMapRect ref;
          [dataValue getValue:&ref];
      
          MAMapSize result = ref.size;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapSize)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAParticleOverlayOptions::get_visibile": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::get_visibile");
          }
      
          // ref object
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.visibile;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAParticleOverlayOptions::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::get_duration");
          }
      
          // ref object
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSTimeInterval result = ref.duration;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAParticleOverlayOptions::get_loop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::get_loop");
          }
      
          // ref object
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.loop;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAParticleOverlayOptions::get_maxParticles": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::get_maxParticles");
          }
      
          // ref object
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.maxParticles;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAParticleOverlayOptions::get_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::get_icon");
          }
      
          // ref object
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIImage* result = ref.icon;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAParticleOverlayOptions::get_startParticleSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::get_startParticleSize");
          }
      
          // ref object
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGSize result = ref.startParticleSize;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAParticleOverlayOptions::get_particleLifeTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::get_particleLifeTime");
          }
      
          // ref object
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSTimeInterval result = ref.particleLifeTime;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAParticleOverlayOptions::get_particleStartColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::get_particleStartColor");
          }
      
          // ref object
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          id<MAParticleColorGenerate> result = ref.particleStartColor;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAParticleOverlayOptions::get_particleStartSpeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::get_particleStartSpeed");
          }
      
          // ref object
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          id<MAParticleVelocityGenerate> result = ref.particleStartSpeed;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAParticleOverlayOptions::get_particleEmissionModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::get_particleEmissionModule");
          }
      
          // ref object
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAParticleEmissionModule* result = ref.particleEmissionModule;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAParticleOverlayOptions::get_particleShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::get_particleShapeModule");
          }
      
          // ref object
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          id<MAParticleShapeModule> result = ref.particleShapeModule;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAParticleOverlayOptions::get_particleOverLifeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::get_particleOverLifeModule");
          }
      
          // ref object
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAParticleOverLifeModule* result = ref.particleOverLifeModule;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlayRenderer::get_overlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayRenderer::get_overlay");
          }
      
          // ref object
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          id<MAOverlay> result = ref.overlay;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlayRenderer::get_glPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayRenderer::get_glPoints");
          }
      
          // ref object
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGPoint* result = ref.glPoints;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlayRenderer::get_glPointCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayRenderer::get_glPointCount");
          }
      
          // ref object
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSUInteger result = ref.glPointCount;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlayRenderer::get_strokeImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayRenderer::get_strokeImage");
          }
      
          // ref object
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIImage* result = ref.strokeImage;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlayRenderer::get_alpha": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayRenderer::get_alpha");
          }
      
          // ref object
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.alpha;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlayRenderer::get_contentScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayRenderer::get_contentScale");
          }
      
          // ref object
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.contentScale;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAUserLocation::get_isUpdating": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocation::get_isUpdating");
          }
      
          // ref object
          MAUserLocation* ref = (MAUserLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.updating;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAUserLocation::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocation::get_location");
          }
      
          // ref object
          MAUserLocation* ref = (MAUserLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocation* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAUserLocation::get_heading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocation::get_heading");
          }
      
          // ref object
          MAUserLocation* ref = (MAUserLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLHeading* result = ref.heading;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiPointItem::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointItem::get_coordinate");
          }
      
          // ref object
          MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.coordinate;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiPointItem::get_customID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointItem::get_customID");
          }
      
          // ref object
          MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.customID;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiPointItem::get_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointItem::get_title");
          }
      
          // ref object
          MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.title;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiPointItem::get_subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointItem::get_subtitle");
          }
      
          // ref object
          MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.subtitle;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAMultiPointOverlay::get_items": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointOverlay::get_items");
          }
      
          // ref object
          MAMultiPointOverlay* ref = (MAMultiPointOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<MAMultiPointItem*>* result = ref.items;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MACustomBuildingOverlayOption::get_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomBuildingOverlayOption::get_height");
          }
      
          // ref object
          MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.height;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MACustomBuildingOverlayOption::get_heightScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomBuildingOverlayOption::get_heightScale");
          }
      
          // ref object
          MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.heightScale;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MACustomBuildingOverlayOption::get_topColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomBuildingOverlayOption::get_topColor");
          }
      
          // ref object
          MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIColor* result = ref.topColor;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MACustomBuildingOverlayOption::get_sideColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomBuildingOverlayOption::get_sideColor");
          }
      
          // ref object
          MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIColor* result = ref.sideColor;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MACustomBuildingOverlayOption::get_visibile": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomBuildingOverlayOption::get_visibile");
          }
      
          // ref object
          MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.visibile;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MACustomBuildingOverlay::get_defaultOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomBuildingOverlay::get_defaultOption");
          }
      
          // ref object
          MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MACustomBuildingOverlayOption* result = ref.defaultOption;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MACustomBuildingOverlay::get_customOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomBuildingOverlay::get_customOptions");
          }
      
          // ref object
          MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<MACustomBuildingOverlayOption*>* result = ref.customOptions;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MATracePoint::get_latitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATracePoint::get_latitude");
          }
      
          // ref object
          MATracePoint* ref = (MATracePoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationDegrees result = ref.latitude;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MATracePoint::get_longitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATracePoint::get_longitude");
          }
      
          // ref object
          MATracePoint* ref = (MATracePoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationDegrees result = ref.longitude;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MATraceLocation::get_loc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATraceLocation::get_loc");
          }
      
          // ref object
          MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.loc;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MATraceLocation::get_angle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATraceLocation::get_angle");
          }
      
          // ref object
          MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          double result = ref.angle;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MATraceLocation::get_speed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATraceLocation::get_speed");
          }
      
          // ref object
          MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          double result = ref.speed;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MATraceLocation::get_time": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATraceLocation::get_time");
          }
      
          // ref object
          MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          double result = ref.time;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAArc::get_startCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAArc::get_startCoordinate");
          }
      
          // ref object
          MAArc* ref = (MAArc*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.startCoordinate;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAArc::get_passedCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAArc::get_passedCoordinate");
          }
      
          // ref object
          MAArc* ref = (MAArc*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.passedCoordinate;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAArc::get_endCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAArc::get_endCoordinate");
          }
      
          // ref object
          MAArc* ref = (MAArc*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.endCoordinate;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAArc::get_boundingMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAArc::get_boundingMapRect");
          }
      
          // ref object
          MAArc* ref = (MAArc*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAMapRect result = ref.boundingMapRect;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAUserLocationRepresentation::get_showsAccuracyRing": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::get_showsAccuracyRing");
          }
      
          // ref object
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.showsAccuracyRing;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAUserLocationRepresentation::get_showsHeadingIndicator": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::get_showsHeadingIndicator");
          }
      
          // ref object
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.showsHeadingIndicator;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAUserLocationRepresentation::get_fillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::get_fillColor");
          }
      
          // ref object
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIColor* result = ref.fillColor;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAUserLocationRepresentation::get_strokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::get_strokeColor");
          }
      
          // ref object
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIColor* result = ref.strokeColor;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAUserLocationRepresentation::get_lineWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::get_lineWidth");
          }
      
          // ref object
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.lineWidth;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAUserLocationRepresentation::get_locationDotBgColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::get_locationDotBgColor");
          }
      
          // ref object
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIColor* result = ref.locationDotBgColor;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAUserLocationRepresentation::get_locationDotFillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::get_locationDotFillColor");
          }
      
          // ref object
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIColor* result = ref.locationDotFillColor;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAUserLocationRepresentation::get_enablePulseAnnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::get_enablePulseAnnimation");
          }
      
          // ref object
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.enablePulseAnnimation;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAUserLocationRepresentation::get_image": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::get_image");
          }
      
          // ref object
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIImage* result = ref.image;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_mapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_mapType");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAMapType result = ref.mapType;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_centerCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_centerCoordinate");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.centerCoordinate;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_region": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_region");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MACoordinateRegion result = ref.region;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_visibleMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_visibleMapRect");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAMapRect result = ref.visibleMapRect;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_limitRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_limitRegion");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MACoordinateRegion result = ref.limitRegion;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_limitMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_limitMapRect");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAMapRect result = ref.limitMapRect;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_zoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_zoomLevel");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.zoomLevel;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_minZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_minZoomLevel");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.minZoomLevel;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_maxZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_maxZoomLevel");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.maxZoomLevel;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_rotationDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_rotationDegree");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.rotationDegree;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_cameraDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_cameraDegree");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.cameraDegree;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_zoomingInPivotsAroundAnchorPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_zoomingInPivotsAroundAnchorPoint");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.zoomingInPivotsAroundAnchorPoint;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_isZoomEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_isZoomEnabled");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.zoomEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_isScrollEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_isScrollEnabled");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.scrollEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_isRotateEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_isRotateEnabled");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.rotateEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_isRotateCameraEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_isRotateCameraEnabled");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.rotateCameraEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_isSkyModelEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_isSkyModelEnabled");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.skyModelEnable;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_isShowsBuildings": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_isShowsBuildings");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.showsBuildings;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_isShowsLabels": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_isShowsLabels");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.showsLabels;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_isShowTraffic": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_isShowTraffic");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.showTraffic;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_trafficRatio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_trafficRatio");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.trafficRatio;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_touchPOIEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_touchPOIEnabled");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.touchPOIEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_showsCompass": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_showsCompass");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.showsCompass;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_compassOrigin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_compassOrigin");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGPoint result = ref.compassOrigin;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_compassSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_compassSize");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGSize result = ref.compassSize;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_showsScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_showsScale");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.showsScale;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_scaleOrigin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_scaleOrigin");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGPoint result = ref.scaleOrigin;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_scaleSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_scaleSize");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGSize result = ref.scaleSize;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_logoCenter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_logoCenter");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGPoint result = ref.logoCenter;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_logoSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_logoSize");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGSize result = ref.logoSize;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_metersPerPointForCurrentZoom": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_metersPerPointForCurrentZoom");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          double result = ref.metersPerPointForCurrentZoom;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_isAbroad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_isAbroad");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.isAbroad;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_maxRenderFrame": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_maxRenderFrame");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSUInteger result = ref.maxRenderFrame;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_isAllowDecreaseFrame": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_isAllowDecreaseFrame");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.isAllowDecreaseFrame;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_openGLESDisabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_openGLESDisabled");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.openGLESDisabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_screenAnchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_screenAnchor");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGPoint result = ref.screenAnchor;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_annotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_annotations");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray* result = ref.annotations;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_selectedAnnotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_selectedAnnotations");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray* result = ref.selectedAnnotations;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_annotationVisibleRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_annotationVisibleRect");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGRect result = ref.annotationVisibleRect;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_allowsAnnotationViewSorting": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_allowsAnnotationViewSorting");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.allowsAnnotationViewSorting;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_showsUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_showsUserLocation");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.showsUserLocation;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_userLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_userLocation");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAUserLocation* result = ref.userLocation;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_customizeUserLocationAccuracyCircleRepresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_customizeUserLocationAccuracyCircleRepresentation");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.customizeUserLocationAccuracyCircleRepresentation;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_userLocationAccuracyCircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_userLocationAccuracyCircle");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MACircle* result = ref.userLocationAccuracyCircle;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_userTrackingMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_userTrackingMode");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAUserTrackingMode result = ref.userTrackingMode;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_isUserLocationVisible": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_isUserLocationVisible");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.userLocationVisible;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_distanceFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_distanceFilter");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationDistance result = ref.distanceFilter;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_desiredAccuracy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_desiredAccuracy");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationAccuracy result = ref.desiredAccuracy;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_headingFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_headingFilter");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationDegrees result = ref.headingFilter;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_pausesLocationUpdatesAutomatically": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_pausesLocationUpdatesAutomatically");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.pausesLocationUpdatesAutomatically;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_allowsBackgroundLocationUpdates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_allowsBackgroundLocationUpdates");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.allowsBackgroundLocationUpdates;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_overlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_overlays");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray* result = ref.overlays;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_isShowsIndoorMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_isShowsIndoorMap");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.showsIndoorMap;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_isShowsIndoorMapControl": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_isShowsIndoorMapControl");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.showsIndoorMapControl;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_indoorMapControlSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_indoorMapControlSize");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGSize result = ref.indoorMapControlSize;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAMapView::get_customMapStyleEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::get_customMapStyleEnabled");
          }
      
          // ref object
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.customMapStyleEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlayPathRenderer::get_fillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::get_fillColor");
          }
      
          // ref object
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIColor* result = ref.fillColor;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlayPathRenderer::get_strokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::get_strokeColor");
          }
      
          // ref object
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIColor* result = ref.strokeColor;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlayPathRenderer::get_lineWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::get_lineWidth");
          }
      
          // ref object
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.lineWidth;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlayPathRenderer::get_lineJoinType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::get_lineJoinType");
          }
      
          // ref object
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MALineJoinType result = ref.lineJoinType;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlayPathRenderer::get_lineCapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::get_lineCapType");
          }
      
          // ref object
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MALineCapType result = ref.lineCapType;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlayPathRenderer::get_miterLimit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::get_miterLimit");
          }
      
          // ref object
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.miterLimit;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlayPathRenderer::get_lineDash": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::get_lineDash");
          }
      
          // ref object
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.lineDash;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAOverlayPathRenderer::get_lineDashType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::get_lineDashType");
          }
      
          // ref object
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MALineDashType result = ref.lineDashType;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAGroundOverlayRenderer::get_groundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAGroundOverlayRenderer::get_groundOverlay");
          }
      
          // ref object
          MAGroundOverlayRenderer* ref = (MAGroundOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MAGroundOverlay* result = ref.groundOverlay;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MACustomBuildingOverlayRenderer::get_customBuildingOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomBuildingOverlayRenderer::get_customBuildingOverlay");
          }
      
          // ref object
          MACustomBuildingOverlayRenderer* ref = (MACustomBuildingOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          MACustomBuildingOverlay* result = ref.customBuildingOverlay;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"MAOfflineCity::get_cityCode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineCity* ref = (MAOfflineCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.cityCode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineCity::get_cityName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineCity* ref = (MAOfflineCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.cityName;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineCity::get_urlString_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineCity* ref = (MAOfflineCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.urlString;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineCity::get_status_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineCity* ref = (MAOfflineCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAOfflineCityStatus result = ref.status;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiPoint::get_points_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiPoint* ref = (MAMultiPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAMapPoint* result = ref.points;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiPoint::get_pointCount_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiPoint* ref = (MAMultiPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSUInteger result = ref.pointCount;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiPoint::get_cross180Longitude_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiPoint* ref = (MAMultiPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.cross180Longitude;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAGroundOverlay::get_icon_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIImage* result = ref.icon;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAGroundOverlay::get_alpha_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.alpha;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAGroundOverlay::get_zoomLevel_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.zoomLevel;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAGroundOverlay::get_bounds_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MACoordinateBounds result = ref.bounds;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateBounds)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAPolygonRenderer::get_polygon_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAPolygonRenderer* ref = (MAPolygonRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAPolygon* result = ref.polygon;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAPinAnnotationView::get_pinColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAPinAnnotationView* ref = (MAPinAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAPinAnnotationColor result = ref.pinColor;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAPinAnnotationView::get_animatesDrop_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAPinAnnotationView* ref = (MAPinAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.animatesDrop;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAHeatMapNode::get_coordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAHeatMapNode* ref = (MAHeatMapNode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.coordinate;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAHeatMapNode::get_intensity_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAHeatMapNode* ref = (MAHeatMapNode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              float result = ref.intensity;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAHeatMapGradient::get_colors_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAHeatMapGradient* ref = (MAHeatMapGradient*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<UIColor*>* result = ref.colors;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAHeatMapTileOverlay::get_data_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<MAHeatMapNode*>* result = ref.data;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAHeatMapTileOverlay::get_radius_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.radius;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAHeatMapTileOverlay::get_opacity_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.opacity;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAHeatMapTileOverlay::get_gradient_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAHeatMapGradient* result = ref.gradient;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAHeatMapTileOverlay::get_allowRetinaAdapting_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.allowRetinaAdapting;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapStatus::get_centerCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.centerCoordinate;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapStatus::get_zoomLevel_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.zoomLevel;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapStatus::get_rotationDegree_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.rotationDegree;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapStatus::get_cameraDegree_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.cameraDegree;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapStatus::get_screenAnchor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGPoint result = ref.screenAnchor;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAPointAnnotation::get_coordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAPointAnnotation* ref = (MAPointAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.coordinate;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAPointAnnotation::get_isLockedToScreen_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAPointAnnotation* ref = (MAPointAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.lockedToScreen;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAPointAnnotation::get_lockedScreenPoint_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAPointAnnotation* ref = (MAPointAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGPoint result = ref.lockedScreenPoint;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACircle::get_hollowShapes_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MACircle* ref = (MACircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<id<MAOverlay>>* result = ref.hollowShapes;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACircle::get_coordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MACircle* ref = (MACircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.coordinate;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACircle::get_radius_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MACircle* ref = (MACircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationDistance result = ref.radius;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACircle::get_boundingMapRect_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MACircle* ref = (MACircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAMapRect result = ref.boundingMapRect;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAArcRenderer::get_arc_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAArcRenderer* ref = (MAArcRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAArc* result = ref.arc;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotation::get_coordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              id<MAAnnotation> ref = (id<MAAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.coordinate;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotation::get_title_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              id<MAAnnotation> ref = (id<MAAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.title;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotation::get_subtitle_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              id<MAAnnotation> ref = (id<MAAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.subtitle;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapCustomStyleOptions::get_styleData_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSData* result = ref.styleData;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapCustomStyleOptions::get_styleId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.styleId;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapCustomStyleOptions::get_styleTextureData_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSData* result = ref.styleTextureData;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapCustomStyleOptions::get_styleExtraData_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSData* result = ref.styleExtraData;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAPolygon::get_hollowShapes_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAPolygon* ref = (MAPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<id<MAOverlay>>* result = ref.hollowShapes;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAParticleOverlay::get_overlayOption_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAParticleOverlay* ref = (MAParticleOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAParticleOverlayOptions* result = ref.overlayOption;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiColoredPolylineRenderer::get_multiPolyline_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiColoredPolylineRenderer* ref = (MAMultiColoredPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAMultiPolyline* result = ref.multiPolyline;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiColoredPolylineRenderer::get_strokeColors_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiColoredPolylineRenderer* ref = (MAMultiColoredPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<UIColor*>* result = ref.strokeColors;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiColoredPolylineRenderer::get_isGradient_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiColoredPolylineRenderer* ref = (MAMultiColoredPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.gradient;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnimatedAnnotation::get_movingDirection_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnimatedAnnotation* ref = (MAAnimatedAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationDirection result = ref.movingDirection;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlay::get_coordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              id<MAOverlay> ref = (id<MAOverlay>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.coordinate;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlay::get_boundingMapRect_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              id<MAOverlay> ref = (id<MAOverlay>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAMapRect result = ref.boundingMapRect;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiTexturePolylineRenderer::get_multiPolyline_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiTexturePolylineRenderer* ref = (MAMultiTexturePolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAMultiPolyline* result = ref.multiPolyline;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiTexturePolylineRenderer::get_strokeTextureImages_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiTexturePolylineRenderer* ref = (MAMultiTexturePolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray* result = ref.strokeTextureImages;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineProvince::get_cities_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineProvince* ref = (MAOfflineProvince*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray* result = ref.cities;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATileOverlayRenderer::get_tileOverlay_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATileOverlayRenderer* ref = (MATileOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MATileOverlay* result = ref.tileOverlay;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineItem::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineItem* ref = (MAOfflineItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineItem::get_jianpin_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineItem* ref = (MAOfflineItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.jianpin;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineItem::get_pinyin_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineItem* ref = (MAOfflineItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.pinyin;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineItem::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineItem* ref = (MAOfflineItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.adcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineItem::get_itemStatus_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineItem* ref = (MAOfflineItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAOfflineItemStatus result = ref.itemStatus;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATouchPoi::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATouchPoi* ref = (MATouchPoi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATouchPoi::get_coordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATouchPoi* ref = (MATouchPoi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.coordinate;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATouchPoi::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATouchPoi* ref = (MATouchPoi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.uid;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiPointOverlayRenderer::get_icon_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIImage* result = ref.icon;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiPointOverlayRenderer::get_pointSize_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGSize result = ref.pointSize;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiPointOverlayRenderer::get_anchor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGPoint result = ref.anchor;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiPointOverlayRenderer::get_multiPointOverlay_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAMultiPointOverlay* result = ref.multiPointOverlay;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAIndoorFloorInfo::get_floorName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAIndoorFloorInfo* ref = (MAIndoorFloorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.floorName;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAIndoorFloorInfo::get_floorIndex_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAIndoorFloorInfo* ref = (MAIndoorFloorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              int result = ref.floorIndex;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAIndoorFloorInfo::get_floorNona_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAIndoorFloorInfo* ref = (MAIndoorFloorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.floorNona;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAIndoorFloorInfo::get_isPark_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAIndoorFloorInfo* ref = (MAIndoorFloorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.isPark;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAIndoorInfo::get_cnName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.cnName;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAIndoorInfo::get_enName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.enName;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAIndoorInfo::get_poiID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.poiID;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAIndoorInfo::get_buildingType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.buildingType;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAIndoorInfo::get_activeFloorIndex_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              int result = ref.activeFloorIndex;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAIndoorInfo::get_activeFloorInfoIndex_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              int result = ref.activeFloorInfoIndex;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAIndoorInfo::get_floorInfo_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray* result = ref.floorInfo;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAIndoorInfo::get_numberOfFloor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              int result = ref.numberOfFloor;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAIndoorInfo::get_numberOfParkFloor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAIndoorInfo* ref = (MAIndoorInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              int result = ref.numberOfParkFloor;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAPolylineRenderer::get_polyline_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAPolylineRenderer* ref = (MAPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAPolyline* result = ref.polyline;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAPolylineRenderer::get_is3DArrowLine_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAPolylineRenderer* ref = (MAPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.is3DArrowLine;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAPolylineRenderer::get_sideColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAPolylineRenderer* ref = (MAPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIColor* result = ref.sideColor;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAShape::get_title_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAShape* ref = (MAShape*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.title;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAShape::get_subtitle_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAShape* ref = (MAShape*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.subtitle;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotationView::get_reuseIdentifier_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.reuseIdentifier;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotationView::get_zIndex_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.zIndex;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotationView::get_annotation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              id<MAAnnotation> result = ref.annotation;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotationView::get_image_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIImage* result = ref.image;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotationView::get_customCalloutView_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MACustomCalloutView* result = ref.customCalloutView;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotationView::get_centerOffset_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGPoint result = ref.centerOffset;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotationView::get_calloutOffset_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGPoint result = ref.calloutOffset;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotationView::get_isEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.enabled;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotationView::get_isHighlighted_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.highlighted;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotationView::get_isSelected_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.selected;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotationView::get_canShowCallout_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.canShowCallout;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotationView::get_leftCalloutAccessoryView_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIView* result = ref.leftCalloutAccessoryView;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotationView::get_rightCalloutAccessoryView_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIView* result = ref.rightCalloutAccessoryView;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotationView::get_isDraggable_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.draggable;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAAnnotationView::get_dragState_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAAnnotationViewDragState result = ref.dragState;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATileOverlay::get_tileSize_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGSize result = ref.tileSize;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATileOverlay::get_minimumZ_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.minimumZ;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATileOverlay::get_maximumZ_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.maximumZ;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATileOverlay::get_URLTemplate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.URLTemplate;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATileOverlay::get_canReplaceMapContent_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.canReplaceMapContent;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATileOverlay::get_boundingMapRect_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAMapRect result = ref.boundingMapRect;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATileOverlay::get_disableOffScreenTileLoading_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.disableOffScreenTileLoading;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATileOverlayPath::get_x_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MATileOverlayPath ref;
              [dataValue getValue:&ref];
      
              NSInteger result = ref.x;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATileOverlayPath::get_y_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MATileOverlayPath ref;
              [dataValue getValue:&ref];
      
              NSInteger result = ref.y;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATileOverlayPath::get_z_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MATileOverlayPath ref;
              [dataValue getValue:&ref];
      
              NSInteger result = ref.z;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATileOverlayPath::get_contentScaleFactor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MATileOverlayPath ref;
              [dataValue getValue:&ref];
      
              CGFloat result = ref.contentScaleFactor;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACustomCalloutView::get_customView_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MACustomCalloutView* ref = (MACustomCalloutView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIView* result = ref.customView;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACustomCalloutView::get_userData_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MACustomCalloutView* ref = (MACustomCalloutView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSObject* result = ref.userData;
      
              // return a ref
              HEAP[@(((NSObject*) result).hash)] = result;
              NSNumber* jsonableResult = @(((NSObject*) result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineItemCommonCity::get_province_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineItemCommonCity* ref = (MAOfflineItemCommonCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAOfflineItem* result = ref.province;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineMap::get_provinces_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<MAOfflineProvince*>* result = ref.provinces;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineMap::get_municipalities_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<MAOfflineItemMunicipality*>* result = ref.municipalities;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineMap::get_nationWide_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAOfflineItemNationWide* result = ref.nationWide;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineMap::get_cities_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<MAOfflineCity*>* result = ref.cities;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineMap::get_version_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.version;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOfflineMap::get_offlineCities_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray* result = ref.offlineCities;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACircleRenderer::get_circle_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MACircleRenderer* ref = (MACircleRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MACircle* result = ref.circle;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAParticleOverlayRenderer::get_particleOverlay_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAParticleOverlayRenderer* ref = (MAParticleOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAParticleOverlay* result = ref.particleOverlay;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACoordinateBounds::get_northEast_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MACoordinateBounds ref;
              [dataValue getValue:&ref];
      
              CLLocationCoordinate2D result = ref.northEast;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACoordinateBounds::get_southWest_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MACoordinateBounds ref;
              [dataValue getValue:&ref];
      
              CLLocationCoordinate2D result = ref.southWest;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACoordinateSpan::get_latitudeDelta_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MACoordinateSpan ref;
              [dataValue getValue:&ref];
      
              CLLocationDegrees result = ref.latitudeDelta;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACoordinateSpan::get_longitudeDelta_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MACoordinateSpan ref;
              [dataValue getValue:&ref];
      
              CLLocationDegrees result = ref.longitudeDelta;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACoordinateRegion::get_center_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MACoordinateRegion ref;
              [dataValue getValue:&ref];
      
              CLLocationCoordinate2D result = ref.center;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACoordinateRegion::get_span_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MACoordinateRegion ref;
              [dataValue getValue:&ref];
      
              MACoordinateSpan result = ref.span;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateSpan)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapPoint::get_x_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MAMapPoint ref;
              [dataValue getValue:&ref];
      
              double result = ref.x;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapPoint::get_y_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MAMapPoint ref;
              [dataValue getValue:&ref];
      
              double result = ref.y;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapSize::get_width_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MAMapSize ref;
              [dataValue getValue:&ref];
      
              double result = ref.width;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapSize::get_height_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MAMapSize ref;
              [dataValue getValue:&ref];
      
              double result = ref.height;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapRect::get_origin_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MAMapRect ref;
              [dataValue getValue:&ref];
      
              MAMapPoint result = ref.origin;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapRect::get_size_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
              MAMapRect ref;
              [dataValue getValue:&ref];
      
              MAMapSize result = ref.size;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapSize)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAParticleOverlayOptions::get_visibile_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.visibile;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAParticleOverlayOptions::get_duration_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSTimeInterval result = ref.duration;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAParticleOverlayOptions::get_loop_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.loop;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAParticleOverlayOptions::get_maxParticles_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.maxParticles;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAParticleOverlayOptions::get_icon_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIImage* result = ref.icon;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAParticleOverlayOptions::get_startParticleSize_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGSize result = ref.startParticleSize;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAParticleOverlayOptions::get_particleLifeTime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSTimeInterval result = ref.particleLifeTime;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAParticleOverlayOptions::get_particleStartColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              id<MAParticleColorGenerate> result = ref.particleStartColor;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAParticleOverlayOptions::get_particleStartSpeed_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              id<MAParticleVelocityGenerate> result = ref.particleStartSpeed;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAParticleOverlayOptions::get_particleEmissionModule_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAParticleEmissionModule* result = ref.particleEmissionModule;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAParticleOverlayOptions::get_particleShapeModule_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              id<MAParticleShapeModule> result = ref.particleShapeModule;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAParticleOverlayOptions::get_particleOverLifeModule_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAParticleOverLifeModule* result = ref.particleOverLifeModule;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlayRenderer::get_overlay_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              id<MAOverlay> result = ref.overlay;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlayRenderer::get_glPoints_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGPoint* result = ref.glPoints;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlayRenderer::get_glPointCount_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSUInteger result = ref.glPointCount;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlayRenderer::get_strokeImage_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIImage* result = ref.strokeImage;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlayRenderer::get_alpha_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.alpha;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlayRenderer::get_contentScale_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.contentScale;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAUserLocation::get_isUpdating_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAUserLocation* ref = (MAUserLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.updating;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAUserLocation::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAUserLocation* ref = (MAUserLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocation* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAUserLocation::get_heading_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAUserLocation* ref = (MAUserLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLHeading* result = ref.heading;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiPointItem::get_coordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.coordinate;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiPointItem::get_customID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.customID;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiPointItem::get_title_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.title;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiPointItem::get_subtitle_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.subtitle;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMultiPointOverlay::get_items_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMultiPointOverlay* ref = (MAMultiPointOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<MAMultiPointItem*>* result = ref.items;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACustomBuildingOverlayOption::get_height_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.height;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACustomBuildingOverlayOption::get_heightScale_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.heightScale;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACustomBuildingOverlayOption::get_topColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIColor* result = ref.topColor;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACustomBuildingOverlayOption::get_sideColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIColor* result = ref.sideColor;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACustomBuildingOverlayOption::get_visibile_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.visibile;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACustomBuildingOverlay::get_defaultOption_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MACustomBuildingOverlayOption* result = ref.defaultOption;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACustomBuildingOverlay::get_customOptions_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray<MACustomBuildingOverlayOption*>* result = ref.customOptions;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATracePoint::get_latitude_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATracePoint* ref = (MATracePoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationDegrees result = ref.latitude;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATracePoint::get_longitude_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATracePoint* ref = (MATracePoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationDegrees result = ref.longitude;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATraceLocation::get_loc_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.loc;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATraceLocation::get_angle_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              double result = ref.angle;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATraceLocation::get_speed_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              double result = ref.speed;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MATraceLocation::get_time_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              double result = ref.time;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAArc::get_startCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAArc* ref = (MAArc*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.startCoordinate;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAArc::get_passedCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAArc* ref = (MAArc*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.passedCoordinate;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAArc::get_endCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAArc* ref = (MAArc*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.endCoordinate;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAArc::get_boundingMapRect_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAArc* ref = (MAArc*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAMapRect result = ref.boundingMapRect;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAUserLocationRepresentation::get_showsAccuracyRing_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.showsAccuracyRing;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAUserLocationRepresentation::get_showsHeadingIndicator_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.showsHeadingIndicator;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAUserLocationRepresentation::get_fillColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIColor* result = ref.fillColor;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAUserLocationRepresentation::get_strokeColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIColor* result = ref.strokeColor;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAUserLocationRepresentation::get_lineWidth_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.lineWidth;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAUserLocationRepresentation::get_locationDotBgColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIColor* result = ref.locationDotBgColor;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAUserLocationRepresentation::get_locationDotFillColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIColor* result = ref.locationDotFillColor;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAUserLocationRepresentation::get_enablePulseAnnimation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.enablePulseAnnimation;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAUserLocationRepresentation::get_image_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIImage* result = ref.image;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_mapType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAMapType result = ref.mapType;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_centerCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.centerCoordinate;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_region_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MACoordinateRegion result = ref.region;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_visibleMapRect_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAMapRect result = ref.visibleMapRect;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_limitRegion_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MACoordinateRegion result = ref.limitRegion;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_limitMapRect_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAMapRect result = ref.limitMapRect;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_zoomLevel_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.zoomLevel;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_minZoomLevel_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.minZoomLevel;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_maxZoomLevel_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.maxZoomLevel;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_rotationDegree_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.rotationDegree;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_cameraDegree_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.cameraDegree;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_zoomingInPivotsAroundAnchorPoint_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.zoomingInPivotsAroundAnchorPoint;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_isZoomEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.zoomEnabled;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_isScrollEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.scrollEnabled;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_isRotateEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.rotateEnabled;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_isRotateCameraEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.rotateCameraEnabled;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_isSkyModelEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.skyModelEnable;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_isShowsBuildings_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.showsBuildings;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_isShowsLabels_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.showsLabels;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_isShowTraffic_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.showTraffic;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_trafficRatio_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.trafficRatio;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_touchPOIEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.touchPOIEnabled;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_showsCompass_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.showsCompass;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_compassOrigin_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGPoint result = ref.compassOrigin;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_compassSize_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGSize result = ref.compassSize;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_showsScale_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.showsScale;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_scaleOrigin_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGPoint result = ref.scaleOrigin;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_scaleSize_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGSize result = ref.scaleSize;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_logoCenter_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGPoint result = ref.logoCenter;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_logoSize_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGSize result = ref.logoSize;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_metersPerPointForCurrentZoom_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              double result = ref.metersPerPointForCurrentZoom;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_isAbroad_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.isAbroad;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_maxRenderFrame_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSUInteger result = ref.maxRenderFrame;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_isAllowDecreaseFrame_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.isAllowDecreaseFrame;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_openGLESDisabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.openGLESDisabled;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_screenAnchor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGPoint result = ref.screenAnchor;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_annotations_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray* result = ref.annotations;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_selectedAnnotations_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray* result = ref.selectedAnnotations;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_annotationVisibleRect_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGRect result = ref.annotationVisibleRect;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGRect)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_allowsAnnotationViewSorting_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.allowsAnnotationViewSorting;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_showsUserLocation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.showsUserLocation;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_userLocation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAUserLocation* result = ref.userLocation;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_customizeUserLocationAccuracyCircleRepresentation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.customizeUserLocationAccuracyCircleRepresentation;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_userLocationAccuracyCircle_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MACircle* result = ref.userLocationAccuracyCircle;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_userTrackingMode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAUserTrackingMode result = ref.userTrackingMode;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_isUserLocationVisible_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.userLocationVisible;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_distanceFilter_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationDistance result = ref.distanceFilter;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_desiredAccuracy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationAccuracy result = ref.desiredAccuracy;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_headingFilter_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationDegrees result = ref.headingFilter;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_pausesLocationUpdatesAutomatically_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.pausesLocationUpdatesAutomatically;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_allowsBackgroundLocationUpdates_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.allowsBackgroundLocationUpdates;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_overlays_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSArray* result = ref.overlays;
      
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_isShowsIndoorMap_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.showsIndoorMap;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_isShowsIndoorMapControl_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.showsIndoorMapControl;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_indoorMapControlSize_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGSize result = ref.indoorMapControlSize;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAMapView::get_customMapStyleEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.customMapStyleEnabled;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlayPathRenderer::get_fillColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIColor* result = ref.fillColor;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlayPathRenderer::get_strokeColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              UIColor* result = ref.strokeColor;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlayPathRenderer::get_lineWidth_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.lineWidth;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlayPathRenderer::get_lineJoinType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MALineJoinType result = ref.lineJoinType;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlayPathRenderer::get_lineCapType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MALineCapType result = ref.lineCapType;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlayPathRenderer::get_miterLimit_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.miterLimit;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlayPathRenderer::get_lineDash_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.lineDash;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAOverlayPathRenderer::get_lineDashType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MALineDashType result = ref.lineDashType;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAGroundOverlayRenderer::get_groundOverlay_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MAGroundOverlayRenderer* ref = (MAGroundOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MAGroundOverlay* result = ref.groundOverlay;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MACustomBuildingOverlayRenderer::get_customBuildingOverlay_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              MACustomBuildingOverlayRenderer* ref = (MACustomBuildingOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              MACustomBuildingOverlay* result = ref.customBuildingOverlay;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"MAGroundOverlay::set_alpha": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAGroundOverlay::set_alpha");
          }
      
          // args
          // jsonable arg
          CGFloat alpha = [args[@"alpha"] floatValue];
      
          // ref
          MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.alpha = alpha;
          methodResult(@"success");
      },
      
      @"MAPinAnnotationView::set_pinColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPinAnnotationView::set_pinColor");
          }
      
          // args
          // enum arg
          MAPinAnnotationColor pinColor = (MAPinAnnotationColor) [args[@"pinColor"] integerValue];
      
          // ref
          MAPinAnnotationView* ref = (MAPinAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.pinColor = pinColor;
          methodResult(@"success");
      },
      
      @"MAPinAnnotationView::set_animatesDrop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPinAnnotationView::set_animatesDrop");
          }
      
          // args
          // jsonable arg
          BOOL animatesDrop = [args[@"animatesDrop"] boolValue];
      
          // ref
          MAPinAnnotationView* ref = (MAPinAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.animatesDrop = animatesDrop;
          methodResult(@"success");
      },
      
      @"MAHeatMapNode::set_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAHeatMapNode::set_coordinate");
          }
      
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
      
          // ref
          MAHeatMapNode* ref = (MAHeatMapNode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.coordinate = coordinate;
          methodResult(@"success");
      },
      
      @"MAHeatMapNode::set_intensity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAHeatMapNode::set_intensity");
          }
      
          // args
          // jsonable arg
          float intensity = [args[@"intensity"] floatValue];
      
          // ref
          MAHeatMapNode* ref = (MAHeatMapNode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.intensity = intensity;
          methodResult(@"success");
      },
      
      @"MAHeatMapTileOverlay::set_data": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAHeatMapTileOverlay::set_data");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* dataRefArray = (NSArray<NSNumber*> *) args[@"data"];
          NSMutableArray<MAHeatMapNode*>* data = [NSMutableArray arrayWithCapacity:dataRefArray.count];
          for (int i = 0; i < dataRefArray.count; i++) {
              MAHeatMapNode* item = (MAHeatMapNode*) HEAP[[dataRefArray objectAtIndex:i]];
              [data addObject:item];
          }
      
          // ref
          MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.data = data;
          methodResult(@"success");
      },
      
      @"MAHeatMapTileOverlay::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAHeatMapTileOverlay::set_radius");
          }
      
          // args
          // jsonable arg
          NSInteger radius = [args[@"radius"] integerValue];
      
          // ref
          MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.radius = radius;
          methodResult(@"success");
      },
      
      @"MAHeatMapTileOverlay::set_opacity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAHeatMapTileOverlay::set_opacity");
          }
      
          // args
          // jsonable arg
          CGFloat opacity = [args[@"opacity"] floatValue];
      
          // ref
          MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.opacity = opacity;
          methodResult(@"success");
      },
      
      @"MAHeatMapTileOverlay::set_gradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAHeatMapTileOverlay::set_gradient");
          }
      
          // args
          // ref arg
          MAHeatMapGradient* gradient = (MAHeatMapGradient*) HEAP[@([args[@"gradient"] integerValue])];
      
          // ref
          MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.gradient = gradient;
          methodResult(@"success");
      },
      
      @"MAHeatMapTileOverlay::set_allowRetinaAdapting": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAHeatMapTileOverlay::set_allowRetinaAdapting");
          }
      
          // args
          // jsonable arg
          BOOL allowRetinaAdapting = [args[@"allowRetinaAdapting"] boolValue];
      
          // ref
          MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.allowRetinaAdapting = allowRetinaAdapting;
          methodResult(@"success");
      },
      
      @"MAMapStatus::set_centerCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapStatus::set_centerCoordinate");
          }
      
          // args
          // struct arg
          NSValue* centerCoordinateValue = (NSValue*) HEAP[@([args[@"centerCoordinate"] integerValue])];
          CLLocationCoordinate2D centerCoordinate;
          [centerCoordinateValue getValue:&centerCoordinate];
      
          // ref
          MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.centerCoordinate = centerCoordinate;
          methodResult(@"success");
      },
      
      @"MAMapStatus::set_zoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapStatus::set_zoomLevel");
          }
      
          // args
          // jsonable arg
          CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
      
          // ref
          MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.zoomLevel = zoomLevel;
          methodResult(@"success");
      },
      
      @"MAMapStatus::set_rotationDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapStatus::set_rotationDegree");
          }
      
          // args
          // jsonable arg
          CGFloat rotationDegree = [args[@"rotationDegree"] floatValue];
      
          // ref
          MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.rotationDegree = rotationDegree;
          methodResult(@"success");
      },
      
      @"MAMapStatus::set_cameraDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapStatus::set_cameraDegree");
          }
      
          // args
          // jsonable arg
          CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
      
          // ref
          MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.cameraDegree = cameraDegree;
          methodResult(@"success");
      },
      
      @"MAMapStatus::set_screenAnchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapStatus::set_screenAnchor");
          }
      
          // args
          // struct arg
          NSValue* screenAnchorValue = (NSValue*) HEAP[@([args[@"screenAnchor"] integerValue])];
          CGPoint screenAnchor;
          [screenAnchorValue getValue:&screenAnchor];
      
          // ref
          MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.screenAnchor = screenAnchor;
          methodResult(@"success");
      },
      
      @"MAPointAnnotation::set_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPointAnnotation::set_coordinate");
          }
      
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
      
          // ref
          MAPointAnnotation* ref = (MAPointAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.coordinate = coordinate;
          methodResult(@"success");
      },
      
      @"MAPointAnnotation::set_lockedToScreen": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPointAnnotation::set_lockedToScreen");
          }
      
          // args
          // jsonable arg
          BOOL lockedToScreen = [args[@"lockedToScreen"] boolValue];
      
          // ref
          MAPointAnnotation* ref = (MAPointAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.lockedToScreen = lockedToScreen;
          methodResult(@"success");
      },
      
      @"MAPointAnnotation::set_lockedScreenPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPointAnnotation::set_lockedScreenPoint");
          }
      
          // args
          // struct arg
          NSValue* lockedScreenPointValue = (NSValue*) HEAP[@([args[@"lockedScreenPoint"] integerValue])];
          CGPoint lockedScreenPoint;
          [lockedScreenPointValue getValue:&lockedScreenPoint];
      
          // ref
          MAPointAnnotation* ref = (MAPointAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.lockedScreenPoint = lockedScreenPoint;
          methodResult(@"success");
      },
      
      @"MACircle::set_hollowShapes": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACircle::set_hollowShapes");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* hollowShapesRefArray = (NSArray<NSNumber*> *) args[@"hollowShapes"];
          NSMutableArray<id<MAOverlay>>* hollowShapes = [NSMutableArray arrayWithCapacity:hollowShapesRefArray.count];
          for (int i = 0; i < hollowShapesRefArray.count; i++) {
              id<MAOverlay> item = (id<MAOverlay>) HEAP[[hollowShapesRefArray objectAtIndex:i]];
              [hollowShapes addObject:item];
          }
      
          // ref
          MACircle* ref = (MACircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.hollowShapes = hollowShapes;
          methodResult(@"success");
      },
      
      @"MACircle::set_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACircle::set_coordinate");
          }
      
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
      
          // ref
          MACircle* ref = (MACircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.coordinate = coordinate;
          methodResult(@"success");
      },
      
      @"MACircle::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACircle::set_radius");
          }
      
          // args
          // jsonable arg
          CLLocationDistance radius = [args[@"radius"] doubleValue];
      
          // ref
          MACircle* ref = (MACircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.radius = radius;
          methodResult(@"success");
      },
      
      @"MAAnnotation::set_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotation::set_title");
          }
      
          // args
          // jsonable arg
          NSString* title = (NSString*) args[@"title"];
      
          // ref
          id<MAAnnotation> ref = (id<MAAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.title = title;
          methodResult(@"success");
      },
      
      @"MAAnnotation::set_subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotation::set_subtitle");
          }
      
          // args
          // jsonable arg
          NSString* subtitle = (NSString*) args[@"subtitle"];
      
          // ref
          id<MAAnnotation> ref = (id<MAAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.subtitle = subtitle;
          methodResult(@"success");
      },
      
      @"MAMapCustomStyleOptions::set_styleData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapCustomStyleOptions::set_styleData");
          }
      
          // args
          // ref arg
          NSData* styleData = (NSData*) HEAP[@([args[@"styleData"] integerValue])];
      
          // ref
          MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.styleData = styleData;
          methodResult(@"success");
      },
      
      @"MAMapCustomStyleOptions::set_styleId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapCustomStyleOptions::set_styleId");
          }
      
          // args
          // jsonable arg
          NSString* styleId = (NSString*) args[@"styleId"];
      
          // ref
          MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.styleId = styleId;
          methodResult(@"success");
      },
      
      @"MAMapCustomStyleOptions::set_styleTextureData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapCustomStyleOptions::set_styleTextureData");
          }
      
          // args
          // ref arg
          NSData* styleTextureData = (NSData*) HEAP[@([args[@"styleTextureData"] integerValue])];
      
          // ref
          MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.styleTextureData = styleTextureData;
          methodResult(@"success");
      },
      
      @"MAMapCustomStyleOptions::set_styleExtraData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapCustomStyleOptions::set_styleExtraData");
          }
      
          // args
          // ref arg
          NSData* styleExtraData = (NSData*) HEAP[@([args[@"styleExtraData"] integerValue])];
      
          // ref
          MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.styleExtraData = styleExtraData;
          methodResult(@"success");
      },
      
      @"MAPolygon::set_hollowShapes": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPolygon::set_hollowShapes");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* hollowShapesRefArray = (NSArray<NSNumber*> *) args[@"hollowShapes"];
          NSMutableArray<id<MAOverlay>>* hollowShapes = [NSMutableArray arrayWithCapacity:hollowShapesRefArray.count];
          for (int i = 0; i < hollowShapesRefArray.count; i++) {
              id<MAOverlay> item = (id<MAOverlay>) HEAP[[hollowShapesRefArray objectAtIndex:i]];
              [hollowShapes addObject:item];
          }
      
          // ref
          MAPolygon* ref = (MAPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.hollowShapes = hollowShapes;
          methodResult(@"success");
      },
      
      @"MAMultiColoredPolylineRenderer::set_strokeColors": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiColoredPolylineRenderer::set_strokeColors");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* strokeColorsRefArray = (NSArray<NSNumber*> *) args[@"strokeColors"];
          NSMutableArray<UIColor*>* strokeColors = [NSMutableArray arrayWithCapacity:strokeColorsRefArray.count];
          for (int i = 0; i < strokeColorsRefArray.count; i++) {
              UIColor* item = (UIColor*) HEAP[[strokeColorsRefArray objectAtIndex:i]];
              [strokeColors addObject:item];
          }
      
          // ref
          MAMultiColoredPolylineRenderer* ref = (MAMultiColoredPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.strokeColors = strokeColors;
          methodResult(@"success");
      },
      
      @"MAMultiColoredPolylineRenderer::set_gradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiColoredPolylineRenderer::set_gradient");
          }
      
          // args
          // jsonable arg
          BOOL gradient = [args[@"gradient"] boolValue];
      
          // ref
          MAMultiColoredPolylineRenderer* ref = (MAMultiColoredPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.gradient = gradient;
          methodResult(@"success");
      },
      
      @"MAAnimatedAnnotation::set_movingDirection": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnimatedAnnotation::set_movingDirection");
          }
      
          // args
          // jsonable arg
          CLLocationDirection movingDirection = [args[@"movingDirection"] doubleValue];
      
          // ref
          MAAnimatedAnnotation* ref = (MAAnimatedAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.movingDirection = movingDirection;
          methodResult(@"success");
      },
      
      @"MAMultiTexturePolylineRenderer::set_strokeTextureImages": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiTexturePolylineRenderer::set_strokeTextureImages");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* strokeTextureImagesRefArray = (NSArray<NSNumber*> *) args[@"strokeTextureImages"];
          NSMutableArray<NSArray*>* strokeTextureImages = [NSMutableArray arrayWithCapacity:strokeTextureImagesRefArray.count];
          for (int i = 0; i < strokeTextureImagesRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[strokeTextureImagesRefArray objectAtIndex:i]];
              [strokeTextureImages addObject:item];
          }
      
          // ref
          MAMultiTexturePolylineRenderer* ref = (MAMultiTexturePolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.strokeTextureImages = strokeTextureImages;
          methodResult(@"success");
      },
      
      @"MATraceManager::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATraceManager::set_delegate");
          }
      
          // args
      
      
          // ref
          MATraceManager* ref = (MATraceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
      @"MAMultiPointOverlayRenderer::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointOverlayRenderer::set_delegate");
          }
      
          // args
      
      
          // ref
          MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
      @"MAMultiPointOverlayRenderer::set_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointOverlayRenderer::set_icon");
          }
      
          // args
          // ref arg
          UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
      
          // ref
          MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.icon = icon;
          methodResult(@"success");
      },
      
      @"MAMultiPointOverlayRenderer::set_pointSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointOverlayRenderer::set_pointSize");
          }
      
          // args
          // struct arg
          NSValue* pointSizeValue = (NSValue*) HEAP[@([args[@"pointSize"] integerValue])];
          CGSize pointSize;
          [pointSizeValue getValue:&pointSize];
      
          // ref
          MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.pointSize = pointSize;
          methodResult(@"success");
      },
      
      @"MAMultiPointOverlayRenderer::set_anchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointOverlayRenderer::set_anchor");
          }
      
          // args
          // struct arg
          NSValue* anchorValue = (NSValue*) HEAP[@([args[@"anchor"] integerValue])];
          CGPoint anchor;
          [anchorValue getValue:&anchor];
      
          // ref
          MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.anchor = anchor;
          methodResult(@"success");
      },
      
      @"MAPolylineRenderer::set_is3DArrowLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPolylineRenderer::set_is3DArrowLine");
          }
      
          // args
          // jsonable arg
          BOOL is3DArrowLine = [args[@"is3DArrowLine"] boolValue];
      
          // ref
          MAPolylineRenderer* ref = (MAPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.is3DArrowLine = is3DArrowLine;
          methodResult(@"success");
      },
      
      @"MAPolylineRenderer::set_sideColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPolylineRenderer::set_sideColor");
          }
      
          // args
          // ref arg
          UIColor* sideColor = (UIColor*) HEAP[@([args[@"sideColor"] integerValue])];
      
          // ref
          MAPolylineRenderer* ref = (MAPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.sideColor = sideColor;
          methodResult(@"success");
      },
      
      @"MAShape::set_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAShape::set_title");
          }
      
          // args
          // jsonable arg
          NSString* title = (NSString*) args[@"title"];
      
          // ref
          MAShape* ref = (MAShape*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.title = title;
          methodResult(@"success");
      },
      
      @"MAShape::set_subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAShape::set_subtitle");
          }
      
          // args
          // jsonable arg
          NSString* subtitle = (NSString*) args[@"subtitle"];
      
          // ref
          MAShape* ref = (MAShape*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.subtitle = subtitle;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_zIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_zIndex");
          }
      
          // args
          // jsonable arg
          NSInteger zIndex = [args[@"zIndex"] integerValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.zIndex = zIndex;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_annotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_annotation");
          }
      
          // args
          // ref arg
          id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.annotation = annotation;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_image": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_image");
          }
      
          // args
          // ref arg
          UIImage* image = (UIImage*) HEAP[@([args[@"image"] integerValue])];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.image = image;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_customCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_customCalloutView");
          }
      
          // args
          // ref arg
          MACustomCalloutView* customCalloutView = (MACustomCalloutView*) HEAP[@([args[@"customCalloutView"] integerValue])];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.customCalloutView = customCalloutView;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_centerOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_centerOffset");
          }
      
          // args
          // struct arg
          NSValue* centerOffsetValue = (NSValue*) HEAP[@([args[@"centerOffset"] integerValue])];
          CGPoint centerOffset;
          [centerOffsetValue getValue:&centerOffset];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.centerOffset = centerOffset;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_calloutOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_calloutOffset");
          }
      
          // args
          // struct arg
          NSValue* calloutOffsetValue = (NSValue*) HEAP[@([args[@"calloutOffset"] integerValue])];
          CGPoint calloutOffset;
          [calloutOffsetValue getValue:&calloutOffset];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.calloutOffset = calloutOffset;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_enabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_enabled");
          }
      
          // args
          // jsonable arg
          BOOL enabled = [args[@"enabled"] boolValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.enabled = enabled;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_highlighted": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_highlighted");
          }
      
          // args
          // jsonable arg
          BOOL highlighted = [args[@"highlighted"] boolValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.highlighted = highlighted;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_selected": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_selected");
          }
      
          // args
          // jsonable arg
          BOOL selected = [args[@"selected"] boolValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.selected = selected;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_canShowCallout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_canShowCallout");
          }
      
          // args
          // jsonable arg
          BOOL canShowCallout = [args[@"canShowCallout"] boolValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.canShowCallout = canShowCallout;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_leftCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_leftCalloutAccessoryView");
          }
      
          // args
          // ref arg
          UIView* leftCalloutAccessoryView = (UIView*) HEAP[@([args[@"leftCalloutAccessoryView"] integerValue])];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.leftCalloutAccessoryView = leftCalloutAccessoryView;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_rightCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_rightCalloutAccessoryView");
          }
      
          // args
          // ref arg
          UIView* rightCalloutAccessoryView = (UIView*) HEAP[@([args[@"rightCalloutAccessoryView"] integerValue])];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.rightCalloutAccessoryView = rightCalloutAccessoryView;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_draggable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_draggable");
          }
      
          // args
          // jsonable arg
          BOOL draggable = [args[@"draggable"] boolValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.draggable = draggable;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_dragState": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_dragState");
          }
      
          // args
          // enum arg
          MAAnnotationViewDragState dragState = (MAAnnotationViewDragState) [args[@"dragState"] integerValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.dragState = dragState;
          methodResult(@"success");
      },
      
      @"MATileOverlay::set_tileSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlay::set_tileSize");
          }
      
          // args
          // struct arg
          NSValue* tileSizeValue = (NSValue*) HEAP[@([args[@"tileSize"] integerValue])];
          CGSize tileSize;
          [tileSizeValue getValue:&tileSize];
      
          // ref
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.tileSize = tileSize;
          methodResult(@"success");
      },
      
      @"MATileOverlay::set_minimumZ": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlay::set_minimumZ");
          }
      
          // args
          // jsonable arg
          NSInteger minimumZ = [args[@"minimumZ"] integerValue];
      
          // ref
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.minimumZ = minimumZ;
          methodResult(@"success");
      },
      
      @"MATileOverlay::set_maximumZ": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlay::set_maximumZ");
          }
      
          // args
          // jsonable arg
          NSInteger maximumZ = [args[@"maximumZ"] integerValue];
      
          // ref
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.maximumZ = maximumZ;
          methodResult(@"success");
      },
      
      @"MATileOverlay::set_canReplaceMapContent": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlay::set_canReplaceMapContent");
          }
      
          // args
          // jsonable arg
          BOOL canReplaceMapContent = [args[@"canReplaceMapContent"] boolValue];
      
          // ref
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.canReplaceMapContent = canReplaceMapContent;
          methodResult(@"success");
      },
      
      @"MATileOverlay::set_boundingMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlay::set_boundingMapRect");
          }
      
          // args
          // struct arg
          NSValue* boundingMapRectValue = (NSValue*) HEAP[@([args[@"boundingMapRect"] integerValue])];
          MAMapRect boundingMapRect;
          [boundingMapRectValue getValue:&boundingMapRect];
      
          // ref
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.boundingMapRect = boundingMapRect;
          methodResult(@"success");
      },
      
      @"MATileOverlay::set_disableOffScreenTileLoading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlay::set_disableOffScreenTileLoading");
          }
      
          // args
          // jsonable arg
          BOOL disableOffScreenTileLoading = [args[@"disableOffScreenTileLoading"] boolValue];
      
          // ref
          MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.disableOffScreenTileLoading = disableOffScreenTileLoading;
          methodResult(@"success");
      },
      
      @"MATileOverlayPath::set_x": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlayPath::set_x");
          }
      
          // args
          // jsonable arg
          NSInteger x = [args[@"x"] integerValue];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MATileOverlayPath ref;
          [dataValue getValue:&ref];
      
          ref.x = x;
          methodResult(@"success");
      },
      
      @"MATileOverlayPath::set_y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlayPath::set_y");
          }
      
          // args
          // jsonable arg
          NSInteger y = [args[@"y"] integerValue];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MATileOverlayPath ref;
          [dataValue getValue:&ref];
      
          ref.y = y;
          methodResult(@"success");
      },
      
      @"MATileOverlayPath::set_z": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlayPath::set_z");
          }
      
          // args
          // jsonable arg
          NSInteger z = [args[@"z"] integerValue];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MATileOverlayPath ref;
          [dataValue getValue:&ref];
      
          ref.z = z;
          methodResult(@"success");
      },
      
      @"MATileOverlayPath::set_contentScaleFactor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATileOverlayPath::set_contentScaleFactor");
          }
      
          // args
          // jsonable arg
          CGFloat contentScaleFactor = [args[@"contentScaleFactor"] floatValue];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MATileOverlayPath ref;
          [dataValue getValue:&ref];
      
          ref.contentScaleFactor = contentScaleFactor;
          methodResult(@"success");
      },
      
      @"MACustomCalloutView::set_userData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomCalloutView::set_userData");
          }
      
          // args
          // ref arg
          id userData = (id) HEAP[@([args[@"userData"] integerValue])];
      
          // ref
          MACustomCalloutView* ref = (MACustomCalloutView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.userData = userData;
          methodResult(@"success");
      },
      
      @"MAOfflineItemCommonCity::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOfflineItemCommonCity::set_province");
          }
      
          // args
          // ref arg
          MAOfflineItem* province = (MAOfflineItem*) HEAP[@([args[@"province"] integerValue])];
      
          // ref
          MAOfflineItemCommonCity* ref = (MAOfflineItemCommonCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.province = province;
          methodResult(@"success");
      },
      
      @"MACoordinateBounds::set_northEast": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACoordinateBounds::set_northEast");
          }
      
          // args
          // struct arg
          NSValue* northEastValue = (NSValue*) HEAP[@([args[@"northEast"] integerValue])];
          CLLocationCoordinate2D northEast;
          [northEastValue getValue:&northEast];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MACoordinateBounds ref;
          [dataValue getValue:&ref];
      
          ref.northEast = northEast;
          methodResult(@"success");
      },
      
      @"MACoordinateBounds::set_southWest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACoordinateBounds::set_southWest");
          }
      
          // args
          // struct arg
          NSValue* southWestValue = (NSValue*) HEAP[@([args[@"southWest"] integerValue])];
          CLLocationCoordinate2D southWest;
          [southWestValue getValue:&southWest];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MACoordinateBounds ref;
          [dataValue getValue:&ref];
      
          ref.southWest = southWest;
          methodResult(@"success");
      },
      
      @"MACoordinateSpan::set_latitudeDelta": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACoordinateSpan::set_latitudeDelta");
          }
      
          // args
          // jsonable arg
          CLLocationDegrees latitudeDelta = [args[@"latitudeDelta"] doubleValue];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MACoordinateSpan ref;
          [dataValue getValue:&ref];
      
          ref.latitudeDelta = latitudeDelta;
          methodResult(@"success");
      },
      
      @"MACoordinateSpan::set_longitudeDelta": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACoordinateSpan::set_longitudeDelta");
          }
      
          // args
          // jsonable arg
          CLLocationDegrees longitudeDelta = [args[@"longitudeDelta"] doubleValue];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MACoordinateSpan ref;
          [dataValue getValue:&ref];
      
          ref.longitudeDelta = longitudeDelta;
          methodResult(@"success");
      },
      
      @"MACoordinateRegion::set_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACoordinateRegion::set_center");
          }
      
          // args
          // struct arg
          NSValue* centerValue = (NSValue*) HEAP[@([args[@"center"] integerValue])];
          CLLocationCoordinate2D center;
          [centerValue getValue:&center];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MACoordinateRegion ref;
          [dataValue getValue:&ref];
      
          ref.center = center;
          methodResult(@"success");
      },
      
      @"MACoordinateRegion::set_span": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACoordinateRegion::set_span");
          }
      
          // args
          // struct arg
          NSValue* spanValue = (NSValue*) HEAP[@([args[@"span"] integerValue])];
          MACoordinateSpan span;
          [spanValue getValue:&span];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MACoordinateRegion ref;
          [dataValue getValue:&ref];
      
          ref.span = span;
          methodResult(@"success");
      },
      
      @"MAMapPoint::set_x": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapPoint::set_x");
          }
      
          // args
          // jsonable arg
          double x = [args[@"x"] doubleValue];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MAMapPoint ref;
          [dataValue getValue:&ref];
      
          ref.x = x;
          methodResult(@"success");
      },
      
      @"MAMapPoint::set_y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapPoint::set_y");
          }
      
          // args
          // jsonable arg
          double y = [args[@"y"] doubleValue];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MAMapPoint ref;
          [dataValue getValue:&ref];
      
          ref.y = y;
          methodResult(@"success");
      },
      
      @"MAMapSize::set_width": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapSize::set_width");
          }
      
          // args
          // jsonable arg
          double width = [args[@"width"] doubleValue];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MAMapSize ref;
          [dataValue getValue:&ref];
      
          ref.width = width;
          methodResult(@"success");
      },
      
      @"MAMapSize::set_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapSize::set_height");
          }
      
          // args
          // jsonable arg
          double height = [args[@"height"] doubleValue];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MAMapSize ref;
          [dataValue getValue:&ref];
      
          ref.height = height;
          methodResult(@"success");
      },
      
      @"MAMapRect::set_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapRect::set_origin");
          }
      
          // args
          // struct arg
          NSValue* originValue = (NSValue*) HEAP[@([args[@"origin"] integerValue])];
          MAMapPoint origin;
          [originValue getValue:&origin];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MAMapRect ref;
          [dataValue getValue:&ref];
      
          ref.origin = origin;
          methodResult(@"success");
      },
      
      @"MAMapRect::set_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapRect::set_size");
          }
      
          // args
          // struct arg
          NSValue* sizeValue = (NSValue*) HEAP[@([args[@"size"] integerValue])];
          MAMapSize size;
          [sizeValue getValue:&size];
      
          // ref
          NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
          MAMapRect ref;
          [dataValue getValue:&ref];
      
          ref.size = size;
          methodResult(@"success");
      },
      
      @"MAParticleOverlayOptions::set_visibile": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::set_visibile");
          }
      
          // args
          // jsonable arg
          BOOL visibile = [args[@"visibile"] boolValue];
      
          // ref
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.visibile = visibile;
          methodResult(@"success");
      },
      
      @"MAParticleOverlayOptions::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::set_duration");
          }
      
          // args
          // jsonable arg
          NSTimeInterval duration = [args[@"duration"] doubleValue];
      
          // ref
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.duration = duration;
          methodResult(@"success");
      },
      
      @"MAParticleOverlayOptions::set_loop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::set_loop");
          }
      
          // args
          // jsonable arg
          BOOL loop = [args[@"loop"] boolValue];
      
          // ref
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.loop = loop;
          methodResult(@"success");
      },
      
      @"MAParticleOverlayOptions::set_maxParticles": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::set_maxParticles");
          }
      
          // args
          // jsonable arg
          NSInteger maxParticles = [args[@"maxParticles"] integerValue];
      
          // ref
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.maxParticles = maxParticles;
          methodResult(@"success");
      },
      
      @"MAParticleOverlayOptions::set_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::set_icon");
          }
      
          // args
          // ref arg
          UIImage* icon = (UIImage*) HEAP[@([args[@"icon"] integerValue])];
      
          // ref
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.icon = icon;
          methodResult(@"success");
      },
      
      @"MAParticleOverlayOptions::set_startParticleSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::set_startParticleSize");
          }
      
          // args
          // struct arg
          NSValue* startParticleSizeValue = (NSValue*) HEAP[@([args[@"startParticleSize"] integerValue])];
          CGSize startParticleSize;
          [startParticleSizeValue getValue:&startParticleSize];
      
          // ref
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.startParticleSize = startParticleSize;
          methodResult(@"success");
      },
      
      @"MAParticleOverlayOptions::set_particleLifeTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::set_particleLifeTime");
          }
      
          // args
          // jsonable arg
          NSTimeInterval particleLifeTime = [args[@"particleLifeTime"] doubleValue];
      
          // ref
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.particleLifeTime = particleLifeTime;
          methodResult(@"success");
      },
      
      @"MAParticleOverlayOptions::set_particleStartColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::set_particleStartColor");
          }
      
          // args
          // ref arg
          id<MAParticleColorGenerate> particleStartColor = (id<MAParticleColorGenerate>) HEAP[@([args[@"particleStartColor"] integerValue])];
      
          // ref
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.particleStartColor = particleStartColor;
          methodResult(@"success");
      },
      
      @"MAParticleOverlayOptions::set_particleStartSpeed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::set_particleStartSpeed");
          }
      
          // args
          // ref arg
          id<MAParticleVelocityGenerate> particleStartSpeed = (id<MAParticleVelocityGenerate>) HEAP[@([args[@"particleStartSpeed"] integerValue])];
      
          // ref
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.particleStartSpeed = particleStartSpeed;
          methodResult(@"success");
      },
      
      @"MAParticleOverlayOptions::set_particleEmissionModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::set_particleEmissionModule");
          }
      
          // args
          // ref arg
          MAParticleEmissionModule* particleEmissionModule = (MAParticleEmissionModule*) HEAP[@([args[@"particleEmissionModule"] integerValue])];
      
          // ref
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.particleEmissionModule = particleEmissionModule;
          methodResult(@"success");
      },
      
      @"MAParticleOverlayOptions::set_particleShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::set_particleShapeModule");
          }
      
          // args
          // ref arg
          id<MAParticleShapeModule> particleShapeModule = (id<MAParticleShapeModule>) HEAP[@([args[@"particleShapeModule"] integerValue])];
      
          // ref
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.particleShapeModule = particleShapeModule;
          methodResult(@"success");
      },
      
      @"MAParticleOverlayOptions::set_particleOverLifeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAParticleOverlayOptions::set_particleOverLifeModule");
          }
      
          // args
          // ref arg
          MAParticleOverLifeModule* particleOverLifeModule = (MAParticleOverLifeModule*) HEAP[@([args[@"particleOverLifeModule"] integerValue])];
      
          // ref
          MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.particleOverLifeModule = particleOverLifeModule;
          methodResult(@"success");
      },
      
      @"MAOverlayRenderer::set_glPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayRenderer::set_glPoints");
          }
      
          // args
          // list arg
          NSArray* glPointsRefIdArray = (NSArray*) args[@"glPoints"];
          CGPoint glPoints[glPointsRefIdArray.count];
      
          for (int i = 0; i < glPointsRefIdArray.count; i++) {
              NSValue* glPointsValue = (NSValue*) HEAP[[glPointsRefIdArray objectAtIndex:i]];
              CGPoint glPointsItem;
              [glPointsValue getValue:&glPointsItem];
              glPoints[i] = glPointsItem;
          }
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.glPoints = glPoints;
          methodResult(@"success");
      },
      
      @"MAOverlayRenderer::set_glPointCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayRenderer::set_glPointCount");
          }
      
          // args
          // jsonable arg
          NSUInteger glPointCount = [args[@"glPointCount"] unsignedIntegerValue];
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.glPointCount = glPointCount;
          methodResult(@"success");
      },
      
      @"MAOverlayRenderer::set_strokeImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayRenderer::set_strokeImage");
          }
      
          // args
          // ref arg
          UIImage* strokeImage = (UIImage*) HEAP[@([args[@"strokeImage"] integerValue])];
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.strokeImage = strokeImage;
          methodResult(@"success");
      },
      
      @"MAOverlayRenderer::set_alpha": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayRenderer::set_alpha");
          }
      
          // args
          // jsonable arg
          CGFloat alpha = [args[@"alpha"] floatValue];
      
          // ref
          MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.alpha = alpha;
          methodResult(@"success");
      },
      
      @"MAMultiPointItem::set_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointItem::set_coordinate");
          }
      
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
      
          // ref
          MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.coordinate = coordinate;
          methodResult(@"success");
      },
      
      @"MAMultiPointItem::set_customID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointItem::set_customID");
          }
      
          // args
          // jsonable arg
          NSString* customID = (NSString*) args[@"customID"];
      
          // ref
          MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.customID = customID;
          methodResult(@"success");
      },
      
      @"MAMultiPointItem::set_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointItem::set_title");
          }
      
          // args
          // jsonable arg
          NSString* title = (NSString*) args[@"title"];
      
          // ref
          MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.title = title;
          methodResult(@"success");
      },
      
      @"MAMultiPointItem::set_subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMultiPointItem::set_subtitle");
          }
      
          // args
          // jsonable arg
          NSString* subtitle = (NSString*) args[@"subtitle"];
      
          // ref
          MAMultiPointItem* ref = (MAMultiPointItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.subtitle = subtitle;
          methodResult(@"success");
      },
      
      @"MACustomBuildingOverlayOption::set_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomBuildingOverlayOption::set_height");
          }
      
          // args
          // jsonable arg
          CGFloat height = [args[@"height"] floatValue];
      
          // ref
          MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.height = height;
          methodResult(@"success");
      },
      
      @"MACustomBuildingOverlayOption::set_heightScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomBuildingOverlayOption::set_heightScale");
          }
      
          // args
          // jsonable arg
          CGFloat heightScale = [args[@"heightScale"] floatValue];
      
          // ref
          MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.heightScale = heightScale;
          methodResult(@"success");
      },
      
      @"MACustomBuildingOverlayOption::set_topColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomBuildingOverlayOption::set_topColor");
          }
      
          // args
          // ref arg
          UIColor* topColor = (UIColor*) HEAP[@([args[@"topColor"] integerValue])];
      
          // ref
          MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.topColor = topColor;
          methodResult(@"success");
      },
      
      @"MACustomBuildingOverlayOption::set_sideColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomBuildingOverlayOption::set_sideColor");
          }
      
          // args
          // ref arg
          UIColor* sideColor = (UIColor*) HEAP[@([args[@"sideColor"] integerValue])];
      
          // ref
          MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.sideColor = sideColor;
          methodResult(@"success");
      },
      
      @"MACustomBuildingOverlayOption::set_visibile": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MACustomBuildingOverlayOption::set_visibile");
          }
      
          // args
          // jsonable arg
          BOOL visibile = [args[@"visibile"] boolValue];
      
          // ref
          MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.visibile = visibile;
          methodResult(@"success");
      },
      
      @"MATracePoint::set_latitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATracePoint::set_latitude");
          }
      
          // args
          // jsonable arg
          CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
      
          // ref
          MATracePoint* ref = (MATracePoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.latitude = latitude;
          methodResult(@"success");
      },
      
      @"MATracePoint::set_longitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATracePoint::set_longitude");
          }
      
          // args
          // jsonable arg
          CLLocationDegrees longitude = [args[@"longitude"] doubleValue];
      
          // ref
          MATracePoint* ref = (MATracePoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.longitude = longitude;
          methodResult(@"success");
      },
      
      @"MATraceLocation::set_loc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATraceLocation::set_loc");
          }
      
          // args
          // struct arg
          NSValue* locValue = (NSValue*) HEAP[@([args[@"loc"] integerValue])];
          CLLocationCoordinate2D loc;
          [locValue getValue:&loc];
      
          // ref
          MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.loc = loc;
          methodResult(@"success");
      },
      
      @"MATraceLocation::set_angle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATraceLocation::set_angle");
          }
      
          // args
          // jsonable arg
          double angle = [args[@"angle"] doubleValue];
      
          // ref
          MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.angle = angle;
          methodResult(@"success");
      },
      
      @"MATraceLocation::set_speed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATraceLocation::set_speed");
          }
      
          // args
          // jsonable arg
          double speed = [args[@"speed"] doubleValue];
      
          // ref
          MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.speed = speed;
          methodResult(@"success");
      },
      
      @"MATraceLocation::set_time": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MATraceLocation::set_time");
          }
      
          // args
          // jsonable arg
          double time = [args[@"time"] doubleValue];
      
          // ref
          MATraceLocation* ref = (MATraceLocation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.time = time;
          methodResult(@"success");
      },
      
      @"MAArc::set_startCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAArc::set_startCoordinate");
          }
      
          // args
          // struct arg
          NSValue* startCoordinateValue = (NSValue*) HEAP[@([args[@"startCoordinate"] integerValue])];
          CLLocationCoordinate2D startCoordinate;
          [startCoordinateValue getValue:&startCoordinate];
      
          // ref
          MAArc* ref = (MAArc*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.startCoordinate = startCoordinate;
          methodResult(@"success");
      },
      
      @"MAArc::set_passedCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAArc::set_passedCoordinate");
          }
      
          // args
          // struct arg
          NSValue* passedCoordinateValue = (NSValue*) HEAP[@([args[@"passedCoordinate"] integerValue])];
          CLLocationCoordinate2D passedCoordinate;
          [passedCoordinateValue getValue:&passedCoordinate];
      
          // ref
          MAArc* ref = (MAArc*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.passedCoordinate = passedCoordinate;
          methodResult(@"success");
      },
      
      @"MAArc::set_endCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAArc::set_endCoordinate");
          }
      
          // args
          // struct arg
          NSValue* endCoordinateValue = (NSValue*) HEAP[@([args[@"endCoordinate"] integerValue])];
          CLLocationCoordinate2D endCoordinate;
          [endCoordinateValue getValue:&endCoordinate];
      
          // ref
          MAArc* ref = (MAArc*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.endCoordinate = endCoordinate;
          methodResult(@"success");
      },
      
      @"MAUserLocationRepresentation::set_showsAccuracyRing": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::set_showsAccuracyRing");
          }
      
          // args
          // jsonable arg
          BOOL showsAccuracyRing = [args[@"showsAccuracyRing"] boolValue];
      
          // ref
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.showsAccuracyRing = showsAccuracyRing;
          methodResult(@"success");
      },
      
      @"MAUserLocationRepresentation::set_showsHeadingIndicator": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::set_showsHeadingIndicator");
          }
      
          // args
          // jsonable arg
          BOOL showsHeadingIndicator = [args[@"showsHeadingIndicator"] boolValue];
      
          // ref
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.showsHeadingIndicator = showsHeadingIndicator;
          methodResult(@"success");
      },
      
      @"MAUserLocationRepresentation::set_fillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::set_fillColor");
          }
      
          // args
          // ref arg
          UIColor* fillColor = (UIColor*) HEAP[@([args[@"fillColor"] integerValue])];
      
          // ref
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.fillColor = fillColor;
          methodResult(@"success");
      },
      
      @"MAUserLocationRepresentation::set_strokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::set_strokeColor");
          }
      
          // args
          // ref arg
          UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
      
          // ref
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.strokeColor = strokeColor;
          methodResult(@"success");
      },
      
      @"MAUserLocationRepresentation::set_lineWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::set_lineWidth");
          }
      
          // args
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
      
          // ref
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.lineWidth = lineWidth;
          methodResult(@"success");
      },
      
      @"MAUserLocationRepresentation::set_locationDotBgColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::set_locationDotBgColor");
          }
      
          // args
          // ref arg
          UIColor* locationDotBgColor = (UIColor*) HEAP[@([args[@"locationDotBgColor"] integerValue])];
      
          // ref
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.locationDotBgColor = locationDotBgColor;
          methodResult(@"success");
      },
      
      @"MAUserLocationRepresentation::set_locationDotFillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::set_locationDotFillColor");
          }
      
          // args
          // ref arg
          UIColor* locationDotFillColor = (UIColor*) HEAP[@([args[@"locationDotFillColor"] integerValue])];
      
          // ref
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.locationDotFillColor = locationDotFillColor;
          methodResult(@"success");
      },
      
      @"MAUserLocationRepresentation::set_enablePulseAnnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::set_enablePulseAnnimation");
          }
      
          // args
          // jsonable arg
          BOOL enablePulseAnnimation = [args[@"enablePulseAnnimation"] boolValue];
      
          // ref
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.enablePulseAnnimation = enablePulseAnnimation;
          methodResult(@"success");
      },
      
      @"MAUserLocationRepresentation::set_image": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAUserLocationRepresentation::set_image");
          }
      
          // args
          // ref arg
          UIImage* image = (UIImage*) HEAP[@([args[@"image"] integerValue])];
      
          // ref
          MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.image = image;
          methodResult(@"success");
      },
      
      @"MAMapView::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_delegate");
          }
      
          // args
      
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
      @"MAMapView::set_mapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_mapType");
          }
      
          // args
          // enum arg
          MAMapType mapType = (MAMapType) [args[@"mapType"] integerValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.mapType = mapType;
          methodResult(@"success");
      },
      
      @"MAMapView::set_centerCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_centerCoordinate");
          }
      
          // args
          // struct arg
          NSValue* centerCoordinateValue = (NSValue*) HEAP[@([args[@"centerCoordinate"] integerValue])];
          CLLocationCoordinate2D centerCoordinate;
          [centerCoordinateValue getValue:&centerCoordinate];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.centerCoordinate = centerCoordinate;
          methodResult(@"success");
      },
      
      @"MAMapView::set_region": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_region");
          }
      
          // args
          // struct arg
          NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
          MACoordinateRegion region;
          [regionValue getValue:&region];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.region = region;
          methodResult(@"success");
      },
      
      @"MAMapView::set_visibleMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_visibleMapRect");
          }
      
          // args
          // struct arg
          NSValue* visibleMapRectValue = (NSValue*) HEAP[@([args[@"visibleMapRect"] integerValue])];
          MAMapRect visibleMapRect;
          [visibleMapRectValue getValue:&visibleMapRect];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.visibleMapRect = visibleMapRect;
          methodResult(@"success");
      },
      
      @"MAMapView::set_limitRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_limitRegion");
          }
      
          // args
          // struct arg
          NSValue* limitRegionValue = (NSValue*) HEAP[@([args[@"limitRegion"] integerValue])];
          MACoordinateRegion limitRegion;
          [limitRegionValue getValue:&limitRegion];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.limitRegion = limitRegion;
          methodResult(@"success");
      },
      
      @"MAMapView::set_limitMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_limitMapRect");
          }
      
          // args
          // struct arg
          NSValue* limitMapRectValue = (NSValue*) HEAP[@([args[@"limitMapRect"] integerValue])];
          MAMapRect limitMapRect;
          [limitMapRectValue getValue:&limitMapRect];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.limitMapRect = limitMapRect;
          methodResult(@"success");
      },
      
      @"MAMapView::set_zoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_zoomLevel");
          }
      
          // args
          // jsonable arg
          CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.zoomLevel = zoomLevel;
          methodResult(@"success");
      },
      
      @"MAMapView::set_minZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_minZoomLevel");
          }
      
          // args
          // jsonable arg
          CGFloat minZoomLevel = [args[@"minZoomLevel"] floatValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.minZoomLevel = minZoomLevel;
          methodResult(@"success");
      },
      
      @"MAMapView::set_maxZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_maxZoomLevel");
          }
      
          // args
          // jsonable arg
          CGFloat maxZoomLevel = [args[@"maxZoomLevel"] floatValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.maxZoomLevel = maxZoomLevel;
          methodResult(@"success");
      },
      
      @"MAMapView::set_rotationDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_rotationDegree");
          }
      
          // args
          // jsonable arg
          CGFloat rotationDegree = [args[@"rotationDegree"] floatValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.rotationDegree = rotationDegree;
          methodResult(@"success");
      },
      
      @"MAMapView::set_cameraDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_cameraDegree");
          }
      
          // args
          // jsonable arg
          CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.cameraDegree = cameraDegree;
          methodResult(@"success");
      },
      
      @"MAMapView::set_zoomingInPivotsAroundAnchorPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_zoomingInPivotsAroundAnchorPoint");
          }
      
          // args
          // jsonable arg
          BOOL zoomingInPivotsAroundAnchorPoint = [args[@"zoomingInPivotsAroundAnchorPoint"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.zoomingInPivotsAroundAnchorPoint = zoomingInPivotsAroundAnchorPoint;
          methodResult(@"success");
      },
      
      @"MAMapView::set_zoomEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_zoomEnabled");
          }
      
          // args
          // jsonable arg
          BOOL zoomEnabled = [args[@"zoomEnabled"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.zoomEnabled = zoomEnabled;
          methodResult(@"success");
      },
      
      @"MAMapView::set_scrollEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_scrollEnabled");
          }
      
          // args
          // jsonable arg
          BOOL scrollEnabled = [args[@"scrollEnabled"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.scrollEnabled = scrollEnabled;
          methodResult(@"success");
      },
      
      @"MAMapView::set_rotateEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_rotateEnabled");
          }
      
          // args
          // jsonable arg
          BOOL rotateEnabled = [args[@"rotateEnabled"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.rotateEnabled = rotateEnabled;
          methodResult(@"success");
      },
      
      @"MAMapView::set_rotateCameraEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_rotateCameraEnabled");
          }
      
          // args
          // jsonable arg
          BOOL rotateCameraEnabled = [args[@"rotateCameraEnabled"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.rotateCameraEnabled = rotateCameraEnabled;
          methodResult(@"success");
      },
      
      @"MAMapView::set_skyModelEnable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_skyModelEnable");
          }
      
          // args
          // jsonable arg
          BOOL skyModelEnable = [args[@"skyModelEnable"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.skyModelEnable = skyModelEnable;
          methodResult(@"success");
      },
      
      @"MAMapView::set_showsBuildings": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_showsBuildings");
          }
      
          // args
          // jsonable arg
          BOOL showsBuildings = [args[@"showsBuildings"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.showsBuildings = showsBuildings;
          methodResult(@"success");
      },
      
      @"MAMapView::set_showsLabels": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_showsLabels");
          }
      
          // args
          // jsonable arg
          BOOL showsLabels = [args[@"showsLabels"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.showsLabels = showsLabels;
          methodResult(@"success");
      },
      
      @"MAMapView::set_showTraffic": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_showTraffic");
          }
      
          // args
          // jsonable arg
          BOOL showTraffic = [args[@"showTraffic"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.showTraffic = showTraffic;
          methodResult(@"success");
      },
      
      @"MAMapView::set_trafficRatio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_trafficRatio");
          }
      
          // args
          // jsonable arg
          CGFloat trafficRatio = [args[@"trafficRatio"] floatValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.trafficRatio = trafficRatio;
          methodResult(@"success");
      },
      
      @"MAMapView::set_touchPOIEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_touchPOIEnabled");
          }
      
          // args
          // jsonable arg
          BOOL touchPOIEnabled = [args[@"touchPOIEnabled"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.touchPOIEnabled = touchPOIEnabled;
          methodResult(@"success");
      },
      
      @"MAMapView::set_showsCompass": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_showsCompass");
          }
      
          // args
          // jsonable arg
          BOOL showsCompass = [args[@"showsCompass"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.showsCompass = showsCompass;
          methodResult(@"success");
      },
      
      @"MAMapView::set_compassOrigin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_compassOrigin");
          }
      
          // args
          // struct arg
          NSValue* compassOriginValue = (NSValue*) HEAP[@([args[@"compassOrigin"] integerValue])];
          CGPoint compassOrigin;
          [compassOriginValue getValue:&compassOrigin];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.compassOrigin = compassOrigin;
          methodResult(@"success");
      },
      
      @"MAMapView::set_showsScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_showsScale");
          }
      
          // args
          // jsonable arg
          BOOL showsScale = [args[@"showsScale"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.showsScale = showsScale;
          methodResult(@"success");
      },
      
      @"MAMapView::set_scaleOrigin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_scaleOrigin");
          }
      
          // args
          // struct arg
          NSValue* scaleOriginValue = (NSValue*) HEAP[@([args[@"scaleOrigin"] integerValue])];
          CGPoint scaleOrigin;
          [scaleOriginValue getValue:&scaleOrigin];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.scaleOrigin = scaleOrigin;
          methodResult(@"success");
      },
      
      @"MAMapView::set_logoCenter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_logoCenter");
          }
      
          // args
          // struct arg
          NSValue* logoCenterValue = (NSValue*) HEAP[@([args[@"logoCenter"] integerValue])];
          CGPoint logoCenter;
          [logoCenterValue getValue:&logoCenter];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.logoCenter = logoCenter;
          methodResult(@"success");
      },
      
      @"MAMapView::set_maxRenderFrame": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_maxRenderFrame");
          }
      
          // args
          // jsonable arg
          NSUInteger maxRenderFrame = [args[@"maxRenderFrame"] unsignedIntegerValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.maxRenderFrame = maxRenderFrame;
          methodResult(@"success");
      },
      
      @"MAMapView::set_isAllowDecreaseFrame": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_isAllowDecreaseFrame");
          }
      
          // args
          // jsonable arg
          BOOL isAllowDecreaseFrame = [args[@"isAllowDecreaseFrame"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.isAllowDecreaseFrame = isAllowDecreaseFrame;
          methodResult(@"success");
      },
      
      @"MAMapView::set_openGLESDisabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_openGLESDisabled");
          }
      
          // args
          // jsonable arg
          BOOL openGLESDisabled = [args[@"openGLESDisabled"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.openGLESDisabled = openGLESDisabled;
          methodResult(@"success");
      },
      
      @"MAMapView::set_screenAnchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_screenAnchor");
          }
      
          // args
          // struct arg
          NSValue* screenAnchorValue = (NSValue*) HEAP[@([args[@"screenAnchor"] integerValue])];
          CGPoint screenAnchor;
          [screenAnchorValue getValue:&screenAnchor];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.screenAnchor = screenAnchor;
          methodResult(@"success");
      },
      
      @"MAMapView::set_selectedAnnotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_selectedAnnotations");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* selectedAnnotationsRefArray = (NSArray<NSNumber*> *) args[@"selectedAnnotations"];
          NSMutableArray<NSArray*>* selectedAnnotations = [NSMutableArray arrayWithCapacity:selectedAnnotationsRefArray.count];
          for (int i = 0; i < selectedAnnotationsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[selectedAnnotationsRefArray objectAtIndex:i]];
              [selectedAnnotations addObject:item];
          }
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.selectedAnnotations = selectedAnnotations;
          methodResult(@"success");
      },
      
      @"MAMapView::set_allowsAnnotationViewSorting": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_allowsAnnotationViewSorting");
          }
      
          // args
          // jsonable arg
          BOOL allowsAnnotationViewSorting = [args[@"allowsAnnotationViewSorting"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.allowsAnnotationViewSorting = allowsAnnotationViewSorting;
          methodResult(@"success");
      },
      
      @"MAMapView::set_showsUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_showsUserLocation");
          }
      
          // args
          // jsonable arg
          BOOL showsUserLocation = [args[@"showsUserLocation"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.showsUserLocation = showsUserLocation;
          methodResult(@"success");
      },
      
      @"MAMapView::set_customizeUserLocationAccuracyCircleRepresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_customizeUserLocationAccuracyCircleRepresentation");
          }
      
          // args
          // jsonable arg
          BOOL customizeUserLocationAccuracyCircleRepresentation = [args[@"customizeUserLocationAccuracyCircleRepresentation"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.customizeUserLocationAccuracyCircleRepresentation = customizeUserLocationAccuracyCircleRepresentation;
          methodResult(@"success");
      },
      
      @"MAMapView::set_userTrackingMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_userTrackingMode");
          }
      
          // args
          // enum arg
          MAUserTrackingMode userTrackingMode = (MAUserTrackingMode) [args[@"userTrackingMode"] integerValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.userTrackingMode = userTrackingMode;
          methodResult(@"success");
      },
      
      @"MAMapView::set_distanceFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_distanceFilter");
          }
      
          // args
          // jsonable arg
          CLLocationDistance distanceFilter = [args[@"distanceFilter"] doubleValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distanceFilter = distanceFilter;
          methodResult(@"success");
      },
      
      @"MAMapView::set_desiredAccuracy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_desiredAccuracy");
          }
      
          // args
          // jsonable arg
          CLLocationAccuracy desiredAccuracy = [args[@"desiredAccuracy"] doubleValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.desiredAccuracy = desiredAccuracy;
          methodResult(@"success");
      },
      
      @"MAMapView::set_headingFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_headingFilter");
          }
      
          // args
          // jsonable arg
          CLLocationDegrees headingFilter = [args[@"headingFilter"] doubleValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.headingFilter = headingFilter;
          methodResult(@"success");
      },
      
      @"MAMapView::set_pausesLocationUpdatesAutomatically": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_pausesLocationUpdatesAutomatically");
          }
      
          // args
          // jsonable arg
          BOOL pausesLocationUpdatesAutomatically = [args[@"pausesLocationUpdatesAutomatically"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.pausesLocationUpdatesAutomatically = pausesLocationUpdatesAutomatically;
          methodResult(@"success");
      },
      
      @"MAMapView::set_allowsBackgroundLocationUpdates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_allowsBackgroundLocationUpdates");
          }
      
          // args
          // jsonable arg
          BOOL allowsBackgroundLocationUpdates = [args[@"allowsBackgroundLocationUpdates"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.allowsBackgroundLocationUpdates = allowsBackgroundLocationUpdates;
          methodResult(@"success");
      },
      
      @"MAMapView::set_showsIndoorMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_showsIndoorMap");
          }
      
          // args
          // jsonable arg
          BOOL showsIndoorMap = [args[@"showsIndoorMap"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.showsIndoorMap = showsIndoorMap;
          methodResult(@"success");
      },
      
      @"MAMapView::set_showsIndoorMapControl": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_showsIndoorMapControl");
          }
      
          // args
          // jsonable arg
          BOOL showsIndoorMapControl = [args[@"showsIndoorMapControl"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.showsIndoorMapControl = showsIndoorMapControl;
          methodResult(@"success");
      },
      
      @"MAMapView::set_customMapStyleEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAMapView::set_customMapStyleEnabled");
          }
      
          // args
          // jsonable arg
          BOOL customMapStyleEnabled = [args[@"customMapStyleEnabled"] boolValue];
      
          // ref
          MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.customMapStyleEnabled = customMapStyleEnabled;
          methodResult(@"success");
      },
      
      @"MAOverlayPathRenderer::set_fillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::set_fillColor");
          }
      
          // args
          // ref arg
          UIColor* fillColor = (UIColor*) HEAP[@([args[@"fillColor"] integerValue])];
      
          // ref
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.fillColor = fillColor;
          methodResult(@"success");
      },
      
      @"MAOverlayPathRenderer::set_strokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::set_strokeColor");
          }
      
          // args
          // ref arg
          UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
      
          // ref
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.strokeColor = strokeColor;
          methodResult(@"success");
      },
      
      @"MAOverlayPathRenderer::set_lineWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::set_lineWidth");
          }
      
          // args
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
      
          // ref
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.lineWidth = lineWidth;
          methodResult(@"success");
      },
      
      @"MAOverlayPathRenderer::set_lineJoinType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::set_lineJoinType");
          }
      
          // args
          // enum arg
          MALineJoinType lineJoinType = (MALineJoinType) [args[@"lineJoinType"] integerValue];
      
          // ref
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.lineJoinType = lineJoinType;
          methodResult(@"success");
      },
      
      @"MAOverlayPathRenderer::set_lineCapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::set_lineCapType");
          }
      
          // args
          // enum arg
          MALineCapType lineCapType = (MALineCapType) [args[@"lineCapType"] integerValue];
      
          // ref
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.lineCapType = lineCapType;
          methodResult(@"success");
      },
      
      @"MAOverlayPathRenderer::set_miterLimit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::set_miterLimit");
          }
      
          // args
          // jsonable arg
          CGFloat miterLimit = [args[@"miterLimit"] floatValue];
      
          // ref
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.miterLimit = miterLimit;
          methodResult(@"success");
      },
      
      @"MAOverlayPathRenderer::set_lineDash": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::set_lineDash");
          }
      
          // args
          // jsonable arg
          BOOL lineDash = [args[@"lineDash"] boolValue];
      
          // ref
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.lineDash = lineDash;
          methodResult(@"success");
      },
      
      @"MAOverlayPathRenderer::set_lineDashType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAOverlayPathRenderer::set_lineDashType");
          }
      
          // args
          // enum arg
          MALineDashType lineDashType = (MALineDashType) [args[@"lineDashType"] integerValue];
      
          // ref
          MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.lineDashType = lineDashType;
          methodResult(@"success");
      },
      
      @"RefClass::isKindOfMAOfflineCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAOfflineCity class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAOfflineItemNationWide": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAOfflineItemNationWide class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAMultiPoint class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAGroundOverlay class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAPolygonRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAPolygonRenderer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAPinAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAPinAnnotationView class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAHeatMapNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAHeatMapNode class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAHeatMapGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAHeatMapGradient class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAHeatMapTileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAHeatMapTileOverlay class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAMapStatus class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAPointAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAPointAnnotation class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMACircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MACircle class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAArcRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAArcRenderer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAMapCustomStyleOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAMapCustomStyleOptions class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAPolygon class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAParticleOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAParticleOverlay class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAPolyline class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAMultiColoredPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAMultiColoredPolylineRenderer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAAnimatedAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAAnimatedAnnotation class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAMultiTexturePolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAMultiTexturePolylineRenderer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAOfflineProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAOfflineProvince class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMATileOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MATileOverlayRenderer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAOfflineItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAOfflineItem class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAGeodesicPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAGeodesicPolyline class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMATouchPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MATouchPoi class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAOfflineItemMunicipality": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAOfflineItemMunicipality class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAMultiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAMultiPolyline class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMATraceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MATraceManager class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAMultiPointOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAMultiPointOverlayRenderer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAIndoorFloorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAIndoorFloorInfo class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAIndoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAIndoorInfo class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAPolylineRenderer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAAnnotationMoveAnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAAnnotationMoveAnimation class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAShape": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAShape class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAAnnotationView class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMATileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MATileOverlay class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMACustomCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MACustomCalloutView class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAOfflineItemCommonCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAOfflineItemCommonCity class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAOfflineMap class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMACircleRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MACircleRenderer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAParticleOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAParticleOverlayRenderer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAParticleRandomVelocityGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAParticleRandomVelocityGenerate class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAParticleRandomColorGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAParticleRandomColorGenerate class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAParticleConstantRotationGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAParticleConstantRotationGenerate class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAParticleCurveSizeGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAParticleCurveSizeGenerate class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAParticleEmissionModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAParticleEmissionModule class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAParticleSinglePointShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAParticleSinglePointShapeModule class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAParticleRectShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAParticleRectShapeModule class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAParticleOverLifeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAParticleOverLifeModule class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAParticleOverlayOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAParticleOverlayOptions class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAParticleOverlayOptionsFactory": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAParticleOverlayOptionsFactory class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAOverlayRenderer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAUserLocation class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAMultiPointItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAMultiPointItem class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAMultiPointOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAMultiPointOverlay class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMACustomBuildingOverlayOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MACustomBuildingOverlayOption class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMACustomBuildingOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MACustomBuildingOverlay class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMATracePoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MATracePoint class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMATraceLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MATraceLocation class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAArc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAArc class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAUserLocationRepresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAUserLocationRepresentation class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAMapView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAMapView class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAOverlayPathRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAOverlayPathRenderer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMAGroundOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MAGroundOverlayRenderer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfMACustomBuildingOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[MACustomBuildingOverlayRenderer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::asMAOfflineCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAOfflineCity *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAOfflineItemNationWide": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAOfflineItemNationWide *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAMultiPoint *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAGroundOverlay *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAPolygonRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAPolygonRenderer *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAPinAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAPinAnnotationView *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAHeatMapNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAHeatMapNode *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAHeatMapGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAHeatMapGradient *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAHeatMapTileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAHeatMapTileOverlay *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAMapStatus *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAPointAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAPointAnnotation *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMACircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MACircle *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAArcRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAArcRenderer *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAMapCustomStyleOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAMapCustomStyleOptions *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAPolygon *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAParticleOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAParticleOverlay *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAPolyline *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAMultiColoredPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAMultiColoredPolylineRenderer *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAAnimatedAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAAnimatedAnnotation *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAMultiTexturePolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAMultiTexturePolylineRenderer *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAOfflineProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAOfflineProvince *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMATileOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MATileOverlayRenderer *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAOfflineItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAOfflineItem *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAGeodesicPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAGeodesicPolyline *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMATouchPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MATouchPoi *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAOfflineItemMunicipality": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAOfflineItemMunicipality *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAMultiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAMultiPolyline *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMATraceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MATraceManager *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAMultiPointOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAMultiPointOverlayRenderer *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAIndoorFloorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAIndoorFloorInfo *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAIndoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAIndoorInfo *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAPolylineRenderer *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAAnnotationMoveAnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAAnnotationMoveAnimation *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAShape": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAShape *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAAnnotationView *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMATileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MATileOverlay *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMACustomCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MACustomCalloutView *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAOfflineItemCommonCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAOfflineItemCommonCity *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAOfflineMap *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMACircleRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MACircleRenderer *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAParticleOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAParticleOverlayRenderer *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAParticleRandomVelocityGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAParticleRandomVelocityGenerate *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAParticleRandomColorGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAParticleRandomColorGenerate *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAParticleConstantRotationGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAParticleConstantRotationGenerate *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAParticleCurveSizeGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAParticleCurveSizeGenerate *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAParticleEmissionModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAParticleEmissionModule *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAParticleSinglePointShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAParticleSinglePointShapeModule *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAParticleRectShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAParticleRectShapeModule *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAParticleOverLifeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAParticleOverLifeModule *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAParticleOverlayOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAParticleOverlayOptions *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAParticleOverlayOptionsFactory": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAParticleOverlayOptionsFactory *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAOverlayRenderer *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAUserLocation *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAMultiPointItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAMultiPointItem *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAMultiPointOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAMultiPointOverlay *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMACustomBuildingOverlayOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MACustomBuildingOverlayOption *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMACustomBuildingOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MACustomBuildingOverlay *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMATracePoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MATracePoint *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMATraceLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MATraceLocation *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAArc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAArc *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAUserLocationRepresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAUserLocationRepresentation *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAMapView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAMapView *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAOverlayPathRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAOverlayPathRenderer *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMAGroundOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MAGroundOverlayRenderer *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asMACustomBuildingOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (MACustomBuildingOverlayRenderer *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"ObjectFactory::createMAOfflineCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAOfflineCity");
          }
      
          MAOfflineCity* ref = [[MAOfflineCity alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAOfflineItemNationWide": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAOfflineItemNationWide");
          }
      
          MAOfflineItemNationWide* ref = [[MAOfflineItemNationWide alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAMultiPoint");
          }
      
          MAMultiPoint* ref = [[MAMultiPoint alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAGroundOverlay");
          }
      
          MAGroundOverlay* ref = [[MAGroundOverlay alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAPolygonRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAPolygonRenderer");
          }
      
          MAPolygonRenderer* ref = [[MAPolygonRenderer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAPinAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAPinAnnotationView");
          }
      
          MAPinAnnotationView* ref = [[MAPinAnnotationView alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAHeatMapNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAHeatMapNode");
          }
      
          MAHeatMapNode* ref = [[MAHeatMapNode alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAHeatMapGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAHeatMapGradient");
          }
      
          MAHeatMapGradient* ref = [[MAHeatMapGradient alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAHeatMapTileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAHeatMapTileOverlay");
          }
      
          MAHeatMapTileOverlay* ref = [[MAHeatMapTileOverlay alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAMapStatus");
          }
      
          MAMapStatus* ref = [[MAMapStatus alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAPointAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAPointAnnotation");
          }
      
          MAPointAnnotation* ref = [[MAPointAnnotation alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMACircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMACircle");
          }
      
          MACircle* ref = [[MACircle alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAArcRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAArcRenderer");
          }
      
          MAArcRenderer* ref = [[MAArcRenderer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAMapCustomStyleOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAMapCustomStyleOptions");
          }
      
          MAMapCustomStyleOptions* ref = [[MAMapCustomStyleOptions alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAPolygon");
          }
      
          MAPolygon* ref = [[MAPolygon alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAParticleOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAParticleOverlay");
          }
      
          MAParticleOverlay* ref = [[MAParticleOverlay alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAPolyline");
          }
      
          MAPolyline* ref = [[MAPolyline alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAMultiColoredPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAMultiColoredPolylineRenderer");
          }
      
          MAMultiColoredPolylineRenderer* ref = [[MAMultiColoredPolylineRenderer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAAnimatedAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAAnimatedAnnotation");
          }
      
          MAAnimatedAnnotation* ref = [[MAAnimatedAnnotation alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAMultiTexturePolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAMultiTexturePolylineRenderer");
          }
      
          MAMultiTexturePolylineRenderer* ref = [[MAMultiTexturePolylineRenderer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAOfflineProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAOfflineProvince");
          }
      
          MAOfflineProvince* ref = [[MAOfflineProvince alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMATileOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMATileOverlayRenderer");
          }
      
          MATileOverlayRenderer* ref = [[MATileOverlayRenderer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAOfflineItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAOfflineItem");
          }
      
          MAOfflineItem* ref = [[MAOfflineItem alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAGeodesicPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAGeodesicPolyline");
          }
      
          MAGeodesicPolyline* ref = [[MAGeodesicPolyline alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMATouchPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMATouchPoi");
          }
      
          MATouchPoi* ref = [[MATouchPoi alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAOfflineItemMunicipality": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAOfflineItemMunicipality");
          }
      
          MAOfflineItemMunicipality* ref = [[MAOfflineItemMunicipality alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAMultiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAMultiPolyline");
          }
      
          MAMultiPolyline* ref = [[MAMultiPolyline alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMATraceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMATraceManager");
          }
      
          MATraceManager* ref = [[MATraceManager alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAMultiPointOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAMultiPointOverlayRenderer");
          }
      
          MAMultiPointOverlayRenderer* ref = [[MAMultiPointOverlayRenderer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAIndoorFloorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAIndoorFloorInfo");
          }
      
          MAIndoorFloorInfo* ref = [[MAIndoorFloorInfo alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAIndoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAIndoorInfo");
          }
      
          MAIndoorInfo* ref = [[MAIndoorInfo alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAPolylineRenderer");
          }
      
          MAPolylineRenderer* ref = [[MAPolylineRenderer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAAnnotationMoveAnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAAnnotationMoveAnimation");
          }
      
          MAAnnotationMoveAnimation* ref = [[MAAnnotationMoveAnimation alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAShape": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAShape");
          }
      
          MAShape* ref = [[MAShape alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAAnnotationView");
          }
      
          MAAnnotationView* ref = [[MAAnnotationView alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMATileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMATileOverlay");
          }
      
          MATileOverlay* ref = [[MATileOverlay alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMATileOverlayPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMATileOverlayPath");
          }
      
          MATileOverlayPath data;
      
          NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MATileOverlayPath)];
          HEAP[@(dataValue.hash)] = dataValue;
      
          methodResult(@(dataValue.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMACustomCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMACustomCalloutView");
          }
      
          MACustomCalloutView* ref = [[MACustomCalloutView alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAOfflineItemCommonCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAOfflineItemCommonCity");
          }
      
          MAOfflineItemCommonCity* ref = [[MAOfflineItemCommonCity alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAOfflineMap");
          }
      
          MAOfflineMap* ref = [[MAOfflineMap alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMACircleRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMACircleRenderer");
          }
      
          MACircleRenderer* ref = [[MACircleRenderer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAParticleOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAParticleOverlayRenderer");
          }
      
          MAParticleOverlayRenderer* ref = [[MAParticleOverlayRenderer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMACoordinateBounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMACoordinateBounds");
          }
      
          MACoordinateBounds data;
      
          NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateBounds)];
          HEAP[@(dataValue.hash)] = dataValue;
      
          methodResult(@(dataValue.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMACoordinateSpan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMACoordinateSpan");
          }
      
          MACoordinateSpan data;
      
          NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateSpan)];
          HEAP[@(dataValue.hash)] = dataValue;
      
          methodResult(@(dataValue.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMACoordinateRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMACoordinateRegion");
          }
      
          MACoordinateRegion data;
      
          NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateRegion)];
          HEAP[@(dataValue.hash)] = dataValue;
      
          methodResult(@(dataValue.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAMapPoint");
          }
      
          MAMapPoint data;
      
          NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapPoint)];
          HEAP[@(dataValue.hash)] = dataValue;
      
          methodResult(@(dataValue.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAMapSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAMapSize");
          }
      
          MAMapSize data;
      
          NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapSize)];
          HEAP[@(dataValue.hash)] = dataValue;
      
          methodResult(@(dataValue.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAMapRect");
          }
      
          MAMapRect data;
      
          NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapRect)];
          HEAP[@(dataValue.hash)] = dataValue;
      
          methodResult(@(dataValue.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAParticleRandomVelocityGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAParticleRandomVelocityGenerate");
          }
      
          MAParticleRandomVelocityGenerate* ref = [[MAParticleRandomVelocityGenerate alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAParticleRandomColorGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAParticleRandomColorGenerate");
          }
      
          MAParticleRandomColorGenerate* ref = [[MAParticleRandomColorGenerate alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAParticleConstantRotationGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAParticleConstantRotationGenerate");
          }
      
          MAParticleConstantRotationGenerate* ref = [[MAParticleConstantRotationGenerate alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAParticleCurveSizeGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAParticleCurveSizeGenerate");
          }
      
          MAParticleCurveSizeGenerate* ref = [[MAParticleCurveSizeGenerate alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAParticleEmissionModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAParticleEmissionModule");
          }
      
          MAParticleEmissionModule* ref = [[MAParticleEmissionModule alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAParticleSinglePointShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAParticleSinglePointShapeModule");
          }
      
          MAParticleSinglePointShapeModule* ref = [[MAParticleSinglePointShapeModule alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAParticleRectShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAParticleRectShapeModule");
          }
      
          MAParticleRectShapeModule* ref = [[MAParticleRectShapeModule alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAParticleOverLifeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAParticleOverLifeModule");
          }
      
          MAParticleOverLifeModule* ref = [[MAParticleOverLifeModule alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAParticleOverlayOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAParticleOverlayOptions");
          }
      
          MAParticleOverlayOptions* ref = [[MAParticleOverlayOptions alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAParticleOverlayOptionsFactory": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAParticleOverlayOptionsFactory");
          }
      
          MAParticleOverlayOptionsFactory* ref = [[MAParticleOverlayOptionsFactory alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAOverlayRenderer");
          }
      
          MAOverlayRenderer* ref = [[MAOverlayRenderer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAUserLocation");
          }
      
          MAUserLocation* ref = [[MAUserLocation alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAMultiPointItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAMultiPointItem");
          }
      
          MAMultiPointItem* ref = [[MAMultiPointItem alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAMultiPointOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAMultiPointOverlay");
          }
      
          MAMultiPointOverlay* ref = [[MAMultiPointOverlay alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMACustomBuildingOverlayOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMACustomBuildingOverlayOption");
          }
      
          MACustomBuildingOverlayOption* ref = [[MACustomBuildingOverlayOption alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMACustomBuildingOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMACustomBuildingOverlay");
          }
      
          MACustomBuildingOverlay* ref = [[MACustomBuildingOverlay alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMATracePoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMATracePoint");
          }
      
          MATracePoint* ref = [[MATracePoint alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMATraceLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMATraceLocation");
          }
      
          MATraceLocation* ref = [[MATraceLocation alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAArc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAArc");
          }
      
          MAArc* ref = [[MAArc alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAUserLocationRepresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAUserLocationRepresentation");
          }
      
          MAUserLocationRepresentation* ref = [[MAUserLocationRepresentation alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAMapView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAMapView");
          }
      
          MAMapView* ref = [[MAMapView alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAOverlayPathRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAOverlayPathRenderer");
          }
      
          MAOverlayPathRenderer* ref = [[MAOverlayPathRenderer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMAGroundOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMAGroundOverlayRenderer");
          }
      
          MAGroundOverlayRenderer* ref = [[MAGroundOverlayRenderer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createMACustomBuildingOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createMACustomBuildingOverlayRenderer");
          }
      
          MACustomBuildingOverlayRenderer* ref = [[MACustomBuildingOverlayRenderer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAOfflineCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAOfflineCity* ref = [[MAOfflineCity alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAOfflineItemNationWide": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAOfflineItemNationWide* ref = [[MAOfflineItemNationWide alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAMultiPoint* ref = [[MAMultiPoint alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAGroundOverlay* ref = [[MAGroundOverlay alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAPolygonRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAPolygonRenderer* ref = [[MAPolygonRenderer alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAPinAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAPinAnnotationView* ref = [[MAPinAnnotationView alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAHeatMapNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAHeatMapNode* ref = [[MAHeatMapNode alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAHeatMapGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAHeatMapGradient* ref = [[MAHeatMapGradient alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAHeatMapTileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAHeatMapTileOverlay* ref = [[MAHeatMapTileOverlay alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAMapStatus* ref = [[MAMapStatus alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAPointAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAPointAnnotation* ref = [[MAPointAnnotation alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMACircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MACircle* ref = [[MACircle alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAArcRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAArcRenderer* ref = [[MAArcRenderer alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAMapCustomStyleOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAMapCustomStyleOptions* ref = [[MAMapCustomStyleOptions alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAPolygon* ref = [[MAPolygon alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAParticleOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAParticleOverlay* ref = [[MAParticleOverlay alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAPolyline* ref = [[MAPolyline alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAMultiColoredPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAMultiColoredPolylineRenderer* ref = [[MAMultiColoredPolylineRenderer alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAAnimatedAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAAnimatedAnnotation* ref = [[MAAnimatedAnnotation alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAMultiTexturePolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAMultiTexturePolylineRenderer* ref = [[MAMultiTexturePolylineRenderer alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAOfflineProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAOfflineProvince* ref = [[MAOfflineProvince alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMATileOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MATileOverlayRenderer* ref = [[MATileOverlayRenderer alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAOfflineItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAOfflineItem* ref = [[MAOfflineItem alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAGeodesicPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAGeodesicPolyline* ref = [[MAGeodesicPolyline alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMATouchPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MATouchPoi* ref = [[MATouchPoi alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAOfflineItemMunicipality": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAOfflineItemMunicipality* ref = [[MAOfflineItemMunicipality alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAMultiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAMultiPolyline* ref = [[MAMultiPolyline alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMATraceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MATraceManager* ref = [[MATraceManager alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAMultiPointOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAMultiPointOverlayRenderer* ref = [[MAMultiPointOverlayRenderer alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAIndoorFloorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAIndoorFloorInfo* ref = [[MAIndoorFloorInfo alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAIndoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAIndoorInfo* ref = [[MAIndoorInfo alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAPolylineRenderer* ref = [[MAPolylineRenderer alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAAnnotationMoveAnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAAnnotationMoveAnimation* ref = [[MAAnnotationMoveAnimation alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAShape": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAShape* ref = [[MAShape alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAAnnotationView* ref = [[MAAnnotationView alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMATileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MATileOverlay* ref = [[MATileOverlay alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMATileOverlayPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MATileOverlayPath data;
      
              NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MATileOverlayPath)];
              HEAP[@(dataValue.hash)] = dataValue;
      
              [resultList addObject:@(dataValue.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMACustomCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MACustomCalloutView* ref = [[MACustomCalloutView alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAOfflineItemCommonCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAOfflineItemCommonCity* ref = [[MAOfflineItemCommonCity alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAOfflineMap* ref = [[MAOfflineMap alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMACircleRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MACircleRenderer* ref = [[MACircleRenderer alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAParticleOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAParticleOverlayRenderer* ref = [[MAParticleOverlayRenderer alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMACoordinateBounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MACoordinateBounds data;
      
              NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateBounds)];
              HEAP[@(dataValue.hash)] = dataValue;
      
              [resultList addObject:@(dataValue.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMACoordinateSpan": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MACoordinateSpan data;
      
              NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateSpan)];
              HEAP[@(dataValue.hash)] = dataValue;
      
              [resultList addObject:@(dataValue.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMACoordinateRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MACoordinateRegion data;
      
              NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateRegion)];
              HEAP[@(dataValue.hash)] = dataValue;
      
              [resultList addObject:@(dataValue.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAMapPoint data;
      
              NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapPoint)];
              HEAP[@(dataValue.hash)] = dataValue;
      
              [resultList addObject:@(dataValue.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAMapSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAMapSize data;
      
              NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapSize)];
              HEAP[@(dataValue.hash)] = dataValue;
      
              [resultList addObject:@(dataValue.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAMapRect data;
      
              NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapRect)];
              HEAP[@(dataValue.hash)] = dataValue;
      
              [resultList addObject:@(dataValue.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAParticleRandomVelocityGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAParticleRandomVelocityGenerate* ref = [[MAParticleRandomVelocityGenerate alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAParticleRandomColorGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAParticleRandomColorGenerate* ref = [[MAParticleRandomColorGenerate alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAParticleConstantRotationGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAParticleConstantRotationGenerate* ref = [[MAParticleConstantRotationGenerate alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAParticleCurveSizeGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAParticleCurveSizeGenerate* ref = [[MAParticleCurveSizeGenerate alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAParticleEmissionModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAParticleEmissionModule* ref = [[MAParticleEmissionModule alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAParticleSinglePointShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAParticleSinglePointShapeModule* ref = [[MAParticleSinglePointShapeModule alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAParticleRectShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAParticleRectShapeModule* ref = [[MAParticleRectShapeModule alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAParticleOverLifeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAParticleOverLifeModule* ref = [[MAParticleOverLifeModule alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAParticleOverlayOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAParticleOverlayOptions* ref = [[MAParticleOverlayOptions alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAParticleOverlayOptionsFactory": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAParticleOverlayOptionsFactory* ref = [[MAParticleOverlayOptionsFactory alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAOverlayRenderer* ref = [[MAOverlayRenderer alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAUserLocation* ref = [[MAUserLocation alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAMultiPointItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAMultiPointItem* ref = [[MAMultiPointItem alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAMultiPointOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAMultiPointOverlay* ref = [[MAMultiPointOverlay alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMACustomBuildingOverlayOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MACustomBuildingOverlayOption* ref = [[MACustomBuildingOverlayOption alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMACustomBuildingOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MACustomBuildingOverlay* ref = [[MACustomBuildingOverlay alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMATracePoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MATracePoint* ref = [[MATracePoint alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMATraceLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MATraceLocation* ref = [[MATraceLocation alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAArc": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAArc* ref = [[MAArc alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAUserLocationRepresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAUserLocationRepresentation* ref = [[MAUserLocationRepresentation alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAMapView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAMapView* ref = [[MAMapView alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAOverlayPathRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAOverlayPathRenderer* ref = [[MAOverlayPathRenderer alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMAGroundOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MAGroundOverlayRenderer* ref = [[MAGroundOverlayRenderer alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchMACustomBuildingOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              MACustomBuildingOverlayRenderer* ref = [[MACustomBuildingOverlayRenderer alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"MACoordinateBoundsMake::MACoordinateBoundsMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* northEastValue = (NSValue*) HEAP[@([args[@"northEast"] integerValue])];
          CLLocationCoordinate2D northEast;
          [northEastValue getValue:&northEast];
          // struct arg
          NSValue* southWestValue = (NSValue*) HEAP[@([args[@"southWest"] integerValue])];
          CLLocationCoordinate2D southWest;
          [southWestValue getValue:&southWest];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACoordinateBoundsMake::MACoordinateBoundsMake(暂未实现参数打印)");
          }
      
          // invoke native method
          MACoordinateBounds result = MACoordinateBoundsMake(northEast, southWest);
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateBounds)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MACoordinateSpanMake::MACoordinateSpanMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CLLocationDegrees latitudeDelta = [args[@"latitudeDelta"] doubleValue];
          // jsonable arg
          CLLocationDegrees longitudeDelta = [args[@"longitudeDelta"] doubleValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACoordinateSpanMake::MACoordinateSpanMake(暂未实现参数打印)");
          }
      
          // invoke native method
          MACoordinateSpan result = MACoordinateSpanMake(latitudeDelta, longitudeDelta);
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateSpan)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MACoordinateRegionMake::MACoordinateRegionMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* centerCoordinateValue = (NSValue*) HEAP[@([args[@"centerCoordinate"] integerValue])];
          CLLocationCoordinate2D centerCoordinate;
          [centerCoordinateValue getValue:&centerCoordinate];
          // struct arg
          NSValue* spanValue = (NSValue*) HEAP[@([args[@"span"] integerValue])];
          MACoordinateSpan span;
          [spanValue getValue:&span];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACoordinateRegionMake::MACoordinateRegionMake(暂未实现参数打印)");
          }
      
          // invoke native method
          MACoordinateRegion result = MACoordinateRegionMake(centerCoordinate, span);
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MACoordinateRegionMakeWithDistance::MACoordinateRegionMakeWithDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* centerCoordinateValue = (NSValue*) HEAP[@([args[@"centerCoordinate"] integerValue])];
          CLLocationCoordinate2D centerCoordinate;
          [centerCoordinateValue getValue:&centerCoordinate];
          // jsonable arg
          CLLocationDistance latitudinalMeters = [args[@"latitudinalMeters"] doubleValue];
          // jsonable arg
          CLLocationDistance longitudinalMeters = [args[@"longitudinalMeters"] doubleValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACoordinateRegionMakeWithDistance::MACoordinateRegionMakeWithDistance(暂未实现参数打印)");
          }
      
          // invoke native method
          MACoordinateRegion result = MACoordinateRegionMakeWithDistance(centerCoordinate, latitudinalMeters, longitudinalMeters);
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapPointForCoordinate::MAMapPointForCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapPointForCoordinate::MAMapPointForCoordinate(暂未实现参数打印)");
          }
      
          // invoke native method
          MAMapPoint result = MAMapPointForCoordinate(coordinate);
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MACoordinateForMapPoint::MACoordinateForMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapPointValue = (NSValue*) HEAP[@([args[@"mapPoint"] integerValue])];
          MAMapPoint mapPoint;
          [mapPointValue getValue:&mapPoint];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACoordinateForMapPoint::MACoordinateForMapPoint(暂未实现参数打印)");
          }
      
          // invoke native method
          CLLocationCoordinate2D result = MACoordinateForMapPoint(mapPoint);
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MACoordinateRegionForMapRect::MACoordinateRegionForMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          MAMapRect rect;
          [rectValue getValue:&rect];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACoordinateRegionForMapRect::MACoordinateRegionForMapRect(暂未实现参数打印)");
          }
      
          // invoke native method
          MACoordinateRegion result = MACoordinateRegionForMapRect(rect);
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectForCoordinateRegion::MAMapRectForCoordinateRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
          MACoordinateRegion region;
          [regionValue getValue:&region];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectForCoordinateRegion::MAMapRectForCoordinateRegion(暂未实现参数打印)");
          }
      
          // invoke native method
          MAMapRect result = MAMapRectForCoordinateRegion(region);
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAMetersPerMapPointAtLatitude::MAMetersPerMapPointAtLatitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMetersPerMapPointAtLatitude::MAMetersPerMapPointAtLatitude(暂未实现参数打印)");
          }
      
          // invoke native method
          CLLocationDistance result = MAMetersPerMapPointAtLatitude(latitude);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapPointsPerMeterAtLatitude::MAMapPointsPerMeterAtLatitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapPointsPerMeterAtLatitude::MAMapPointsPerMeterAtLatitude(暂未实现参数打印)");
          }
      
          // invoke native method
          double result = MAMapPointsPerMeterAtLatitude(latitude);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMetersBetweenMapPoints::MAMetersBetweenMapPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* aValue = (NSValue*) HEAP[@([args[@"a"] integerValue])];
          MAMapPoint a;
          [aValue getValue:&a];
          // struct arg
          NSValue* bValue = (NSValue*) HEAP[@([args[@"b"] integerValue])];
          MAMapPoint b;
          [bValue getValue:&b];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMetersBetweenMapPoints::MAMetersBetweenMapPoints(暂未实现参数打印)");
          }
      
          // invoke native method
          CLLocationDistance result = MAMetersBetweenMapPoints(a, b);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAAreaBetweenCoordinates::MAAreaBetweenCoordinates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* northEastValue = (NSValue*) HEAP[@([args[@"northEast"] integerValue])];
          CLLocationCoordinate2D northEast;
          [northEastValue getValue:&northEast];
          // struct arg
          NSValue* southWestValue = (NSValue*) HEAP[@([args[@"southWest"] integerValue])];
          CLLocationCoordinate2D southWest;
          [southWestValue getValue:&southWest];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAreaBetweenCoordinates::MAAreaBetweenCoordinates(暂未实现参数打印)");
          }
      
          // invoke native method
          double result = MAAreaBetweenCoordinates(northEast, southWest);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectInset::MAMapRectInset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          MAMapRect rect;
          [rectValue getValue:&rect];
          // jsonable arg
          double dx = [args[@"dx"] doubleValue];
          // jsonable arg
          double dy = [args[@"dy"] doubleValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectInset::MAMapRectInset(暂未实现参数打印)");
          }
      
          // invoke native method
          MAMapRect result = MAMapRectInset(rect, dx, dy);
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectUnion::MAMapRectUnion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rect1Value = (NSValue*) HEAP[@([args[@"rect1"] integerValue])];
          MAMapRect rect1;
          [rect1Value getValue:&rect1];
          // struct arg
          NSValue* rect2Value = (NSValue*) HEAP[@([args[@"rect2"] integerValue])];
          MAMapRect rect2;
          [rect2Value getValue:&rect2];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectUnion::MAMapRectUnion(暂未实现参数打印)");
          }
      
          // invoke native method
          MAMapRect result = MAMapRectUnion(rect1, rect2);
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapSizeContainsSize::MAMapSizeContainsSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* size1Value = (NSValue*) HEAP[@([args[@"size1"] integerValue])];
          MAMapSize size1;
          [size1Value getValue:&size1];
          // struct arg
          NSValue* size2Value = (NSValue*) HEAP[@([args[@"size2"] integerValue])];
          MAMapSize size2;
          [size2Value getValue:&size2];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapSizeContainsSize::MAMapSizeContainsSize(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = MAMapSizeContainsSize(size1, size2);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectContainsPoint::MAMapRectContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          MAMapRect rect;
          [rectValue getValue:&rect];
          // struct arg
          NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
          MAMapPoint point;
          [pointValue getValue:&point];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectContainsPoint::MAMapRectContainsPoint(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = MAMapRectContainsPoint(rect, point);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectIntersectsRect::MAMapRectIntersectsRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rect1Value = (NSValue*) HEAP[@([args[@"rect1"] integerValue])];
          MAMapRect rect1;
          [rect1Value getValue:&rect1];
          // struct arg
          NSValue* rect2Value = (NSValue*) HEAP[@([args[@"rect2"] integerValue])];
          MAMapRect rect2;
          [rect2Value getValue:&rect2];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectIntersectsRect::MAMapRectIntersectsRect(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = MAMapRectIntersectsRect(rect1, rect2);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectContainsRect::MAMapRectContainsRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rect1Value = (NSValue*) HEAP[@([args[@"rect1"] integerValue])];
          MAMapRect rect1;
          [rect1Value getValue:&rect1];
          // struct arg
          NSValue* rect2Value = (NSValue*) HEAP[@([args[@"rect2"] integerValue])];
          MAMapRect rect2;
          [rect2Value getValue:&rect2];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectContainsRect::MAMapRectContainsRect(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = MAMapRectContainsRect(rect1, rect2);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MACircleContainsPoint::MACircleContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
          MAMapPoint point;
          [pointValue getValue:&point];
          // struct arg
          NSValue* centerValue = (NSValue*) HEAP[@([args[@"center"] integerValue])];
          MAMapPoint center;
          [centerValue getValue:&center];
          // jsonable arg
          double radius = [args[@"radius"] doubleValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACircleContainsPoint::MACircleContainsPoint(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = MACircleContainsPoint(point, center, radius);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MACircleContainsCoordinate::MACircleContainsCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
          CLLocationCoordinate2D point;
          [pointValue getValue:&point];
          // struct arg
          NSValue* centerValue = (NSValue*) HEAP[@([args[@"center"] integerValue])];
          CLLocationCoordinate2D center;
          [centerValue getValue:&center];
          // jsonable arg
          double radius = [args[@"radius"] doubleValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MACircleContainsCoordinate::MACircleContainsCoordinate(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = MACircleContainsCoordinate(point, center, radius);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAPolygonContainsPoint::MAPolygonContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
          MAMapPoint point;
          [pointValue getValue:&point];
          // list arg
          NSArray* polygonRefIdArray = (NSArray*) args[@"polygon"];
          MAMapPoint polygon[polygonRefIdArray.count];
      
          for (int i = 0; i < polygonRefIdArray.count; i++) {
              NSValue* polygonValue = (NSValue*) HEAP[[polygonRefIdArray objectAtIndex:i]];
              MAMapPoint polygonItem;
              [polygonValue getValue:&polygonItem];
              polygon[i] = polygonItem;
          }
          // jsonable arg
          NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAPolygonContainsPoint::MAPolygonContainsPoint(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = MAPolygonContainsPoint(point, polygon, count);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAPolygonContainsCoordinate::MAPolygonContainsCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
          CLLocationCoordinate2D point;
          [pointValue getValue:&point];
          // list arg
          NSArray* polygonRefIdArray = (NSArray*) args[@"polygon"];
          CLLocationCoordinate2D polygon[polygonRefIdArray.count];
      
          for (int i = 0; i < polygonRefIdArray.count; i++) {
              NSValue* polygonValue = (NSValue*) HEAP[[polygonRefIdArray objectAtIndex:i]];
              CLLocationCoordinate2D polygonItem;
              [polygonValue getValue:&polygonItem];
              polygon[i] = polygonItem;
          }
          // jsonable arg
          NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAPolygonContainsCoordinate::MAPolygonContainsCoordinate(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = MAPolygonContainsCoordinate(point, polygon, count);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAGetNearestMapPointFromLine::MAGetNearestMapPointFromLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* lineStartValue = (NSValue*) HEAP[@([args[@"lineStart"] integerValue])];
          MAMapPoint lineStart;
          [lineStartValue getValue:&lineStart];
          // struct arg
          NSValue* lineEndValue = (NSValue*) HEAP[@([args[@"lineEnd"] integerValue])];
          MAMapPoint lineEnd;
          [lineEndValue getValue:&lineEnd];
          // struct arg
          NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
          MAMapPoint point;
          [pointValue getValue:&point];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAGetNearestMapPointFromLine::MAGetNearestMapPointFromLine(暂未实现参数打印)");
          }
      
          // invoke native method
          MAMapPoint result = MAGetNearestMapPointFromLine(lineStart, lineEnd, point);
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAAreaForPolygon::MAAreaForPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* coordinatesRefIdArray = (NSArray*) args[@"coordinates"];
          CLLocationCoordinate2D coordinates[coordinatesRefIdArray.count];
      
          for (int i = 0; i < coordinatesRefIdArray.count; i++) {
              NSValue* coordinatesValue = (NSValue*) HEAP[[coordinatesRefIdArray objectAtIndex:i]];
              CLLocationCoordinate2D coordinatesItem;
              [coordinatesValue getValue:&coordinatesItem];
              coordinates[i] = coordinatesItem;
          }
          // jsonable arg
          int count = [args[@"count"] intValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAreaForPolygon::MAAreaForPolygon(暂未实现参数打印)");
          }
      
          // invoke native method
          double result = MAAreaForPolygon(coordinates, count);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapPointMake::MAMapPointMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          double x = [args[@"x"] doubleValue];
          // jsonable arg
          double y = [args[@"y"] doubleValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapPointMake::MAMapPointMake(暂未实现参数打印)");
          }
      
          // invoke native method
          MAMapPoint result = MAMapPointMake(x, y);
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapSizeMake::MAMapSizeMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          double width = [args[@"width"] doubleValue];
          // jsonable arg
          double height = [args[@"height"] doubleValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapSizeMake::MAMapSizeMake(暂未实现参数打印)");
          }
      
          // invoke native method
          MAMapSize result = MAMapSizeMake(width, height);
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapSize)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectMake::MAMapRectMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          double x = [args[@"x"] doubleValue];
          // jsonable arg
          double y = [args[@"y"] doubleValue];
          // jsonable arg
          double width = [args[@"width"] doubleValue];
          // jsonable arg
          double height = [args[@"height"] doubleValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectMake::MAMapRectMake(暂未实现参数打印)");
          }
      
          // invoke native method
          MAMapRect result = MAMapRectMake(x, y, width, height);
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectGetMinX::MAMapRectGetMinX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          MAMapRect rect;
          [rectValue getValue:&rect];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectGetMinX::MAMapRectGetMinX(暂未实现参数打印)");
          }
      
          // invoke native method
          double result = MAMapRectGetMinX(rect);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectGetMinY::MAMapRectGetMinY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          MAMapRect rect;
          [rectValue getValue:&rect];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectGetMinY::MAMapRectGetMinY(暂未实现参数打印)");
          }
      
          // invoke native method
          double result = MAMapRectGetMinY(rect);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectGetMidX::MAMapRectGetMidX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          MAMapRect rect;
          [rectValue getValue:&rect];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectGetMidX::MAMapRectGetMidX(暂未实现参数打印)");
          }
      
          // invoke native method
          double result = MAMapRectGetMidX(rect);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectGetMidY::MAMapRectGetMidY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          MAMapRect rect;
          [rectValue getValue:&rect];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectGetMidY::MAMapRectGetMidY(暂未实现参数打印)");
          }
      
          // invoke native method
          double result = MAMapRectGetMidY(rect);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectGetMaxX::MAMapRectGetMaxX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          MAMapRect rect;
          [rectValue getValue:&rect];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectGetMaxX::MAMapRectGetMaxX(暂未实现参数打印)");
          }
      
          // invoke native method
          double result = MAMapRectGetMaxX(rect);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectGetMaxY::MAMapRectGetMaxY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          MAMapRect rect;
          [rectValue getValue:&rect];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectGetMaxY::MAMapRectGetMaxY(暂未实现参数打印)");
          }
      
          // invoke native method
          double result = MAMapRectGetMaxY(rect);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectGetWidth::MAMapRectGetWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          MAMapRect rect;
          [rectValue getValue:&rect];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectGetWidth::MAMapRectGetWidth(暂未实现参数打印)");
          }
      
          // invoke native method
          double result = MAMapRectGetWidth(rect);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectGetHeight::MAMapRectGetHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          MAMapRect rect;
          [rectValue getValue:&rect];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectGetHeight::MAMapRectGetHeight(暂未实现参数打印)");
          }
      
          // invoke native method
          double result = MAMapRectGetHeight(rect);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapPointEqualToPoint::MAMapPointEqualToPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* point1Value = (NSValue*) HEAP[@([args[@"point1"] integerValue])];
          MAMapPoint point1;
          [point1Value getValue:&point1];
          // struct arg
          NSValue* point2Value = (NSValue*) HEAP[@([args[@"point2"] integerValue])];
          MAMapPoint point2;
          [point2Value getValue:&point2];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapPointEqualToPoint::MAMapPointEqualToPoint(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = MAMapPointEqualToPoint(point1, point2);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapSizeEqualToSize::MAMapSizeEqualToSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* size1Value = (NSValue*) HEAP[@([args[@"size1"] integerValue])];
          MAMapSize size1;
          [size1Value getValue:&size1];
          // struct arg
          NSValue* size2Value = (NSValue*) HEAP[@([args[@"size2"] integerValue])];
          MAMapSize size2;
          [size2Value getValue:&size2];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapSizeEqualToSize::MAMapSizeEqualToSize(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = MAMapSizeEqualToSize(size1, size2);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectEqualToRect::MAMapRectEqualToRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rect1Value = (NSValue*) HEAP[@([args[@"rect1"] integerValue])];
          MAMapRect rect1;
          [rect1Value getValue:&rect1];
          // struct arg
          NSValue* rect2Value = (NSValue*) HEAP[@([args[@"rect2"] integerValue])];
          MAMapRect rect2;
          [rect2Value getValue:&rect2];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectEqualToRect::MAMapRectEqualToRect(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = MAMapRectEqualToRect(rect1, rect2);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectIsNull::MAMapRectIsNull": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          MAMapRect rect;
          [rectValue getValue:&rect];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectIsNull::MAMapRectIsNull(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = MAMapRectIsNull(rect);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAMapRectIsEmpty::MAMapRectIsEmpty": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          MAMapRect rect;
          [rectValue getValue:&rect];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAMapRectIsEmpty::MAMapRectIsEmpty(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = MAMapRectIsEmpty(rect);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAStringFromMapPoint::MAStringFromMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
          MAMapPoint point;
          [pointValue getValue:&point];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAStringFromMapPoint::MAStringFromMapPoint(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = MAStringFromMapPoint(point);
      
          // result
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      @"MAStringFromMapSize::MAStringFromMapSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* sizeValue = (NSValue*) HEAP[@([args[@"size"] integerValue])];
          MAMapSize size;
          [sizeValue getValue:&size];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAStringFromMapSize::MAStringFromMapSize(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = MAStringFromMapSize(size);
      
          // result
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      @"MAStringFromMapRect::MAStringFromMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          MAMapRect rect;
          [rectValue getValue:&rect];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAStringFromMapRect::MAStringFromMapRect(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = MAStringFromMapRect(rect);
      
          // result
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      @"MAGetDirectionFromCoords::MAGetDirectionFromCoords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* fromCoordValue = (NSValue*) HEAP[@([args[@"fromCoord"] integerValue])];
          CLLocationCoordinate2D fromCoord;
          [fromCoordValue getValue:&fromCoord];
          // struct arg
          NSValue* toCoordValue = (NSValue*) HEAP[@([args[@"toCoord"] integerValue])];
          CLLocationCoordinate2D toCoord;
          [toCoordValue getValue:&toCoord];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAGetDirectionFromCoords::MAGetDirectionFromCoords(暂未实现参数打印)");
          }
      
          // invoke native method
          CLLocationDirection result = MAGetDirectionFromCoords(fromCoord, toCoord);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAGetDirectionFromPoints::MAGetDirectionFromPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* fromPointValue = (NSValue*) HEAP[@([args[@"fromPoint"] integerValue])];
          MAMapPoint fromPoint;
          [fromPointValue getValue:&fromPoint];
          // struct arg
          NSValue* toPointValue = (NSValue*) HEAP[@([args[@"toPoint"] integerValue])];
          MAMapPoint toPoint;
          [toPointValue getValue:&toPoint];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAGetDirectionFromPoints::MAGetDirectionFromPoints(暂未实现参数打印)");
          }
      
          // invoke native method
          CLLocationDirection result = MAGetDirectionFromPoints(fromPoint, toPoint);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"MAGetDistanceFromPointToLine::MAGetDistanceFromPointToLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
          MAMapPoint point;
          [pointValue getValue:&point];
          // struct arg
          NSValue* lineBeginValue = (NSValue*) HEAP[@([args[@"lineBegin"] integerValue])];
          MAMapPoint lineBegin;
          [lineBeginValue getValue:&lineBegin];
          // struct arg
          NSValue* lineEndValue = (NSValue*) HEAP[@([args[@"lineEnd"] integerValue])];
          MAMapPoint lineEnd;
          [lineEndValue getValue:&lineEnd];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAGetDistanceFromPointToLine::MAGetDistanceFromPointToLine(暂未实现参数打印)");
          }
      
          // invoke native method
          double result = MAGetDistanceFromPointToLine(point, lineBegin, lineEnd);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
    };
  }

  return self;
}

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"me.yohom/amap_map_fluttify"
            binaryMessenger:[registrar messenger]];

  [registrar addMethodCallDelegate:[[AmapMapFluttifyPlugin alloc] initWithFlutterPluginRegistrar:registrar]
                           channel:channel];

  // 注册View
  [registrar registerViewFactory: [[MAAnnotationViewFactory alloc] initWithRegistrar:registrar] withId: @"me.yohom/MAAnnotationView"];
  [registrar registerViewFactory: [[MACustomCalloutViewFactory alloc] initWithRegistrar:registrar] withId: @"me.yohom/MACustomCalloutView"];
  [registrar registerViewFactory: [[MAMapViewFactory alloc] initWithRegistrar:registrar] withId: @"me.yohom/MAMapView"];
}

// Method Handlers
- (void)handleMethodCall:(FlutterMethodCall *)methodCall result:(FlutterResult)methodResult {
  if (_handlerMap[methodCall.method] != nil) {
    _handlerMap[methodCall.method](_registrar, [methodCall arguments], methodResult);
  } else {
    methodResult(FlutterMethodNotImplemented);
  }
}

// 委托方法们
- (void)traceManager : (MATraceManager*)manager didTrace: (NSArray<CLLocation*>*)locations correct: (NSArray<MATracePoint*>*)tracePoints distance: (double)distance withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MATraceDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MATraceDelegate::traceManagerDidTracecorrectdistancewithError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // list callback arg
  NSMutableArray<NSNumber*>* arglocations = [NSMutableArray arrayWithCapacity:locations.count];
  for (int i = 0; i < locations.count; i++) {
      NSObject* item = ((NSObject*) [locations objectAtIndex:i]);
      // return to dart side data
      arglocations[i] = @(item.hash);
      // add to HEAP
      HEAP[@(item.hash)] = item;
  }
  // list callback arg
  NSMutableArray<NSNumber*>* argtracePoints = [NSMutableArray arrayWithCapacity:tracePoints.count];
  for (int i = 0; i < tracePoints.count; i++) {
      NSObject* item = ((NSObject*) [tracePoints objectAtIndex:i]);
      // return to dart side data
      argtracePoints[i] = @(item.hash);
      // add to HEAP
      HEAP[@(item.hash)] = item;
  }
  // primitive callback arg
  NSNumber* argdistance = @(distance);
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::MATraceDelegate::traceManagerDidTracecorrectdistancewithError" arguments:@{@"manager": argmanager, @"locations": arglocations, @"tracePoints": argtracePoints, @"distance": argdistance, @"error": argerror}];
  
}

- (void)mapViewRequireLocationAuth : (CLLocationManager*)locationManager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MATraceDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MATraceDelegate::mapViewRequireLocationAuth");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* arglocationManager = @(locationManager.hash);
  HEAP[arglocationManager] = locationManager;

  [channel invokeMethod:@"Callback::MATraceDelegate::mapViewRequireLocationAuth" arguments:@{@"locationManager": arglocationManager}];
  
}

- (void)multiPointOverlayRenderer : (MAMultiPointOverlayRenderer*)renderer didItemTapped: (MAMultiPointItem*)item
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMultiPointOverlayRendererDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMultiPointOverlayRendererDelegate::multiPointOverlayRendererDidItemTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrenderer = @(renderer.hash);
  HEAP[argrenderer] = renderer;
  // ref callback arg
  NSNumber* argitem = @(item.hash);
  HEAP[argitem] = item;

  [channel invokeMethod:@"Callback::MAMultiPointOverlayRendererDelegate::multiPointOverlayRendererDidItemTapped" arguments:@{@"renderer": argrenderer, @"item": argitem}];
  
}

- (void)mapViewRegionChanged : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewRegionChanged");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewRegionChanged" arguments:@{@"mapView": argmapView}];
  
}

- (void)mapView : (MAMapView*)mapView regionWillChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewRegionWillChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewRegionWillChangeAnimated" arguments:@{@"mapView": argmapView, @"animated": arganimated}];
  
}

- (void)mapView : (MAMapView*)mapView regionDidChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewRegionDidChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewRegionDidChangeAnimated" arguments:@{@"mapView": argmapView, @"animated": arganimated}];
  
}

- (void)mapView : (MAMapView*)mapView mapWillMoveByUser: (BOOL)wasUserAction
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewMapWillMoveByUser");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* argwasUserAction = @(wasUserAction);

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewMapWillMoveByUser" arguments:@{@"mapView": argmapView, @"wasUserAction": argwasUserAction}];
  
}

- (void)mapView : (MAMapView*)mapView mapDidMoveByUser: (BOOL)wasUserAction
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewMapDidMoveByUser");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* argwasUserAction = @(wasUserAction);

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewMapDidMoveByUser" arguments:@{@"mapView": argmapView, @"wasUserAction": argwasUserAction}];
  
}

- (void)mapView : (MAMapView*)mapView mapWillZoomByUser: (BOOL)wasUserAction
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewMapWillZoomByUser");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* argwasUserAction = @(wasUserAction);

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewMapWillZoomByUser" arguments:@{@"mapView": argmapView, @"wasUserAction": argwasUserAction}];
  
}

- (void)mapView : (MAMapView*)mapView mapDidZoomByUser: (BOOL)wasUserAction
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewMapDidZoomByUser");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* argwasUserAction = @(wasUserAction);

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewMapDidZoomByUser" arguments:@{@"mapView": argmapView, @"wasUserAction": argwasUserAction}];
  
}

- (void)mapViewWillStartLoadingMap : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewWillStartLoadingMap");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewWillStartLoadingMap" arguments:@{@"mapView": argmapView}];
  
}

- (void)mapViewDidFinishLoadingMap : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidFinishLoadingMap");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidFinishLoadingMap" arguments:@{@"mapView": argmapView}];
  
}

- (void)mapViewDidFailLoadingMap : (MAMapView*)mapView withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidFailLoadingMapWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidFailLoadingMapWithError" arguments:@{@"mapView": argmapView, @"error": argerror}];
  
}

- (MAAnnotationView*)mapView : (MAMapView*)mapView viewForAnnotation: (id<MAAnnotation>)annotation
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewViewForAnnotation");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argannotation = @(annotation.hash);
  HEAP[argannotation] = annotation;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewViewForAnnotation"
              arguments:@{@"mapView": argmapView, @"annotation": argannotation}
                 result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return nil;
}

- (void)mapView : (MAMapView*)mapView didAddAnnotationViews: (NSArray*)views
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidAddAnnotationViews");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // list callback arg
  NSMutableArray<NSNumber*>* argviews = [NSMutableArray arrayWithCapacity:views.count];
  for (int i = 0; i < views.count; i++) {
      NSObject* item = ((NSObject*) [views objectAtIndex:i]);
      // return to dart side data
      argviews[i] = @(item.hash);
      // add to HEAP
      HEAP[@(item.hash)] = item;
  }

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidAddAnnotationViews" arguments:@{@"mapView": argmapView, @"views": argviews}];
  
}

- (void)mapView : (MAMapView*)mapView didSelectAnnotationView: (MAAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidSelectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidSelectAnnotationView" arguments:@{@"mapView": argmapView, @"view": argview}];
  
}

- (void)mapView : (MAMapView*)mapView didDeselectAnnotationView: (MAAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidDeselectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidDeselectAnnotationView" arguments:@{@"mapView": argmapView, @"view": argview}];
  
}

- (void)mapViewWillStartLocatingUser : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewWillStartLocatingUser");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewWillStartLocatingUser" arguments:@{@"mapView": argmapView}];
  
}

- (void)mapViewDidStopLocatingUser : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidStopLocatingUser");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidStopLocatingUser" arguments:@{@"mapView": argmapView}];
  
}

- (void)mapView : (MAMapView*)mapView didUpdateUserLocation: (MAUserLocation*)userLocation updatingLocation: (BOOL)updatingLocation
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidUpdateUserLocationupdatingLocation");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* arguserLocation = @(userLocation.hash);
  HEAP[arguserLocation] = userLocation;
  // primitive callback arg
  NSNumber* argupdatingLocation = @(updatingLocation);

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidUpdateUserLocationupdatingLocation" arguments:@{@"mapView": argmapView, @"userLocation": arguserLocation, @"updatingLocation": argupdatingLocation}];
  
}

- (void)mapView : (MAMapView*)mapView didFailToLocateUserWithError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidFailToLocateUserWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidFailToLocateUserWithError" arguments:@{@"mapView": argmapView, @"error": argerror}];
  
}

- (void)mapView : (MAMapView*)mapView annotationView: (MAAnnotationView*)view didChangeDragState: (MAAnnotationViewDragState)newState fromOldState: (MAAnnotationViewDragState)oldState
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewAnnotationViewdidChangeDragStatefromOldState");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;
  // enum callback arg
  NSNumber* argnewState = @((NSInteger) newState);
  // enum callback arg
  NSNumber* argoldState = @((NSInteger) oldState);

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewAnnotationViewdidChangeDragStatefromOldState" arguments:@{@"mapView": argmapView, @"view": argview, @"newState": argnewState, @"oldState": argoldState}];
  
}

- (MAOverlayRenderer*)mapView : (MAMapView*)mapView rendererForOverlay: (id<MAOverlay>)overlay
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewRendererForOverlay");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argoverlay = @(overlay.hash);
  HEAP[argoverlay] = overlay;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewRendererForOverlay"
              arguments:@{@"mapView": argmapView, @"overlay": argoverlay}
                 result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return nil;
}

- (void)mapView : (MAMapView*)mapView didAddOverlayRenderers: (NSArray*)overlayRenderers
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidAddOverlayRenderers");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // list callback arg
  NSMutableArray<NSNumber*>* argoverlayRenderers = [NSMutableArray arrayWithCapacity:overlayRenderers.count];
  for (int i = 0; i < overlayRenderers.count; i++) {
      NSObject* item = ((NSObject*) [overlayRenderers objectAtIndex:i]);
      // return to dart side data
      argoverlayRenderers[i] = @(item.hash);
      // add to HEAP
      HEAP[@(item.hash)] = item;
  }

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidAddOverlayRenderers" arguments:@{@"mapView": argmapView, @"overlayRenderers": argoverlayRenderers}];
  
}

- (void)mapView : (MAMapView*)mapView annotationView: (MAAnnotationView*)view calloutAccessoryControlTapped: (UIControl*)control
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewAnnotationViewcalloutAccessoryControlTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;
  // ref callback arg
  NSNumber* argcontrol = @(control.hash);
  HEAP[argcontrol] = control;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewAnnotationViewcalloutAccessoryControlTapped" arguments:@{@"mapView": argmapView, @"view": argview, @"control": argcontrol}];
  
}

- (void)mapView : (MAMapView*)mapView didAnnotationViewCalloutTapped: (MAAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidAnnotationViewCalloutTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidAnnotationViewCalloutTapped" arguments:@{@"mapView": argmapView, @"view": argview}];
  
}

- (void)mapView : (MAMapView*)mapView didAnnotationViewTapped: (MAAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidAnnotationViewTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidAnnotationViewTapped" arguments:@{@"mapView": argmapView, @"view": argview}];
  
}

- (void)mapView : (MAMapView*)mapView didChangeUserTrackingMode: (MAUserTrackingMode)mode animated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidChangeUserTrackingModeanimated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // enum callback arg
  NSNumber* argmode = @((NSInteger) mode);
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidChangeUserTrackingModeanimated" arguments:@{@"mapView": argmapView, @"mode": argmode, @"animated": arganimated}];
  
}

- (void)mapView : (MAMapView*)mapView didChangeOpenGLESDisabled: (BOOL)openGLESDisabled
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidChangeOpenGLESDisabled");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* argopenGLESDisabled = @(openGLESDisabled);

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidChangeOpenGLESDisabled" arguments:@{@"mapView": argmapView, @"openGLESDisabled": argopenGLESDisabled}];
  
}

- (void)mapView : (MAMapView*)mapView didTouchPois: (NSArray*)pois
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidTouchPois");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // list callback arg
  NSMutableArray<NSNumber*>* argpois = [NSMutableArray arrayWithCapacity:pois.count];
  for (int i = 0; i < pois.count; i++) {
      NSObject* item = ((NSObject*) [pois objectAtIndex:i]);
      // return to dart side data
      argpois[i] = @(item.hash);
      // add to HEAP
      HEAP[@(item.hash)] = item;
  }

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidTouchPois" arguments:@{@"mapView": argmapView, @"pois": argpois}];
  
}

- (void)mapView : (MAMapView*)mapView didSingleTappedAtCoordinate: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidSingleTappedAtCoordinate");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = @(coordinateValue.hash);
  HEAP[argcoordinate] = coordinateValue;
  

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidSingleTappedAtCoordinate" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate}];
  
}

- (void)mapView : (MAMapView*)mapView didLongPressedAtCoordinate: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidLongPressedAtCoordinate");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = @(coordinateValue.hash);
  HEAP[argcoordinate] = coordinateValue;
  

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidLongPressedAtCoordinate" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate}];
  
}

- (void)mapInitComplete : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapInitComplete");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapInitComplete" arguments:@{@"mapView": argmapView}];
  
}

- (void)mapView : (MAMapView*)mapView didIndoorMapShowed: (MAIndoorInfo*)indoorInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidIndoorMapShowed");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argindoorInfo = @(indoorInfo.hash);
  HEAP[argindoorInfo] = indoorInfo;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidIndoorMapShowed" arguments:@{@"mapView": argmapView, @"indoorInfo": argindoorInfo}];
  
}

- (void)mapView : (MAMapView*)mapView didIndoorMapFloorIndexChanged: (MAIndoorInfo*)indoorInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidIndoorMapFloorIndexChanged");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argindoorInfo = @(indoorInfo.hash);
  HEAP[argindoorInfo] = indoorInfo;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidIndoorMapFloorIndexChanged" arguments:@{@"mapView": argmapView, @"indoorInfo": argindoorInfo}];
  
}

- (void)mapView : (MAMapView*)mapView didIndoorMapHidden: (MAIndoorInfo*)indoorInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidIndoorMapHidden");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argindoorInfo = @(indoorInfo.hash);
  HEAP[argindoorInfo] = indoorInfo;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidIndoorMapHidden" arguments:@{@"mapView": argmapView, @"indoorInfo": argindoorInfo}];
  
}

- (void)offlineDataWillReload : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::offlineDataWillReload");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::offlineDataWillReload" arguments:@{@"mapView": argmapView}];
  
}

- (void)offlineDataDidReload : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"MAMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::offlineDataDidReload");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;

  [channel invokeMethod:@"Callback::MAMapViewDelegate::offlineDataDidReload" arguments:@{@"mapView": argmapView}];
  
}


@end