//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler8.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapMapFluttifyPlugin (SubHandler8)
- (NSDictionary<NSString*, Handler>*) getSubHandler8 {
    return @{
        @"MAMapRectIsEmpty::MAMapRectIsEmpty": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
            MAMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapRectIsEmpty::MAMapRectIsEmpty(%@)", args[@"rect"]);
            }
        
            // invoke native method
            BOOL result = MAMapRectIsEmpty(rect);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAStringFromMapPoint::MAStringFromMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
            MAMapPoint point;
            [pointValue getValue:&point];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAStringFromMapPoint::MAStringFromMapPoint(%@)", args[@"point"]);
            }
        
            // invoke native method
            NSString* result = MAStringFromMapPoint(point);
        
            // result
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        @"MAStringFromMapSize::MAStringFromMapSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* sizeValue = (NSValue*) HEAP[@([args[@"size"] integerValue])];
            MAMapSize size;
            [sizeValue getValue:&size];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAStringFromMapSize::MAStringFromMapSize(%@)", args[@"size"]);
            }
        
            // invoke native method
            NSString* result = MAStringFromMapSize(size);
        
            // result
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        @"MAStringFromMapRect::MAStringFromMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
            MAMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAStringFromMapRect::MAStringFromMapRect(%@)", args[@"rect"]);
            }
        
            // invoke native method
            NSString* result = MAStringFromMapRect(rect);
        
            // result
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        @"MAGetDirectionFromCoords::MAGetDirectionFromCoords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* fromCoordValue = (NSValue*) HEAP[@([args[@"fromCoord"] integerValue])];
            CLLocationCoordinate2D fromCoord;
            [fromCoordValue getValue:&fromCoord];
            // struct arg
            NSValue* toCoordValue = (NSValue*) HEAP[@([args[@"toCoord"] integerValue])];
            CLLocationCoordinate2D toCoord;
            [toCoordValue getValue:&toCoord];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAGetDirectionFromCoords::MAGetDirectionFromCoords(%@, %@)", args[@"fromCoord"], args[@"toCoord"]);
            }
        
            // invoke native method
            CLLocationDirection result = MAGetDirectionFromCoords(fromCoord, toCoord);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAGetDirectionFromPoints::MAGetDirectionFromPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* fromPointValue = (NSValue*) HEAP[@([args[@"fromPoint"] integerValue])];
            MAMapPoint fromPoint;
            [fromPointValue getValue:&fromPoint];
            // struct arg
            NSValue* toPointValue = (NSValue*) HEAP[@([args[@"toPoint"] integerValue])];
            MAMapPoint toPoint;
            [toPointValue getValue:&toPoint];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAGetDirectionFromPoints::MAGetDirectionFromPoints(%@, %@)", args[@"fromPoint"], args[@"toPoint"]);
            }
        
            // invoke native method
            CLLocationDirection result = MAGetDirectionFromPoints(fromPoint, toPoint);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAGetDistanceFromPointToLine::MAGetDistanceFromPointToLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
            MAMapPoint point;
            [pointValue getValue:&point];
            // struct arg
            NSValue* lineBeginValue = (NSValue*) HEAP[@([args[@"lineBegin"] integerValue])];
            MAMapPoint lineBegin;
            [lineBeginValue getValue:&lineBegin];
            // struct arg
            NSValue* lineEndValue = (NSValue*) HEAP[@([args[@"lineEnd"] integerValue])];
            MAMapPoint lineEnd;
            [lineEndValue getValue:&lineEnd];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAGetDistanceFromPointToLine::MAGetDistanceFromPointToLine(%@, %@, %@)", args[@"point"], args[@"lineBegin"], args[@"lineEnd"]);
            }
        
            // invoke native method
            double result = MAGetDistanceFromPointToLine(point, lineBegin, lineEnd);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
    };
}

@end
